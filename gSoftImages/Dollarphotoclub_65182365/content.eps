%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: облачная технология.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Constantin Rassylnov
%%CreationDate: 17.05.14
%%BoundingBox: 0 0 1788 1404
%%HiResBoundingBox: 0 0 1787.8171 1403.8846
%%CropBox: 0 0 1787.8171 1403.8846
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 27826 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C455F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F35343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B5F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F35343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B5F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F35343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B5F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F3434%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B5F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F35343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B5F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F343B343B353B%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%35343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%35345F84AEA8AF8484343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B5F355F355F355F355F355F355F355F355F355F355F%355F353B345F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F353B5FFD09FF843B345F355F355F355F355F355F355F355F%355F355F355F355F355F35343B343B343B343B343B343B343B343B343B34%5F3435345F5F5F343B343B355F343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B83FD0BFFA83B345F343B343B343B343B343B343B34%3B343B343B343B343B343B5F355F345F355F345F355F345F355F345F355F%343B84FD04FFAF5F3B355F5F665F5F345F355F345F355F345F355F345F35%5F345F355F345F355F345F355F345F355F345F355F345F355F345F355F34%5F355F343B343B83FD0DFFAE3B343B355F343B343B345F355F345F355F34%5F355F345F355F34343B343B343B343B343B343B343B3435343B343584FD%07FF5F3B3435345F5F3B343B343B343B343B343B343B343B343B343B343B%343B343B343B343B343B343B343B343B343B343B343B343B343B345F355F%5FFD05FFA8FFA8FFA8FD05FF835F84AFA8AF845F343B343B343B343B343B%343B343B343B343B5F355F355F355F355F355F355F355F84FFAEAE84FD09%FF5F845F5F345F5F5F355F355F355F355F355F355F355F355F355F355F35%5F355F355F355F355F355F355F355F355F355F355F343B5FAFAFFD0BFFA8%FD0EFFAF355F355F355F355F355F355F355F355F35343B343B343B343B34%3B343B345FAEFD11FF845F345F3B3B343B343B343B343B343B343B343B34%3B343B343B343B345F343B345F343B343B343B343B343B345F343B84FD0B%FFA8FFFFFFA8FD0EFFAF343B343B343B343B343B343B343B343B5F345F35%5F345F355F345F353BA8FD13FFA85F3566355F355F345F355F345F355F34%5F355F345F355F345F343B345F343B345F355F345F355F345F355F343B84%FD11FFA8FD0EFFAE345F355F345F355F345F355F345F35343B343B343B34%3B343B343B35FD15FF5F3B5F5F343B3435343B343B343B343B345F343B34%3B34353435343434353435FD053435343B343B34355FFD0BFFA8FD07FFA8%FD0EFF5F343B343B343B343B343B343B343B5F355F355F355F355F355F34%84FD15FF8A355F5F605F605F665F5F355F355F5F8A5F66345F345F5F665F%5F345F345F5F8A5F3B345F3435345F355F34FD23FF843B355F355F355F35%5F355F355F35343B343B343B343B343B34AEFD16FF3B5F5F5F3B5F3B5F3B%5F5F5F343B356034345F5F34355F5F345F5F35345F5F3534663535343B34%353435345FFD0CFFA8FD07FFA8FD0EFFAF343B343B343B343B343B343B34%3B5F355F345F355F345F345FAFFD15FF8A5F348A5F3B345F353B345F5F5F%345F5F35345F5F3534663B3B346634353B6034355F5F343B345F343B3435%5FFD0DFFA8FD05FFA8FD0FFFAF5F345F355F345F355F345F355F34343B34%3B343B343B343B5F8A84AE848A84AE848A84AE848A84AE848A84AE848A5F%8A343B5F5F343B343B343B34603434345F3435355F34343B5F34355F3534%5F3B35345F5F353435343B343B345F84FD0DFFA8FFA8FFA8FD12FFA8343B%343B343B343B343B343B5F355F355F355F355F355F5F8A66665F8A66665F%6666665F8A60665F8A6666608A5F5F5F8A595F355F5F5F355F5F5F345F5F%5F358A5F3534665F5F598A34353B8A595F35665F665F8A5F665F8A5F8AAF%FD0FFFA8FD14FFAF355F355F355F355F355F35343B343B343B343B343B34%5F5F845F5F5F845FAE84605F5F5F8A5F5F5F845F5F595F5F66345F355F34%5F355F34603B353B6034343566343B5F5F34355F5F345F59353459343B34%35343B3435345F5F8AAEFD23FFAE5F343B343B343B343B343B5F345F355F%345F355F345F595F595F595F595FAFFF355F595F5F5F595F595F595F5F8A%3B5F355F353B345F343559665F60353B345F5F665F5F343B345F5F665F5F%343B595F345F3435345F34353484668AAEFD22FF8A5F3B355F345F355F34%5F35343B343B343B343B343B345F595F345F595F34FFA85F345F5966595F%595F59845F5F343B353B343B343B34353459343B34593435345934353435%3435343534593434345934353435343534353435348A5F665F8A84AE84AF%84AE84AF84AE84AF84AE84AF84AE84AF84AE84AF84AE84AF84AE848A5F5F%343B343B343B343B343B5F355F355F355F355F355F5F5F595F5F5F595FAF%FF595F59606060595F59845F5F355F5F5F355F3B5F345F345F595F345F35%5F345F343B345F345F345F345F355F345F345F595F595F595F595F595F59%8A668A66665F665F665F665F665F665F665F665F665F665F665F665F665F%665F665F66668A355F355F355F355F355F35343B343B343B343B343B345F%355F345F355F34FFA85F345F5F66595F355F345F343B345F343B343B3434%343B34593435345934353459345F343534353459345F3435343534353435%343534353435345F355F5F8A5F665F8A5F665F8A5F665F8A5F665F8A5F66%5F8A5F665F8A5F665F8A5F665F8A593B343B343B343B343B343B5F355F34%5F355F345F355F345F355F345F353BA8FF353B345F665F345F353B345F59%5F345F355F343B343B345F345F345F343B345F355F345F343B345F595F34%5F343B345F343B345F343B345F345F355F355F59845F5F5F845F845F845F%845F845F845F845F845F845F845F8A5F845F845F5F595F353B345F355F34%5F355F34343B343B343B343B343B343B343B343B343B34AFA83B343B358A%353B343B345F345F343B343B3434343B3434343534353435343534353435%3435343534353434343534353435343534353434343B3459345F3459345F%3459345F595F355F595F355F595F355F595F355F595F345F355F345F355F%345F343B343B343B343B343B5F355F355F355F355F355F355F355F355F35%5FAEFF355F345F665F345F355F355F355F355F3535345F355F345F345F34%5F345F345F343B345F345F345F343B345F345F345F345F345F345F345F35%5F345F595F355F595F355F595F5F605F5F5F605F5F5F605F5F5F605F5F59%5F5F5F595F5F5F595F355F355F355F355F355F35343B343B343B343B343B%343B343B343B343B34AFA83B343B358A3B3B343B343B343B343B34353435%343B343534353435343534353435343534353435343B3435343B34353435%3435343B3435343B3435345F345F345F345F345F355F595F595F595F595F%595F595F595F595F595F595F595F595F343B343B343B343B343B343B5F34%5F355F345F355F345F355F345F355F345FAEFF345F355F5F5F355F345F35%5F345F3B3B345F353B345F343B345F343B345F343B345F343B345F355F34%5F355F345F355F345F343B345F343B345F343B345F355F345F355F34FD07%5F59FD075F355F595F355F595F355F353B345F355F345F355F345F35343B%343B343B343B343B343B343B343B343B34AFA83B343B3566353B343B343B%343B343B3434343B34343435343534353435343534353435343B343B343B%343B343B343B343B343B3435343B3435343B3435343B3435343B34353435%353B345F343B345F343B343B343B343B343B343B343B343B343B343B343B%343B343B343B5F355F355F355F355F355F355F355F355F345FAFFF345F35%5F6066355F355F355F355F3435345F345F5F60343B345F345F345F345F34%5F355F355F355F345F3435345F355F355F3B5F345F355F345F355F345F35%5F345F355F345F345F3B5F3B5F3B5F3B5F355F355F355F355F355F355F35%5F355F355F355F355F355F355F35343B343B343B343B343B343B343B343B%343B34FFA83B343B345F5F5F343B343B343B34343435345F5F8AFD045F34%3534353435343B343B343BFD04342E3434342E343435345F343B343B3435%343B3435343B3435343B343B343B345F355F355F345F343B343B343B343B%343B343B343B343B343B343B343B343B343B343B5F355F345F355F345F35%5F345F355F345F353BA8FF353B345F5966668A5F665F665F605F665F605F%8A6666345F3B3B345F343B345F355F345F34343435343434353434343534%34345F355F345F343B345F343B345F343B345F345F345F355F3B5F3B5F34%5F355F345F353B345F355F345F355F345F355F345F355F345F355F34343B%343B343B343B343B343B343B343B343B34AFA83B343B345F345F5F665F66%5F665F665F665F665F665F34343534353435343B343B34342E3434342E34%34342E3434342E342E34343B343B343B3435343B3435343B343534353435%3435353B343B343B343B343B343B2E3B3434343B343B343B343B343B343B%343B343B343B5F355F355F355F355F355F355F355F355F355FAEFF355F35%5F5F5F345F3B5F355F355F345F355F3B8A6666358A5F3B345F345F355F35%35343534353435343434353435343534353435345F355F355F345F355F34%5F355F345F3B5F3B5F3B5F5F5F3B5F355F355F355F3B5F3B5F355F355F35%5F355F355F355F355F355F355F35343B343B343B343B343B343B343B343B%343B34AFA83B343B345F593B343B343B3435343534353434598A5F35345F%3435343B343BFD04342E3434342EFD05340C342E3434342E34343B343B34%35343B3435343B34353B603B5F3B5F3B5F3B663B3B343B343B345F355F35%5F353B343B343B343B343B343B343B343B343B5F345F355F345F355F345F%355F345F355F345FAEFF345F353B345F595F355F355F345F355F345F355F%595F595F345F343B345F3535343534343435343459A8A8A8848434343435%34343435345F345F343B345F343B345F3560355F355F345F355F3B66355F%345F355FFD04342E5F3B5F345F355F345F355F345F355F345F35343B343B%343B343B343B343B343B343B343B34AFA83B343B343B345F595F355F5959%345F5859345F3459345934343435343B34352E342E3434342E3483CA7D84%7DA8A8842E342E3434342E34343B343B3435343B3435343B355FCAFD075F%353B343B343B34342E342E34343B343B343B343B343B343B343B343B343B%5F355F355F355F355F355F355F355F355F343BAFFF345F355F355F355F35%5F3B5F345F355F345F595F595F595F345F345F355F343434353435343483%FF7D5934343484CA833435343534353435355F355F345F355F345F355F34%84355F345F345F3460355F355F355F34593435345F355F355F355F355F35%5F355F355F355F35343B343B343B343B343B343B343B343B343B84FFFF84%343B343B343B343B343B3434343B343534353459585F3435343B343BFD04%342E3434342EA87D340B342E342EA8A8342E3434342E343435343B343534%3B3435343B5F5F345F355F345F345F353B343B343B345F3534345F343B34%3B343B343B343B343B343B343B343B5F355F345F355F345F355F345F355F%343B84FD04FF84345F355F345F355F345F343B345F343B345F345F343B34%3B345F35353435343434353435A88434342E3434347DA834343435343434%35345F345F343B345F343B345F5F5F595F5F5F59605F5F345F355F345F59%5F345F5F5F345F355F345F355F345F355F345F355F34343B343B343B343B%343B343B343B343B34AFFD04FFA83B343B343B343B343B34353435343534%35343534343435343B343B34342E3434342E3434A87D340C340B340C7D84%342E342E3434342E34343B343B3435343B343434595859345F5859345F34%3B343B343B345F5934345F343B343B343B343B343B343B343B343B343B5F%355F355F355F355F355F355F355F355F8AFFAEFFAFAE355F355F355F355F%355F345F345F345F345F345F345F355F355F34343435343534353435A884%FD06347DAE34342E3534353435345F355F355F345F345F345F355F345F35%5F345F3B5F355F355F355F3B5F345F5F5F355F355F355F355F355F355F35%5F355F35343B343B343B343B343B343B343B343B345F345F355F353B343B%343B343B343B343534353435343534353435343B343B343534342E343434%2E3483FFA8A884A884A8A8A87D832E342E3434342E34343B343B34353435%343534353435343B3434343B343B343B343B343B3434345F343B343B343B%343B343B343B343B343B343B5F345F355F345F355F345F355F345F355F34%35355F345F355F345F355F345F3535345F343B345F343B345F343B345F35%5FFD053435343434FFFFFFCBFFFFFFCACBA8A87D5934342EFD04345F3B5F%345F343B345F343B345F343B345F345F345F355F345F355F345F3435345F%355F345F355F345F355F345F355F345F35343B343B343B343B343B343B34%3B343B345F345F3559343B343B343B343B343B3434343534353435343534%3B3435343B34342E3434342E342E34A8FFA8FFA8FFA8A87DA87DA82E342E%340CFD04343B34353435343534353435343534353435343B343B343B343B%343B3434343B343B343B343B343B343B343B343B343B343B5F355F355F35%5F355F355F355F355F355F595F5F5F595F355F355F355F355F3535345F34%5F345F355F345F355F345F355F343534353435343434FD05FF52527DA8A8%A87D5934342EFD04345F3B5F345F345F345F345F345F345F345F345F355F%355F355F355F355F343B355F355F355F355F355F355F355F355F355F3534%3B343B343B343B343B343B343B343B345F355F355F343B343B343B343B34%3B3434343B3435343B3435343B3435343B34352E3434342E343434A8FFA8%FF7D5227A87DA87DA82E342E342E342E34345F3435343534353435343534%3534353435343B343B343B343B343B3434343B343B343B343B343B343B34%3B343B343B343B5F355F345F355F345F355F345F355F345F355F355F593B%345F355F345F355F345F345F343B343B345F343B345F343B345F34343435%3434343534AFFFFFA8A8527DA8A87DA883342E3434342E34343B345F343B%343B34355F5F3435345F3435345F355F345F355F345F355F345F3B5F345F%355F345F355F345F355F345F355F34343B343B343B343B343B343B343B34%3B343B343B345F343B343B343B34605F605F665F665F845935343B343534%3B343B343B34342E3434340C34A8A87DA87D7D7DA87DA87DA82E340C342E%340B34343B34353434355F34665F66343434353434343B343B343B343B34%3B3434343B343B343B343B343B343B343B343B343B343B5F355F355F355F%355F355F355F355F355F355F355F355F355F355F345F608A5F8A608A5FFF%FFAF345F355F345F355F345F3B3534353435343534A87DFD07A87DA88434%2E3434342E34345F355F345F34FD045F8A66665F665F5F5F665F5F345F35%5F355F3B5F345F3B5F355F355F355F355F355F355F355F355F35343B343B%343B343B343B343B343B343B343B343B343B343B343B343B34605F5F5F60%5F5FA8FF8435343B3435343B3435345F34342E3434342E347DA87DA8A1A8%7DA8A1A8A1A82E342E342E342E3B343B34353435343B34665F8A5F665F66%5F665F8A5F5F343B343B343B3434345F343B343B343B343B343B343B343B%343B343B5F345F355F345F355F345F355F345F355F345F355F345F355F34%5F355F5984FD065F595F343B345F343B345F345F345F3434343534343483%7D8359837D8359837D83593434342E342E34345F353B345F34FD045F8A5F%5F345F345F355F3B8A665F345F355F345F3435355F355F345F355F345F35%5F345F355F345F35343B343B343B343B343B343B343B343B343B343B343B%343B343B343B345F355F5959345F3435343B3435343B34353435343B343B%34342E3434340B340B340B340B340B340B340C342E340B34343B34353435%3435345934665F5F34353434343B343534665F3B343B343B3434343B343B%343B343B343B343B343B343B343B343B5F355F355F355F355F355F355F35%5F355F355F355F355F355F355F355F3B5F3B5F355F355F345F355F345F35%5F345F355F345F3B5F34353435343534342E3434342E3434342E3434342E%34345F355F345F345F345F355F595F595F355F345F3B5F355F5F8A3B5F35%5F355F343B355F355F355F355F355F355F355F355F355F35343B343B343B%343B343B343B343B343B343B343B343B343B343B345F355F345F3B3B343B%3435343B3435343B3435343B3435343B34352E3434342E3434342E342E34%2E342E342E342E34345F343B3435343534353435345F5859345F5959345F%595F345F5F5F343B343B3434343B343B343B343B343B343B343B343B343B%343B5F355F345F355F345F355F345F355F345F3B5F355F3B5F355F3B5F3B%5F3B5F3B5F3B3B345F353B345F343B345F343B345F343B345F3B35343534%34343534342E3434342E3434342E34345F345F343B345F343B345F355F59%5F595F345F345F355F595F5F8A3B3B343B3B5F3B605F5F345F355F345F35%5F345F355F345F355F34343B343B343B343B343B343B343B34352E342E34%2E342E342E592E582E5934342E582E342E342E342E353435343B3435343B%3435343B34352E342E342E342E340C342E340C342E34343B343B34353435%3435343534593459345934353435343B343B345F5F5F343559FF8A665F8A%5F3B343B343B343B343B343B343B343B343B5F355F355F355F355F355F35%5F355F345252585258525852585258525852585258525852595258525234%5F345F355F345F355F345F3B5F355F343534353435FD04342E343435355F%3B5F345F345F345F345F345F345F345F345F345F355F355F355F5F8A5F3B%5FFFFF84345F5F8A5F5F355F355F355F355F355F355F355F35343B343B34%3B343B343B343B343B34342E8A66665F8A66665F8A66665F8A66665F8A66%665F8A66662E343435343B3435343B3435343B343B345F3435FD04342EFD%04343B343B343B3435343534353435343534353435343B3434345F343B34%3B345F5F5F34AFFF5F0C5F3434358A3B3B343B343B343B343B343B343B34%3B5F345F355F345F355F345F355F345F3459668A608A5F8A668A608A6666%5F8A608A5F8A608A5F8A66582E5F343B345F343B345F343B345F355F345F%3B5F345F355F345F3B5F345F353B345F343B345F343B345F343B345F343B%345F343B345F353B343B5F8A355FFFAE0C5F5F5F34345F8A345F355F345F%355F345F355F345F35343B343B343B343B343B343B343B34342E665F665F%665F665F5F34605F665F665F665F665F665F662E34343B3435343B343534%35343534353435343B343B343B343B343B343B3435343534353435343534%3534353435343534353435343B343B355F34FD045FFF593434665F350B5F%5F3B343B343B343B343B343B343B343B5F355F355F355F355F355F355F35%5F3459668A668A608A3B3B343B5FFF8A8A668A608A668A608A6658345F35%5F345F355F345F345F345F345F345F345F345F355F345F355F345F345F34%5F345F345F345F345F345F345F355F3459355F355F3B8A608A668A5F8BFF%840B5F8A8A35345F8A355F355F355F355F355F355F355F35343B343B343B%343B343B343B343B345852665F8A5F66353B355F5F8AFFFF84665F665F5F%5F665F8A2E34343B3435343B343534353435343534353435343534353435%3435343534353435343534353435343534353435343B3434345F343B345F%5F665F8A5F665FFFA834345F3B3434FF843B343B343B343B343B343B343B%343B5F355F345F355F345F355F345F355F2E59668A5F8A5F3B3B8A668A5F%8AFFFF5F8A665F3566668A5F58343B345F353B345F343B345F343B343B34%35343B3435343B3435343B3435345F343B345F3435345F343B345F343B34%35345F345F353B3B8A668A5F8A60668AFFA8592E3459FFFF84345F345F35%5F345F355F345F355F34343B343B343B343B343B343B343B34342E665F66%5F5F345F5F665F665FAFAE8A5F5F3B5F5F665F662E343435343534353435%343534353434345F5F5F3B5F5F5F3B5F5F5F3B5F5F5F34353435345F5F5F%34353434343B355F343B343B343B343B5F665F665F665F66A8FFFFA8A8FF%FFA8343B343B343B343B343B343B343B343B5F355F355F355F355F355F35%5F355F3459668A608A35345F8A668A608A5F665F665F8A608A668A605934%5F345F345F345F345F345F343B358A5F5F3B5F3B5F3B5F3B5F3B5F3B5F5F%5F345F34FD045F8A343B345F5F66358A5F5F355F35605258608A608A668A%5F8A8AFFFFFFAF8A595F355F355F355F355F355F355F355F35343B343B34%3B343B343B343B343B34342E8A5F665F5F2E5F5F8A5F665F5F34665F8A5F%665F8A5F5F2E583435343B3435343534353435345F3B5934353459343534%5934353459345F5F3534355F5F34355F5F3435346634353566343B343B5F%52275F60665F8A5F665F665F8A5F665F5F355F343B343B343B343B343B34%3B343B5F345F355F345F355F345F355F345F3459668A608A5F353460668A%665F345F668A5F8A668A5F665F582E3B343B345F343B345F343B343B5F5F%345F355F345F355F345F355F345F5F60345F3460595F35603B5F345F5F5F%595F5F5F355F346652525F8A668A5F8A608A5F8A60666060595F345F355F%345F355F345F355F345F35343B343B343B343B343B343B343B34342E665F%665F6635342E5F345F343B5F665F665F665F5F3B652EFD043435343B3434%34353435345F3534343534343435343434353434345F5F3534355F5F3435%5F5F3435345F343B3460353B343B3B58275F5F665F665F665F665F665F66%5F5F343B343B343B343B343B343B343B343B5F355F355F355F355F355F35%5F355F3459668A668A608A5F352E34345F5F8A66665F665F5F3B5F5F5834%5F3435345F345F345F345F345F5F5F345F34353459345F345F5F8A3B3B3B%66345F3466355F34605F3B345F5F5F355F5F8A5F665F8A52525F665F665F%8A608A5F8A668A6666355F355F355F355F355F355F355F355F35343B343B%343B343B343B343B343B345852665F8A5F665F8A5F5F3B605F665F8A3434%2E3434342E3434342EFD0434353435343B3435345F3535FD04342E34343B%345F665F345F5F35343B5F3B34355F5F343B3B5F343B345F345F3B5F5F58%275F5F5F3B5F355F3B5F35665F663B3B343B343B343B343B343B343B343B%343B5F355F345F355F345F355F345F355F2E59668A5F8A668A5F8A668A66%8A668A5F5934353435343534353435345F3434343B343B345F34355F5F34%352E582E342E5F343535663B3534605F5F5F66343B345F5F5F3B8A5F3B34%5F355F355F356652525F665F665F605F665F665F8A665F345F355F345F35%5F345F355F345F355F34343B343B343B343B343B343B343B34342E665F60%5F665F605F665F605F665F5FFD053435FD09343B34353435343B35603435%34342D342E343435345F5F5F3435345F3B5F34353434345F3B5F355F343B%343B345F345F5F52275F5F5F3B5F3B5F3B5F3B605F8A3B35343B343B343B%343B343B343B343B343B5F355F355F355F355F355F355F355F345252522E%5252522E5252522D5252522D59343534593435345F34353435345F5F665F%605F665F665F5F353534353435345F3B3B5F8B5F3B345F3559345F345F35%5F595F345F3B5F355F355F355F356652525F665F665F5F5F665F665F8A66%60345F355F355F355F355F355F355F355F35343B343B343B343B343B343B%343B345F34595859345958592E4C274B2752274C2E3534343435FD06342E%34343B345F353B34353459343B34342E342E34343B345F5F5F3435345934%59343B343B345F355F343B343B343B343B343B5F582E665F5F3B603B5F3B%5F5F665F8A3B3B343B343B343B343B343B343B343B343B5F345F355F345F%355F345F355F345F355F595F5F5F595F5F58275227522752273434353435%34353435343534352E595F5F355F595F355F343534352E342E582E593459%595F34353435345F355F345F355F345F353B345F355F345F355F345F5F66%5F665F665F665F665F8A60665F60355F345F355F345F355F345F355F345F%35343B343B343B343B343B343B343B343B345F345F345F345F2E4B275227%5227522E34343534592E342E2E2D2E2D2E345F343B345F343B343B343BFD%04342E34343B345F665F343B343B343B343B343B343B343B343B343B343B%343B343B34FD045F665F5F5F665F5F5F8A608A5F3B343B343B343B343B34%3B343B343B343B5F355F355F355F355F355F355F355F355F355F355F355F%34522752275227522734345F345F595934342D522E522E5F3B5F355F355F%355F355F355F34343459345F345F5F8A3B5F3B5F355F355F355F355F355F%355F355F355F355F355F355F3B8A5F665F665F665F665F8AFFFFFF84355F%355F355F355F355F355F355F355F35343B343B343B343B343B343B343B34%3B343B343B343B34522D522D522E522D52FD0B34353434345F343B343B34%3B343B343B34342E2E2D3434342E595F5F343B343B343B343B343B343B34%3B343B343B343B343B343B345F5F665F665F5F5F665F5F5FFFFF83343B34%3B343B343B343B343B343B343B343B5F355F345F355F345F355F345F355F%345F355F345F355F345F3B5F345F3B5F345F355F345F355F345F355F345F%355F345F355F345F355F345F3B3534353434345F3B3B5F8A5F3B345F355F%345F355F345F355F345F355F345F355F345F353B358A668A5F665F665F66%5F8AAF84595F345F355F345F355F345F355F345F355F34343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B34342E342E34343B34%5F5F5F343B343B343B343B343B343B343B343B343B343B343B343B343B59%5F5F5F355F5F5F355F5F5F345F343B343B343B343B343B343B343B343B34%3B5F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F3B5F%345F355F345F355F355F3B5F355F355F355F355F355F355F355F355F355F%355F355F355F355F595F595F595F595F595F595F5F5F355F355F355F355F%355F355F355F355F35343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B345F343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B355F595F595F595F595F595F343B34%3B343B343B343B343B343B343B343B343B5F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F595F595F595F%595F595F595F345F355F345F355F345F355F345F355F345F35343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B345F343B345F343B343B343B343B343B343B343B343B343B343B34%3B343B5F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F35343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B5F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F34343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B5F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F35343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B5F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F355F%345F355F345F355F345F355F345F355F345F355F345F355F345F355F345F%355F345F355F345F355F345F355F345F355F345F355F345F355F345F3534%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B343B343B343B343B343B343B343B343B343B343B343B34%3B343B343B343B5F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F355F355F355F355F355F355F355F355F%355F355F355F355F355F355F355F353435343B3435343B3435343B343534%3B3435343B3435343B3435343B3435343B3435343B3435343B3435343B34%35343B3435343B3435343B3435343B3435343B3435343B3435343B343534%3B3435343B3435343B3435343B3435343B3435343B3435343B3435343B34%35343B3435343B3435343B3435343B3435343B3435343B8A8484838A8484%838A8484838A8484838A8484838A8484838A8484838A8484838A8484838A%8484838A8484838A8484838A8484838A8484838A8484838A8484838A8484%838A8484838A8484838A8484838A8484838A8484838A8484838A8484838A%8484838A8484838A8484838A8484838A8484838A8484838A8484838A8484%83FD7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="пїњ" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">stock format</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-05-17T12:10:20+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-05-17T12:10:20+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-05-17T12:10:20+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AMsg8C7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVW1tLq7mENrC88zfZjjUux+gVxZQgZG&#xA;gLKexfl55ykTmumsB4NJEh/4FnBw05g7Nzn+H7ks1PQdZ0wj6/Zy24JoHdTwJ8A4+E/fi4+XT5Mf&#xA;1AhAYGl2KuxV2KuxV2KuxV2KuxV2KuxVcYpBxqjDn9jY718MU0XoGgflJc3Nulxq9wbUuKi2jAMg&#xA;B/nY7Kfahw07rT9jGQuZryReqfk9GIC2l3zGZRtFcAUb/ZKBT7sNNmXsQV6Jb+bz5rOOzu5rTVI5&#xA;opoTwZE41Vh1rXYj5ZF0U4GJMTsQul01Ghaeyl+sRpvIlOMiDxK+HuMWKBxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVfFDNM4jhRpJD0RAWJ+gYpESdgnGjeUNa1LU4bI20tsJN5JpY2VUQfabcCvsPHDTlYNF&#xA;kyTEaI+D2rQvL2l6JaLbWMQXYepMd5JCO7N/mMk9Zp9NDFGohHG4gBoXFfni3tywwXELRSos0Mgo&#xA;6MAysD2IOxxRKIIo8nk/nf8ALuezu47nRLeSe1uW4m2jBdonO+3U8D79MiQ83r+zDGV4xYPTu/Yl&#xA;cf5aecXQP9SVa78WliB/4ljTjDsrOf4ftCS6roWr6TII9RtZLct9lmFVb/VcVU/QcDi5tPPGakKQ&#xA;OLS7FXYq7FXYq7FXYq9Y/LPyjYx6ZFrN3Es13cEtb8xURoCQCAduTUrXwyQD0nZWiiIDJIXI8vJn&#xA;skUUgAkRXCkMoYA0ZTUEV7jC7kgHmuxS7FUHdaNo927vdWNvPJIAHeSJGYgbCpIrti1TwQluYg/B&#xA;5h588qR+XbyDVdKBS0mcq8BNQj0rQV3KsK7dsiQ872loBjPFD6T0YdqsEcV2TEKQyqssQ8FcVpgd&#xA;QhMVdiqpDbXE1fRieSnXgpan3YqpSMsVfUISmx5bb/TioDk9WWMyQwSzRjq8cbMu3+VSmLLhKHN4&#xA;O0bfTxH8cU8CqGufR9c2s3o/79C1T/gq0xRw+awXkP7VV+YP6+mK8BVUdHFUYMPEGuLEhOvKnl2f&#xA;X9XjskJSED1LmUfsxjrT3NaDCHK0emOafD06vcdI0PS9Ithb6fbrClByYD43I7u3VjknrsOnhiFR&#xA;FI7FuQ167gJEhoZDSuKrlsoAtCvI9ycVWB3iuEhG0R+yOv8AnviqKxV2KofUNPs9QtJLS8iE1vKK&#xA;OjfrHgR2OLDJjjOPDIWC8H816BJoWtTWBJaIUkt5D1aJvsn5jcH3GRLxus05w5DHp09yUYHGdirs&#xA;VdirsVTnyjbabPrcX6SQyWsYLvCDTmQQAPfrWnti3acwEwZi4vZrfzB5bt4UgglWGGMUSJInVVHg&#xA;AFpkrenj2lpoihKh7j+pU/xRoX/LT/wkn/NONp/lTT/zvsP6nf4o0L/lp/4ST/mnG1/lTT/zvsP6&#xA;nf4o0L/lp/4ST/mnG1/lTT/zvsP6mj5p0MAkXFT4BHr+K42p7V0/877D+p55+Y3mM6gtvBCCqB6x&#xA;RmhYjcFj4VNKfTgJdHrtacpBG0RyYxqd/c2s6W0LKBDGitVEb4qb7sDgddLmhP0xf/zp/wAio/8A&#xA;mnFDWqzwG0tbxlWOWX1EkCCgYoRQhR3PLfFIFrby5vk0zT0tGeFZVeSTh9otzIFSPYYs4w+KlrqK&#xA;01pPJT15rWN5Wp8Rbda/hioJV9RvLy3ntltmdI4IYjGqkhalAxJA61J3xUQJUtXjiXzBLEEARpVq&#xA;P9ahP68UDkjJdRu4vMDK7kWay+iyGvpiKvGnH7NKYp4DVpbd6VeRXUsYtZeKsQpRWYEV2INN8UWh&#xA;zpN4TyW3lDePBlb76Yp4np/5Nq1sL6O6VlubhlEZkXi3GIVpvTrzP3YQ7nsfJESMesv0PT8k9C7F&#xA;VC6gkkKMhAZDWpxV312AVBJBG3TFVOLlcXAlpSNPs174qi8VdirsVYN+Y/k7VNbe2u9OWN5LeN0k&#xA;iZuLsCQV41HHx6kYCHUdp6KeWpQ6PI5YpIpGilUpIhKujChBGxBByLzJBBorcUOxV2KuxVWtHdLh&#xA;HjYo67qw2OLZiFlOP05qn+/h/wABH/zThcrw49yZ+WdRu73XrK1uXEkE0gWROCCooe4AONN2mwwl&#xA;kAI2d5m1G7stevbW2cRwQyFY04IaCg7kE40upwwjkIA2U7vU72PTrWZHAkk+23BN/wAMDiRiDIhC&#xA;Q6rq87FFmUUFSWWNRT5kYW3gj3Iea4gtH9VpBd3x3Q1LIp6BiT9o+GLVnO1JXNNKZDVqt+0TvU98&#xA;WuciNghp754/hU8pD0G1APE4FjKRRMN3ZyWEcOpI7cXZ4pouIcE0DCh2oaYsp70Qp6nfLMsEdupi&#xA;tok4xoTVjv1YjucVqgFZ73TJ4LZb+OUzQRhVeErR0qSFbl0+YxRMfahdTvXubwzAemtFEcYOyqFA&#xA;AxSbCPm1HSZLxbu4gla8TjyRWX0nZQKMa/EPliiUKNJbPcySX0ksjbu5LeG53xZ3Uq6LxearEPTj&#xA;uJ1jXZVR3Cge1DixljN8nfpHWf8Alpuf+Df+uKPDPcn3lLW7yC8IubiTkxUwySMx4utaU5HYGuLZ&#xA;CEh6htIPV9P8427IEvkMcg6yIKqfo6jJW7nT9sxIrIKPemH+KNC/5af+Ek/5pxty/wCVNP8AzvsP&#xA;6nf4o0L/AJaf+Ek/5pxtf5U0/wDO+w/qWHzH5eY1M6k+Jjf/AJpxtf5U0/8AO+w/qXDzPoQ2Fz/y&#xA;Tk/5pxtf5U0/877D+pv/ABRoX/LT/wAJJ/zTja/ypp/532H9Tv8AFGhf8tP/AAkn/NONr/Kmn/nf&#xA;Yf1O/wAUaF/y0/8ACSf8042v8qaf+d9h/Upz+bNGjjLRytM46IqMCfpYAY2xn2tgAsG/gf0vHPOl&#xA;yl1r01wAFklCtMo6Bj0/4TjkXmdRlOSZkeZSPFpdirsVdirgSDUbEYpBpU+sS+I+7Fs8aSeeSJ5G&#xA;82aYD0Mw/UcIcvQ5Sc0R5u87zyL5s1MDoJj+oYlddlIzSHms1OVxolgw6nr92BwxMg2lCzSsacgP&#xA;c7YWQySK0sqnlXnJ49hgRYG/Moa4n9Ndt5G+yP4nFgBaGRAo5t8RO9T1JxZEqglUrxkBIrUEdRiz&#xA;BFUVsjhiKCiqKAYrKVrhJGVUOpJXYEHtiniBG6yRy7FungMWMjZtU9WMkOykuPfYkYs+McyN1JiW&#xA;JJ6nc4tZNth3AoGIHzxTxF3qSfzH78V4j3q9u7KSGJ38d6YsoZCnln5hv7dBGxWZBQD1KlgK9AwP&#xA;664spQB5/j9qM/xXLTa3X/gj/TFj4UVeDzIZYy3ohSDRviNB+G9cU+DHzVf04+/7kAjsW6e7bbfL&#xA;FfBi79Ot/vmu2w5UJ9+mw+eK+DF36dbb9yDXuCdz4KKb4r4MXfp1qEmICh3PLYe3Tc/LFfBj5qTe&#xA;Y2r8MAp7t/ZhpPgRWSeYrgrSOJUb+Ykt+G2NJGCLH7t2e4d2PJ2NWJ8TgaMo9Sji1uxV2KuxV2Ku&#xA;xVPfI3/KW6X/AMZh+o4Q5nZ/9/H3u88/8pbqn/GY/qGJXtD+/l71upKW8v2DruqmhP0EfwwOIUkx&#xA;Q0SACTsBuTiqCUmVzK2wPQeC9hi2ctl5jlZTJwb0x+1Q8R9OKqeKXYq2qsxoBU4oVltv5j9AxYmS&#xA;4xQL9qg+Zpitlwigb7ND8jXFbK1rb+U/QcV4mgnA0/a8e/0f1xTbv1feK/xOKqizMood6ePb5nFm&#xA;JkLhcU/Z+QP6zinxF8d4YZRIqkinanIj2r+vFIypmLlSoIA4/skGq1/yf5298UeN5ONxsar0Px1N&#xA;QP8AXPc/5IxR43k1JeKgJZTU/s1oxHv/ACj2xXxvJDPfM53XYdADsPwwshn8lv1v/J/H+zFfzHk4&#xA;3RpstD88UHP5KBJJqepwNBNuxV2KuxV2KuxV2Kp75G/5S3S/+Mw/UcIczs/+/j73eef+Ut1T/jMf&#xA;1DEr2h/fy96np2pwQ2n1W8T1LSTrTcqcDROPpBX/AKP8uN8S3zKp6A02+9cWpSn0zy0y+m+oleW9&#xA;KjcD/Y4pjfN0OkeWfVjQX5clh8BIHLwB2xTZTfzKgTQ5EjjDBXgCRU+E/vkotPDFYc2Jaws4lj9a&#xA;ySyPE0VAVDb9epxZBAohdqD6TipKtNNDax1bqeg7nFiAZJXPqFxKdjwX+Vf64t8cYCGJJNTucWbg&#xA;SDUbHFUTBqNxEQCea/yt/XFhLGCmkE8NzHVev7SnqMWgxMWmUqad/b/PYYq14fhT+A/jil36vvFf&#xA;4nFWxuCD89/4/wBMUIywkLIY9yydOzcD0/1FHTFZKkk4WgShYdCPsr/qj+JxYockk1O5PfFVKSbh&#xA;NFHSvqct/DiK4pA2t0M3q+ptTg5T5074qRSrih2KuxV2KuxV2KuxV2Kp75G/5S3S/wDjMP1HCHM7&#xA;P/v4+93nn/lLdU/4zH9QxK9of38vek8Ui8TG/wBk9D4YtEJiqPJv0Yu0gp9H9cU+HHvQj28T3LH1&#xA;l2oo6dtz398WwYwBza9CIvX1QanoKf1wJGId6aXGp3s1kbWWQyRfCaH7XwEMvxDfqMLYcURvST3E&#xA;juwLhgaU+Ikn8cDjy91KlVggLt2FT/TFq5lJJ5nmkLudz0HgPDFyYig6CGWeaOCFDJNKwSNF3LMx&#xA;oAPmcWQBJoMyl8r+UtEhQeYb6WS9b7cNuQqKe4HwyO9P5qAZKna/ksWMfvZb+To/K/lLW4XHl++l&#xA;jvF+xDcEMjHsD8MbpX+ahGNL+SxZB+6lv5sMmhlgmkhmUpLExSRG2KspoQfkci6ogg0W4JnhkDod&#xA;x1HiPDFjIWE8VlnhV16EVFcXFqip/wCZ8fp8Biyd/mP7PDFWUAwfVL511KKxNiY47exK/FKGoCwp&#xA;uetdgfeg3xboYBKEpGQBHTvQsl4yetx1RW9MoF+EfFypXpXp7VxcfhWXk6y208ZmW6MDxmOcAA0c&#xA;NyWo+WK0luKEHd6rq1rJwhnZIP2AAKDx7eOLfjAIXWeoand8vrMzSQjoCBTl47DFjkACKxanYq7F&#xA;XYq7FXYq7FXYq9U/KrStKi0ttVn9M30sjJG7kVRFoPhr0qa1OSD0PZGPHGHGa4rd+aulaTLpa6pA&#xA;IxfRSKsjx0q6NUfFTrQ0ocSva+PHKHGK4reV5F552KoGI1Lv4lj95OLaWsVVhdy8abH374tnjGmk&#xA;VndS5J8Ad8WqUiVDV5SFSId/iP0dMWWIdUrxbk/8h0/xZp5IrxZ2FfFYmIP0EYQ5eh/vopZ5sleT&#xA;zDeFzXiwUewVQBiWWsJOWTvKcrx+YbMoacmKn3DKQcQujJGWKO8+ScfOOo7UDNGzU8WiQk/STiV1&#xA;w/eySUEEVGBwk00iUlXiPb4h9PXFpyjqiXFGPhX6P7Ti1hazAdevh/XFKZG/hmCtNHDI4AHNx8W3&#xA;jQjFyuGB3ta9zZKAfQt6bV6+O/7WKjHDvVbiaP0BDEqRoW5FYx1PieuLTk4QNkJi0LNR4nSZadRx&#xA;r/wYwuVirhVY+P1G2Hf00/4jijNVBbgcZ2KuxV2KuxV2KuxV2Kqsa3RMDRTMiRuWZQxApTsBhcnD&#xA;Ha3SLdAztLMzpI4ZVLEilO4OK5o7WpYHGdiqXwf3R/1f4jFtlzXAEmg3OKF6qBv1Pj1H0eOKFWL7&#xA;f6/7Tigpdq/+9C/6g/WcW3FyQOLa9I/Ji2t5b3U3liR3jjiCMygleRatCelaZIO27KiCZH3PQ9ak&#xA;8s6Pp82p6pFbwWkABllaIMfiIUABVLEkmm2F3RhE9GON5g0LVLRLjRIITay143QiVXNDQgAgFd/p&#xA;xUQiOjAPzHVeWnyUHqN6oZ+5C8KAn2qcBdT2oBcfj+hh8cnE0P2cDqCE10g/6Q1OnA/rGBoy8kdO&#xA;xD0HWnXFqiFHFk7FWp/7of6v8TiseaYYtTsVQ2ok/UpP9j/xIYs8fNUtj/o0X+ov6hiiXNVxYuxV&#xA;2KuxV2KuxV2KuxVekhVWFTuNvni2QnQLnkLKoqdhv88VnOwFmLWm9j5ea6tUnNwsfOpCkVNAaeIx&#xA;VcnkqNVI+vg1r/useNf58WZk3r3kTUtE08309xbywCRYuMTSc6uvME8kUUp4HDTnans/JijxSI+H&#xA;9jHP1/cafwGBwV0Zow8Og8Po/rigoTWIz+7k7bqf1jFsxHolmLc9D/KO/gsX1aWWu6QhFHUmr7ZI&#xA;O47J5y+Cceb2uPMWlXdhIVRJkIhQ7orjdGPiQe+F3SD0HS10vR7SwHEmCMK7IKBn6s30scVY1+Y/&#xA;TTv+e/8AzLwF1Hav8Px/QwrA6hOdAjaksh+zsq/rOBx856IuY1kb7vuxaxyTSx0e2kvrOJ7qKZLk&#xA;sHSFjzWkTP3HitMVvZEax5VntmV7EPcRNsVpV1P0dRigSS2XRNWYKotJf2QfhPjvikFXntLqCnrR&#xA;PGD0LKQMWtSxVDaj/vFJ9H/Ehizx/UqW3+80X+ov6sWMuZVcUOxV2KuxV2KuxV2KuxV2KuxV2Kpv&#xA;Z300MCxN1UfZI6DxY9hi3RlGt1k2uzRy8dqEAqePUewr0+eLO4KOq+ZtV1G2NtczF4S4crxQDkoo&#xA;OgBJphtuz62eSPCTslHj+Nf4+OBw3fr7+P0+GKr5Y1uICh/aGx9/HFANFIpI2jco4oy7EYuUDaP0&#xA;nXr7SVm+qpG5m48xIGP2K0pxZf5sNuVptVLFdVui/wDlYOtf75tv+Bk/5rw25f8AKeTuj9v63f8A&#xA;Kwta/wB823/Ayf8ANeNr/KeTuj9v60s1vzDe6x6P1lI09Dlw9MMPt0rXkzfy4HG1Gpllq62S6KJ5&#xA;ZFjQVZjQDFxiaZLDElparGvVR18WOBwieIqGLNPNNu7FL+xmFsluICxllR2ckGJk+yf8psWfhEhH&#xA;a35juWaOPTiyLX45aCpPhQ12xYnCRzStdf11rhVFw/Hcn4V6D6PE4seA1yTbTtbmmlFnqAE0Mx4V&#xA;YAEE7DpTFrIpLNUsxZ30sA3RTVCf5SKjFUs1H/eKT6P+JDFnj+pUtv8AeaL/AFF/VixlzKrih2Ku&#xA;xV2KuxV2KuxVbI6ojO32VBY/Ib4piLNIGHVLueJJodH1KWKQBkkS2ZlYHoQQaEYadhLs4g0Z47/r&#xA;fsX/AF7Uf+rHqn/SK39caY/kP9sx/wCm/YrR6leJSmh6ry7v9Uao/wBXf8caX8h/tmP/AE37F36W&#xA;vaD/AHBar16fVGIHud/iPzxpfyH+2Y/9N+xQur2/lIZdD1XkNjytWqw8WNe3hjTIaH/bMf8AplE3&#xA;Opk1/QmqVpv/AKK+/wCO2NL+R/2zH/pl1leR3cIlRXjoxQo44srKaEUqaYHHz4Dilwn7Ff8Az8RX&#xA;+JxaVyNxPt+1/acUELbqzjuVB+y4+y38DimMyEpntZ4T8a7dmG4+/FvjIFCyxV+Ide4wtgKhiyV7&#xA;ayubg0jQkd3Oyj6cWMpgc09srCGzQsTykI+Jz+oYHFnMydLIXb2HQYqBSzFKJt5IFPdTTcnfC345&#xA;RC+S6oKx79q+5xWebuatLiZuUhpQniu3Ydfxxa55pckwsZ+V3ArgGsi0PvUYGIy2KKN1+Ca41tYI&#xA;UMk0oRI0HUs2wAxaoxMjQ5lM9f8AJmiaDp1udd1FfrVxUvaxncAUIKgAuwBG5phIdjqdAcMYm7ke&#xA;iWRaRpF9al9GufUMQAMTHegG3UKwr74HXSBHNJ2VlYqwoymhB6gjFDWKuxV2KuxV2KuxVSuv95Zv&#xA;9Rv1HFsw/WPeGY+Tv+UV0r/mFi/4iMS263++n/WKZ3V3BawmaduKD7yfADFxUstfMQuryO3gtnYS&#xA;uEDV33PgAf14pAvZkmo6XeafIqXKU5CqODVT8ji5Go0s8JqQQmLjOxV5HpP93df8xM9f+DPU4S7P&#xA;tH+8H9UI79fbsae3gMDgLWcDp1HTwHyxWlqyOpqD164pIV1uEIowp+IxY8K0wWT7lE/AYrcmhbae&#xA;p5CNK+NAcU8Ul7XCAUQV8OwxRwqDyM5qT9GLIBbil2KtgEmg64oc9WZYo+p2B/W2KjvRscYAWNdg&#xA;KKMWslP7byxfxXEUjSRFUdWIBatAa/y4qyzyvpJk86QX0hQxxxt6amvLmEIrSlO/jhDseygDnF+b&#xA;DL+O81f8xdcF3JwmgedIGdQ4RI5BFHxVttkNR9+JXXzJySvvQptp9P8AOtnFA3N5kT1yihAwIIcl&#xA;V2/Z5fPA4o3iv19EXVpwnQlSR7lQTi0JfirsVdirsVdirsVUrr/eWb/Ub9RxbMP1x94Zj5O/5RXS&#xA;v+YWL/iIxLbrf76f9Ypf5guvV8xWGmSKfRkVWJrTdmIPbwXFpEbFsniRIVVYgEVPshdqUxYWm135&#xA;mtbnS1027Ie/BBjcsobY7GnUnjUYbdll14yYOCYuQ6sbvrWe+AVaRxITQSAnmaUrxBFKdRgdYjY1&#xA;9KFVZuXBQC570FKnFXk+kEGK47f6VPQnp9s4S7LtH+8H9UIl2O46ePifngcILcUrkR5HVEHJ3IVV&#xA;HUk7AYqmT6Vp0DGK61FUnXZ0jiaQKfDlVcWNrfqOif8AVzb/AKR2/wCasVsu+o6J/wBXNv8ApHb/&#xA;AJqxWyuTTNMmcRW+pBpm2RZImjUnsOVTTFbS6aGSGV4pF4yRkqynsRilMF0iBIomvLxLaSYBo4ir&#xA;OeJ6FqfZrii0HeWc1pctby0LilCpqGB3BB8Dim0VBpsQtVubq5S1hkJWNiGdnINDxVd6V74odLpc&#xA;lk4LssolHKOVN1Ke38cUSlbTMIbae8beK0T1ZadeIIGw+nFlixHJIRHMs40jVrLVtPiv7Jy9vMDx&#xA;qKEEGhBHiDiubDLHIxlzCY2d1LaXMdxF9uM1Feh8R9OK4cpxzEhzCK17yp5W81zjUUvX0jVmUJPI&#xA;pA5gdmUleVKbEH54XfSlp9T6r4J/j5qWnaR5U8jRyal9afV9YZTFDIxB41B+FacggPckk4WeM4NP&#xA;uDxTedapdS3eoT3UtPUmcu9NgC29APDIvP5zcye9C4tTsVdirsVdirsVUrr/AHlm/wBRv1HFsw/X&#xA;H3hmPk7/AJRXSv8AmFi/4iMS263++n/WKH816Dc3yw3tiaX1rugBoWANRQ+KncYtOOVbFLY/OusR&#xA;KtvcaWzXQ2ZviWvvw4/xxZeGO9N9I067kvG1K+FJTX00IoRUUrTttsBi1IqTzFoaA1vYiRtxDAmu&#xA;KeE9yX3HmLTpjQ3cQTsvIYGJhLuYBp4RIJmLhZDPKeDGnJS5IOSdnrZCUxW44QjI54pRSu/j3Hzw&#xA;OEYkLipHy7EdMUIzRRXV7P8A4yr+vFSo6jd+lczHYL6jAUAPc+OLaJHkEJ+lB7/8CuKbkj4Ybuaa&#xA;OJCvKRgi1ApVjQdsWvxirXdpd6fexwXXAluL/DQgqTTrQeGKRkJa8wCms3f+v/AYsAr687DUKKBQ&#xA;RRciR/kDriyjOgs1+QK9lxG72kNAOp2OwxY1arcoUs9OZ1HqCE0rvSsjdMV465IsRC+063jiZEng&#xA;Z6xsQvJXINVJ8MWMu9Bavp9xbeW9ZeXhRrUgcXVv2l8DhDlaD++j70T+Wc3peU7Yk/DzlLV/4yHA&#xA;ebZ2t/jB+H3Mt+u2lATMg5CoqwGx+Zxdc2t3aMwVZo2Y7ABgSfxxVL/MrhLBCf8Afop/wLYtuKQi&#xA;bYizFmJPU4sCbNtYodirsVdirsVdiqncKzW8qqKsyMAPcjFsxGpj3hGaD54g0/RbKxm0jU2ltoUi&#xA;dktwVJUUNKuDT6MNOz1GhM8kpCcKJ70f/wArHsv+rPqv/SMv/VTGmn+TZfz8f+m/YhG/N/y2jFHt&#xA;L5WUkMpjiBBHUEerjTaOxsp6x+Z/Usf84fLvH93a3nLtySKn4SY0n+Rc3fH7f1MbjaJwHPD4pa/G&#xA;aGhFd6dsDhSBBcgiqlfT/brUn6K/wxQbWs0Kx1Pp19LxNeX/ADViu6vpNut7qDxCWOBVi5Kxai1B&#xA;UdT1O/TFZ7RThdGnStby1p4iTYj3FMWmwUTptrZ211HdzXkDiFuSxwOZGZh0FKbYpAJNJDqzc1kc&#xA;EcnckexNTi24/q3Sj07j/fo/4H+3C5PHD+b9rK9OhuzqFsBcUPqpQ8B/MPfA4PFHu+1Gea4pU1KP&#xA;15hK3oqQePHbk21BiiJWzanZyuk9xYrcTAD9/wCoUVqCg5qK1IxbTiJO3JL76e6vruSY/tHdzsOl&#xA;PhXrixnwgppDcW7W0CXNqLpoVEaShuDhRvxNAdvDFEok7hS1C6a4mUlQgRQiRr0UDoBixmK2Q6vR&#xA;eLDkvXFRLai1flT5d1qi0/0U96/trhcvQkeNGh1RfkBGXyZBzHEH1mHJSRQu29O4wHmntU3qD8Pu&#xA;TiSQL6Z5Q/3a/agZvu8B7YHXK1o8Znjo8B+IbLbMrfQ3bClvzX/xzo/+My/8RbFLFMVdirsVdirs&#xA;VdirsVcDQ1xUK/1v/J/H+zC5H5jyUbvV7azgM9yfTiBALbnc+wBOLbilLJLhiLLy++lSW9uJUNUk&#xA;ldlPszEjrknrcQIgAedKGLYzuyaAQQh7j0j6q8l9PnxQrQyVrvT+XIPGTG5ddXFvDb2729yJrhjL&#xA;6sPplfS+Ki/Edm5jfbphZnGKG6UzX96G4rCZF48OQKDbw3OLdjwwIsyr4FM/L08sl27yx8W9Mjia&#xA;HYFf5cWjUCMeR4gyH1B/Iv4/1wOLx+QU3WJiT6aqx/bXZvvxSMpHJLNUtljtGbmxjr8dT0HjUb4t&#xA;mCRMtuaRV07/AH7/AMlG/rhdjWbu/wBiP1MnsG0b69b8rmi+qnI+u425DvyxcAjL/N/2I/Ummv29&#xA;hJeo1pMzxemtSHL1ap/abkelO+BoMiOaBjgij3Vd/E7n7zixMiqYodU4q7FXYqq2zKJAGHIMQCPp&#xA;xbMc+Eszkh9KgA+DotP1YGkrMUI3RrOW91CK0jcIZeXxNuPhUt2+WIcjTYDlyCANWhfzBsIdOt4b&#xA;RrpJbppA7QoDVU4sKt4VrtkqcjV6LwecgSwfA4TsVdirsVdirsVdirsVdirRVWFGAI8DioNLfRi/&#xA;kX7hiy4z3u9GL+RfuGK8Z73CKMdEUfIDFBkSu4r4DFbLuK+AxWy4ADoMUW3irsVQ19bvcQhEIBDA&#xA;79Oh8MWcJUUD+iLn+ZPvP9MW3xQnlpKsN3DMwJWORXYDrRSDti46K1vUIb67WaFWVQgQ8gAagk9i&#xA;fHFUBirsVdirsVdiraGjqfAg4qGSt5hlYUMKkH3ONOT+XHeo/pmT/fY+840j8uO9EWHme7sbpbqC&#xA;NPWQOELVIBZStae3LCA3aePhTExzCR6jdy3MzyzyGWeRuckjGpJPji1ajJfPmg8DjOxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVV+sye2Ft8eTvrMntivj&#xA;ycbmSnbFfGkpYGp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV7R/yC3/ALVn/JPJbPV/4H/Q+x3/ACC3/tWf8k8dl/wP&#xA;+h9jv+QW/wDas/5J47L/AIH/AEPsd/yC3/tWf8k8dl/wP+h9jv8AkFv/AGrP+SeOy/4H/Q+x3/IL&#xA;f+1Z/wAk8dl/wP8AofY7/kFv/as/5J47L/gf9D7Hf8gt/wC1Z/yTx2X/AAP+h9jv+QW/9qz/AJJ4&#xA;7L/gf9D7Hf8AILf+1Z/yTx2X/A/6H2O/5Bb/ANqz/knjsv8Agf8AQ+x3/ILf+1Z/yTx2X/A/6H2O&#xA;/wCQW/8Aas/5J47L/gf9D7Hf8gt/7Vn/ACTx2X/A/wCh9jv+QW/9qz/knjsv+B/0Psd/yC3/ALVn&#xA;/JPHZf8AA/6H2O/5Bb/2rP8Aknjsv+B/0Psd/wAgt/7Vn/JPHZf8D/ofY7/kFv8A2rP+SeOy/wCB&#xA;/wBD7Hf8gt/7Vn/JPHZf8D/ofY7/AJBb/wBqz/knjsv+B/0Psd/yC3/tWf8AJPHZf8D/AKH2O/5B&#xA;b/2rP+SeOy/4H/Q+x3/ILf8AtWf8k8dl/wAD/ofY7/kFv/as/wCSeOy/4H/Q+x3/ACC3/tWf8k8d&#xA;l/wP+h9jv+QW/wDas/5J47L/AIH/AEPsd/yC3/tWf8k8dl/wP+h9jv8AkFv/AGrP+SeOy/4H/Q+x&#xA;3/ILf+1Z/wAk8dl/wP8AofY7/kFv/as/5J47L/gf9D7Hf8gt/wC1Z/yTx2X/AAP+h9j/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:88c7883e-c38c-46d9-9593-b0d4c56786a2</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:88c7883e-c38c-46d9-9593-b0d4c56786a2</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:74b4e0d9-32b2-4349-a0ca-dd19a0982119</stRef:instanceID>
            <stRef:documentID>xmp.did:9675b4ba-d351-4a8e-8244-f41dd10118a1</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b7daa929-212c-4ee5-819b-7fd8f5f27642</stEvt:instanceID>
                  <stEvt:when>2013-11-11T23:24:45+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:88c7883e-c38c-46d9-9593-b0d4c56786a2</stEvt:instanceID>
                  <stEvt:when>2014-05-17T12:10:20+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1787.817000</stDim:w>
            <stDim:h>1403.884500</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>#E24E4B</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>75</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>#EFC154</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>193</xmpG:green>
                           <xmpG:blue>84</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=118 G=232 B=185</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>232</xmpG:green>
                           <xmpG:blue>184</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=55 G=145 B=108</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>54</xmpG:red>
                           <xmpG:green>144</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>#44B486</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>68</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=184 G=184 B=184</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>184</xmpG:red>
                           <xmpG:green>184</xmpG:green>
                           <xmpG:blue>184</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=235 G=235 B=235</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>235</xmpG:red>
                           <xmpG:green>235</xmpG:green>
                           <xmpG:blue>235</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1403.88 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1403.88 li
1787.82 1403.88 li
1787.82 0 li
cp
clp
1787.82 1403.88 mo
0 1403.88 li
0 0 li
1787.82 0 li
1787.82 1403.88 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.266667 .705882 .52549 rgb
f
1337.89 701.942 mo
1337.89 456.739 1139.11 257.963 893.908 257.963 cv
648.705 257.963 449.928 456.739 449.928 701.942 cv
449.928 947.146 648.705 1145.92 893.908 1145.92 cv
1139.11 1145.92 1337.89 947.146 1337.89 701.942 cv
.247059 .65098 .486275 rgb
f
1204.31 1012.35 mo
1164 1052.66 1117.05 1084.32 1064.78 1106.43 cv
1010.66 1129.32 953.173 1140.92 893.908 1140.92 cv
834.644 1140.92 777.155 1129.32 723.039 1106.43 cv
670.766 1084.32 623.819 1052.66 583.503 1012.35 cv
543.186 972.031 511.533 925.084 489.424 872.812 cv
466.535 818.695 454.929 761.206 454.929 701.942 cv
454.929 642.678 466.535 585.19 489.424 531.073 cv
511.533 478.8 543.186 431.854 583.503 391.537 cv
623.819 351.22 670.766 319.567 723.039 297.458 cv
777.155 274.568 834.644 262.962 893.908 262.962 cv
953.173 262.962 1010.66 274.568 1064.78 297.458 cv
1117.05 319.567 1164 351.22 1204.31 391.537 cv
1244.63 431.854 1276.28 478.8 1298.39 531.073 cv
1321.28 585.19 1332.89 642.678 1332.89 701.942 cv
1332.89 761.206 1321.28 818.695 1298.39 872.812 cv
1276.28 925.084 1244.63 972.031 1204.31 1012.35 cv
893.908 257.962 mo
648.705 257.962 449.929 456.739 449.929 701.942 cv
449.929 947.145 648.705 1145.92 893.908 1145.92 cv
1139.11 1145.92 1337.89 947.145 1337.89 701.942 cv
1337.89 456.739 1139.11 257.962 893.908 257.962 cv
.215686 .568627 .423529 rgb
f
893.908 296.203 mo
839.133 296.203 785.997 306.931 735.978 328.088 cv
687.662 348.522 644.271 377.778 607.008 415.042 cv
569.744 452.305 540.488 495.696 520.053 544.011 cv
498.897 594.031 488.169 647.167 488.169 701.942 cv
488.169 756.718 498.897 809.853 520.053 859.873 cv
540.488 908.188 569.744 951.58 607.008 988.843 cv
644.271 1026.11 687.662 1055.36 735.978 1075.8 cv
785.997 1096.95 839.133 1107.68 893.908 1107.68 cv
948.684 1107.68 1001.82 1096.95 1051.84 1075.8 cv
1100.15 1055.36 1143.55 1026.11 1180.81 988.843 cv
1218.07 951.58 1247.33 908.188 1267.76 859.873 cv
1288.92 809.853 1299.65 756.718 1299.65 701.942 cv
1299.65 647.167 1288.92 594.031 1267.76 544.011 cv
1247.33 495.696 1218.07 452.305 1180.81 415.042 cv
1143.55 377.778 1100.15 348.522 1051.84 328.088 cv
1001.82 306.931 948.684 296.203 893.908 296.203 cv
893.908 1112.68 mo
838.46 1112.68 784.669 1101.82 734.03 1080.4 cv
685.118 1059.71 641.192 1030.1 603.472 992.379 cv
565.751 954.658 536.136 910.732 515.448 861.821 cv
494.029 811.182 483.169 757.391 483.169 701.942 cv
483.169 646.494 494.029 592.703 515.448 542.063 cv
536.136 493.152 565.751 449.227 603.472 411.506 cv
641.192 373.785 685.118 344.169 734.03 323.482 cv
784.669 302.064 838.46 291.203 893.908 291.203 cv
949.357 291.203 1003.15 302.064 1053.79 323.482 cv
1102.7 344.169 1146.62 373.785 1184.34 411.506 cv
1222.07 449.227 1251.68 493.152 1272.37 542.063 cv
1293.79 592.703 1304.65 646.494 1304.65 701.942 cv
1304.65 757.391 1293.79 811.182 1272.37 861.821 cv
1251.68 910.732 1222.07 954.658 1184.34 992.379 cv
1146.62 1030.1 1102.7 1059.71 1053.79 1080.4 cv
1003.15 1101.82 949.357 1112.68 893.908 1112.68 cv
.266667 .705882 .52549 rgb
f
1134.25 701.942 mo
1134.25 569.204 1026.65 461.6 893.908 461.6 cv
761.171 461.6 653.566 569.204 653.566 701.942 cv
653.566 834.68 761.171 942.285 893.908 942.285 cv
1026.65 942.285 1134.25 834.68 1134.25 701.942 cv
f
1095.92 701.942 mo
1095.92 590.372 1005.48 499.927 893.908 499.927 cv
782.339 499.927 691.894 590.372 691.894 701.942 cv
691.894 813.512 782.339 903.958 893.908 903.958 cv
1005.48 903.958 1095.92 813.512 1095.92 701.942 cv
.215686 .568627 .423529 rgb
f
910.243 903.298 mo
868.218 860.884 812.908 802 812.908 802 cv
825.909 761 li
835.909 675.094 li
840.025 619.051 li
875.782 590.014 li
944.333 596.575 li
1090.99 746.457 li
1071.87 831.458 999.185 896.181 910.243 903.298 cv
.2 .52549 .392157 rgb
f
970.104 802.588 mo
817.713 802.588 li
814.648 802.588 812.163 800.103 812.163 797.038 cv
812.163 680.645 li
812.163 677.579 814.648 675.094 817.713 675.094 cv
970.104 675.094 li
973.169 675.094 975.654 677.579 975.654 680.645 cv
975.654 797.038 li
975.654 800.103 973.169 802.588 970.104 802.588 cv
cp
.921569 .921569 .921569 rgb
f
961.909 675.094 mo
941.909 675.094 li
941.909 638.938 li
941.909 616.916 923.992 599 901.971 599 cv
885.846 599 li
863.825 599 845.909 616.916 845.909 638.938 cv
845.909 675.094 li
825.909 675.094 li
825.909 638.938 li
825.909 605.888 852.796 579 885.846 579 cv
901.971 579 li
935.021 579 961.909 605.888 961.909 638.938 cv
961.909 675.094 li
cp
f
901.971 589 mo
885.846 589 li
858.266 589 835.909 611.358 835.909 638.938 cv
835.909 675.094 li
845.909 675.094 li
845.909 638.938 li
845.909 616.916 863.825 599 885.846 599 cv
901.971 599 li
923.992 599 941.909 616.916 941.909 638.938 cv
941.909 675.094 li
951.909 675.094 li
951.909 638.938 li
951.909 611.358 929.551 589 901.971 589 cv
cp
.721569 .721569 .721569 rgb
f
975.654 797.038 mo
975.654 680.645 li
975.654 677.579 973.169 675.094 970.104 675.094 cv
951.421 675.094 li
812.163 775.867 li
812.163 797.038 li
812.163 800.103 814.648 802.588 817.713 802.588 cv
970.104 802.588 li
973.169 802.588 975.654 800.103 975.654 797.038 cv
cp
f
908.956 727.047 mo
908.956 718.737 902.219 712 893.909 712 cv
885.598 712 878.861 718.737 878.861 727.047 cv
878.861 732.828 882.126 737.841 886.909 740.361 cv
886.909 754.07 li
886.909 757.897 890.011 761 893.838 761 cv
893.979 761 li
897.806 761 900.909 757.897 900.909 754.07 cv
900.909 740.361 li
905.691 737.841 908.956 732.828 908.956 727.047 cv
cp
.301961 .301961 .301961 rgb
f
449.928 1144.24 mo
318.147 1144.24 li
242.337 1144.24 li
224.983 1144.24 li
222.603 1144.24 220.673 1142.31 220.673 1139.93 cv
220.673 913.451 li
220.673 913.451 li
220.673 1104.93 li
220.673 1107.31 222.603 1109.24 224.983 1109.24 cv
449.928 1109.24 li
449.928 1144.24 li
.247059 .65098 .486274 rgb
f
653.89 714.49 mo
473.813 845.954 li
474.379 847.602 474.953 849.247 475.537 850.887 cv
654.265 720.406 li
654.115 718.441 653.991 716.468 653.89 714.49 cv
.266667 .705882 .52549 rgb
f
656.005 736.184 mo
480.546 864.277 li
481.175 865.879 481.815 867.475 482.463 869.068 cv
656.866 741.746 li
656.558 739.899 656.27 738.045 656.005 736.184 cv
f
659.821 756.635 mo
488 882.073 li
488.691 883.63 489.392 885.182 490.101 886.73 cv
661.104 761.889 li
660.656 760.146 660.231 758.394 659.821 756.635 cv
cp
f
656.197 666.33 mo
462.595 807.668 li
463.022 809.417 463.459 811.161 463.907 812.902 cv
655.285 673.186 li
655.558 670.891 655.859 668.605 656.197 666.33 cv
f
661.938 638.901 mo
458.2 787.639 li
458.552 789.441 458.916 791.239 459.29 793.033 cv
660.003 646.502 li
660.606 643.952 661.255 641.419 661.938 638.901 cv
f
665.195 775.95 mo
496.133 899.373 li
496.885 900.886 497.646 902.394 498.415 903.897 cv
666.862 780.924 li
666.288 779.274 665.733 777.616 665.195 775.95 cv
cp
f
653.812 691.309 mo
467.819 827.092 li
468.317 828.789 468.825 830.482 469.342 832.171 cv
653.62 697.639 li
653.657 695.522 653.721 693.412 653.812 691.309 cv
f
711.45 858.372 mo
546.693 978.652 li
547.734 979.956 548.783 981.254 549.838 982.547 cv
714.762 862.145 li
713.646 860.898 712.54 859.642 711.45 858.372 cv
cp
f
724.304 872.226 mo
558.728 993.103 li
559.827 994.366 560.931 995.624 562.043 996.875 cv
727.932 875.768 li
726.709 874.601 725.501 873.419 724.304 872.226 cv
f
738.395 885.176 mo
571.413 1007.08 li
572.569 1008.3 573.732 1009.52 574.902 1010.73 cv
742.358 888.474 li
741.025 887.389 739.705 886.289 738.395 885.176 cv
cp
f
689.297 828.069 mo
524.537 948.351 li
525.464 949.738 526.398 951.119 527.341 952.495 cv
691.971 832.307 li
691.064 830.905 690.175 829.49 689.297 828.069 cv
cp
f
679.997 811.62 mo
514.415 932.503 li
515.285 933.931 516.16 935.355 517.046 936.773 cv
682.355 816.089 li
681.555 814.609 680.767 813.12 679.997 811.62 cv
cp
f
699.786 843.649 mo
535.292 963.737 li
536.276 965.083 537.266 966.424 538.265 967.758 cv
702.779 847.655 li
701.768 846.33 700.77 844.995 699.786 843.649 cv
cp
f
671.948 794.259 mo
504.951 916.175 li
505.762 917.645 506.582 919.11 507.409 920.57 cv
673.973 798.97 li
673.283 797.408 672.606 795.839 671.948 794.259 cv
cp
f
475.514 874.141 mo
467.035 874.141 li
480.544 864.279 li
481.173 865.881 481.812 867.478 482.459 869.071 cv
475.514 874.141 li
.364706 .807843 .627451 rgb
f
482.459 869.071 mo
481.812 867.478 481.173 865.881 480.544 864.279 cv
480.544 864.279 li
481.174 865.881 481.812 867.477 482.46 869.07 cv
482.459 869.071 li
.356863 .780392 .607843 rgb
f
482.46 869.07 mo
481.812 867.477 481.174 865.881 480.544 864.279 cv
480.546 864.277 li
481.175 865.879 481.815 867.475 482.463 869.068 cv
482.46 869.07 li
.341176 .741176 .576471 rgb
f
443.683 874.141 mo
435.203 874.141 li
473.807 845.958 li
474.372 847.607 474.947 849.251 475.531 850.891 cv
443.683 874.141 li
.364706 .807843 .627451 rgb
f
475.531 850.891 mo
474.947 849.251 474.372 847.607 473.807 845.958 cv
473.808 845.958 li
474.373 847.607 474.947 849.25 475.531 850.891 cv
475.531 850.891 li
.356863 .780392 .607843 rgb
f
475.531 850.891 mo
474.947 849.25 474.373 847.607 473.808 845.958 cv
473.813 845.954 li
474.379 847.602 474.953 849.247 475.537 850.887 cv
475.531 850.891 li
.341176 .741176 .576471 rgb
f
411.852 874.141 mo
403.373 874.141 li
467.813 827.097 li
468.31 828.792 468.819 830.489 469.336 832.176 cv
411.852 874.141 li
.364706 .807843 .627451 rgb
f
469.336 832.176 mo
468.819 830.489 468.31 828.792 467.813 827.097 cv
467.813 827.096 li
468.31 828.791 468.819 830.489 469.336 832.176 cv
469.336 832.176 li
.356863 .780392 .607843 rgb
f
469.336 832.176 mo
468.819 830.489 468.31 828.791 467.813 827.096 cv
467.819 827.092 li
468.317 828.789 468.825 830.482 469.342 832.171 cv
469.336 832.176 li
.341176 .741176 .576471 rgb
f
380.022 874.141 mo
371.542 874.141 li
446.824 819.182 li
454.869 819.5 li
380.022 874.141 li
348.191 874.141 mo
339.71 874.141 li
416.628 817.988 li
424.672 818.306 li
348.191 874.141 li
.364706 .807843 .627451 rgb
f
570.253 1109.24 mo
224.983 1109.24 li
222.603 1109.24 220.673 1107.31 220.673 1104.93 cv
220.673 878.451 li
220.673 876.071 222.603 874.141 224.983 874.141 cv
570.253 874.141 li
572.634 874.141 574.563 876.071 574.563 878.451 cv
574.563 1104.93 li
574.563 1107.31 572.634 1109.24 570.253 1109.24 cv
.301961 .301961 .301961 rgb
f
561.629 887.07 mo
561.629 1096.31 li
233.598 1096.31 li
233.598 887.07 li
561.629 887.07 li
.462745 .909804 .72549 rgb
f
471.153 1160.98 mo
454.51 1160.98 li
454.51 1109.24 li
340.726 1109.24 li
340.726 1160.98 li
324.083 1160.98 li
320.804 1160.98 318.147 1163.63 318.147 1166.91 cv
318.147 1174.88 li
477.09 1174.88 li
477.09 1166.91 li
477.09 1163.63 474.432 1160.98 471.153 1160.98 cv
cp
.301961 .301961 .301961 rgb
f
449.928 1096.31 mo
424.819 1096.31 li
449.928 1077.84 li
449.928 1096.31 li
561.629 1054.32 mo
481.91 1054.32 li
561.629 995.68 li
561.629 1054.32 li
.368627 .839216 .631373 rgb
f
411.165 982.631 mo
434.023 978.99 li
430.08 956.996 415.475 938.702 395.75 929.639 cv
386.538 950.868 li
399.143 956.825 408.482 968.546 411.165 982.631 cv
cp
1 1 1 rgb
f
323.27 990.977 mo
323.27 986.745 323.876 982.656 324.983 978.779 cv
302.939 971.717 li
301.124 977.821 300.145 984.284 300.145 990.977 cv
300.145 1028.24 330.352 1058.45 367.615 1058.45 cv
377.688 1058.45 387.243 1056.24 395.827 1052.28 cv
385.719 1031.46 li
380.19 1033.93 374.066 1035.32 367.615 1035.32 cv
343.124 1035.32 323.27 1015.47 323.27 990.977 cv
cp
.215686 .568627 .423529 rgb
f
367.615 923.507 mo
338.023 923.507 312.883 942.56 303.785 969.066 cv
325.826 976.128 li
331.934 958.941 348.334 946.632 367.615 946.632 cv
371.244 946.632 374.768 947.073 378.142 947.899 cv
383.686 925.444 li
378.535 924.183 373.155 923.507 367.615 923.507 cv
cp
.266667 .705882 .52549 rgb
f
411.273 998.639 mo
408.875 1012.39 400.168 1023.96 388.222 1030.24 cv
398.331 1051.07 li
417.502 1041.25 431.353 1022.52 434.435 1000.35 cv
411.273 998.639 li
cp
f
451.508 995.971 mo
451.004 995.286 451.146 994.357 451.806 993.871 cv
485.337 969.385 li
487.115 971.803 li
453.585 996.288 li
452.924 996.774 451.994 996.633 451.508 995.971 cv
cp
f
508.079 965.575 mo
508.079 957.641 501.647 951.209 493.713 951.209 cv
485.779 951.209 479.347 957.641 479.347 965.575 cv
479.347 973.509 485.779 979.941 493.713 979.941 cv
501.647 979.941 508.079 973.509 508.079 965.575 cv
cp
f
499.649 965.575 mo
499.649 962.297 496.992 959.639 493.713 959.639 cv
490.435 959.639 487.777 962.297 487.777 965.575 cv
487.777 968.853 490.435 971.511 493.713 971.511 cv
496.992 971.511 499.649 968.853 499.649 965.575 cv
cp
.462745 .909804 .72549 rgb
f
500.223 819.506 mo
486.691 819.506 li
497.877 811.34 li
498.631 814.072 499.411 816.788 500.223 819.506 cv
505.385 819.307 mo
504.269 815.615 503.206 811.905 502.198 808.185 cv
522.951 793.034 li
538.053 793.034 li
538.053 799.056 li
518.906 813.034 li
509.58 813.034 li
505.618 813.034 li
505.618 818.77 li
505.618 818.982 505.528 819.173 505.385 819.307 cv
538.053 813.034 mo
527.387 813.034 li
538.053 805.246 li
538.053 813.034 li
.227451 .603922 .45098 rgb
f
504.881 819.506 mo
500.223 819.506 li
499.411 816.788 498.631 814.072 497.877 811.34 cv
502.198 808.185 li
503.206 811.905 504.269 815.615 505.385 819.307 cv
505.253 819.43 505.076 819.506 504.881 819.506 cv
.247059 .65098 .486274 rgb
f
527.387 813.034 mo
518.906 813.034 li
538.053 799.056 li
538.053 805.246 li
527.387 813.034 li
f
465.661 819.506 mo
455.022 819.506 li
454.869 819.5 li
463.907 812.902 li
464.473 815.104 465.061 817.316 465.661 819.506 cv
446.824 819.182 mo
424.672 818.306 li
450.66 799.333 li
455.022 799.506 li
460.682 799.506 li
461.292 802.225 461.935 804.968 462.594 807.669 cv
446.824 819.182 li
f
478.211 819.506 mo
470.824 819.506 li
469.923 816.262 469.06 813.005 468.235 809.742 cv
482.256 799.506 li
494.801 799.506 li
495.343 801.728 495.905 803.951 496.485 806.165 cv
478.211 819.506 li
465.661 819.506 mo
465.661 819.506 li
465.061 817.316 464.473 815.104 463.907 812.902 cv
463.907 812.902 li
463.745 812.273 463.585 811.643 463.426 811.013 cv
463.426 811.013 li
463.585 811.643 463.745 812.273 463.907 812.902 cv
463.907 812.902 li
464.474 815.104 465.061 817.316 465.661 819.506 cv
462.594 807.669 mo
461.935 804.968 461.292 802.225 460.682 799.506 cv
460.683 799.506 li
461.293 802.225 461.935 804.968 462.595 807.668 cv
462.595 807.668 li
466.943 804.494 mo
466.545 802.832 466.158 801.172 465.78 799.506 cv
473.776 799.506 li
466.943 804.494 li
500.828 802.994 mo
500.53 801.833 500.238 800.669 499.95 799.506 cv
504.881 799.506 li
505.288 799.506 505.618 799.176 505.618 798.769 cv
505.618 793.034 li
509.58 793.034 li
514.471 793.034 li
500.828 802.994 li
.227451 .603922 .45098 rgb
f
470.824 819.506 mo
465.661 819.506 li
465.061 817.316 464.474 815.104 463.907 812.901 cv
468.235 809.742 li
469.06 813.005 469.923 816.262 470.824 819.506 cv
463.426 811.013 mo
463.426 811.013 li
463.145 809.9 462.868 808.785 462.595 807.668 cv
462.595 807.668 li
461.935 804.968 461.293 802.225 460.683 799.506 cv
465.78 799.506 li
466.158 801.172 466.545 802.832 466.943 804.494 cv
462.595 807.668 li
462.868 808.785 463.145 809.9 463.426 811.013 cv
.2 .52549 .392157 rgb
f
496.485 806.165 mo
495.905 803.951 495.343 801.728 494.801 799.506 cv
499.95 799.506 li
500.238 800.669 500.53 801.833 500.828 802.994 cv
496.485 806.165 li
.247059 .65098 .486274 rgb
f
416.628 817.988 mo
410.767 817.756 li
407.226 817.616 404.427 814.705 404.427 811.161 cv
404.427 784.117 li
404.427 784.117 li
404.427 791.16 li
404.427 791.16 li
404.427 794.705 407.226 797.617 410.767 797.757 cv
442.616 799.015 li
416.628 817.988 li
f
463.907 812.902 mo
463.745 812.273 463.585 811.643 463.426 811.013 cv
463.145 809.9 462.868 808.785 462.595 807.668 cv
466.943 804.494 li
473.776 799.506 li
482.256 799.506 li
468.235 809.742 li
463.907 812.902 li
f
486.691 819.506 mo
478.211 819.506 li
496.485 806.165 li
500.828 802.994 li
514.471 793.034 li
522.951 793.034 li
502.198 808.185 li
497.877 811.34 li
486.691 819.506 li
f
454.869 819.5 mo
446.824 819.182 li
462.595 807.668 li
463.023 809.422 463.458 811.156 463.907 812.902 cv
454.869 819.5 li
.337255 .74902 .580392 rgb
f
463.907 812.902 mo
463.458 811.156 463.023 809.422 462.594 807.669 cv
462.595 807.668 li
462.87 808.796 463.142 809.889 463.426 811.013 cv
463.585 811.643 463.745 812.273 463.907 812.902 cv
463.907 812.902 li
.329412 .721569 .560784 rgb
f
463.426 811.013 mo
463.142 809.889 462.87 808.796 462.595 807.668 cv
462.595 807.668 li
462.868 808.785 463.145 809.9 463.426 811.013 cv
.317647 .686274 .533333 rgb
f
424.672 818.306 mo
416.628 817.988 li
442.616 799.015 li
450.66 799.333 li
424.672 818.306 li
.337255 .74902 .580392 rgb
f
504.881 755.771 mo
455.022 755.771 li
410.767 757.521 li
407.226 757.66 404.427 760.572 404.427 764.117 cv
404.427 791.16 li
404.427 794.705 407.226 797.617 410.767 797.757 cv
455.022 799.506 li
504.881 799.506 li
505.288 799.506 505.618 799.176 505.618 798.769 cv
505.618 756.508 li
505.618 756.101 505.288 755.771 504.881 755.771 cv
.462745 .909804 .72549 rgb
f
538.053 793.033 mo
505.618 793.033 li
505.618 762.243 li
538.053 762.243 li
538.053 793.033 li
1 1 1 rgb
f
509.58 793.033 mo
505.618 793.033 li
505.618 762.243 li
509.58 762.243 li
509.58 793.033 li
.921569 .921569 .921569 rgb
f
522.83 774.048 mo
517.104 774.048 li
517.104 768.323 li
522.83 768.323 li
522.83 774.048 li
cp
.721569 .721569 .721569 rgb
f
522.83 786.954 mo
517.104 786.954 li
517.104 781.229 li
522.83 781.229 li
522.83 786.954 li
f
538.053 793.034 mo
522.951 793.034 li
522.952 793.033 li
538.053 793.033 li
538.053 793.034 li
.211765 .556863 .415686 rgb
f
504.881 799.506 mo
499.95 799.506 li
499.95 799.506 li
504.881 799.506 li
505.288 799.506 505.618 799.176 505.618 798.769 cv
505.618 782.45 li
505.618 793.033 li
509.58 793.033 li
514.472 793.033 li
514.471 793.034 li
509.58 793.034 li
505.618 793.034 li
505.618 798.769 li
505.618 799.176 505.288 799.506 504.881 799.506 cv
f
522.951 793.034 mo
514.471 793.034 li
514.472 793.033 li
522.952 793.033 li
522.951 793.034 li
.227451 .603922 .45098 rgb
f
504.881 799.506 mo
499.95 799.506 li
494.801 799.506 li
482.256 799.506 li
473.776 799.506 li
465.78 799.506 li
460.683 799.506 li
455.022 799.506 li
450.66 799.333 li
442.616 799.015 li
410.767 797.757 li
407.226 797.617 404.427 794.705 404.427 791.16 cv
404.427 777.498 li
505.618 777.498 li
505.618 782.45 li
505.618 798.769 li
505.618 799.176 505.288 799.506 504.881 799.506 cv
.427451 .839216 .670588 rgb
f
538.053 793.033 mo
538.053 793.033 li
522.952 793.033 li
514.472 793.033 li
509.58 793.033 li
509.58 777.498 li
538.053 777.498 li
538.053 793.033 li
517.104 781.229 mo
517.104 786.954 li
522.83 786.954 li
522.83 781.229 li
517.104 781.229 li
.92549 .92549 .92549 rgb
f
509.58 793.033 mo
505.618 793.033 li
505.618 777.498 li
509.58 777.498 li
509.58 793.033 li
.85098 .85098 .85098 rgb
f
522.83 786.954 mo
517.104 786.954 li
517.104 781.229 li
522.83 781.229 li
522.83 786.954 li
.666667 .666667 .666667 rgb
f
1587.25 473.466 mo
1444.18 473.466 li
1526.37 413.466 li
1517.89 413.466 li
1435.7 473.466 li
1412.35 473.466 li
1494.53 413.466 li
1486.05 413.466 li
1403.87 473.466 li
1380.52 473.466 li
1462.7 413.466 li
1454.22 413.466 li
1372.04 473.466 li
1348.69 473.466 li
1430.87 413.466 li
1422.39 413.466 li
1340.21 473.466 li
1316.86 473.466 li
1399.04 413.466 li
1390.56 413.466 li
1308.38 473.466 li
1285.03 473.466 li
1367.21 413.466 li
1358.73 413.466 li
1276.55 473.466 li
1274.67 473.466 li
1272.48 469.831 1270.25 466.246 1267.97 462.68 cv
1335.38 413.466 li
1326.9 413.466 li
1265.24 458.48 li
1262.72 454.639 1260.14 450.841 1257.5 447.084 cv
1303.55 413.466 li
1295.07 413.466 li
1254.6 443.008 li
1251.92 439.283 1249.18 435.592 1246.39 431.955 cv
1271.72 413.466 li
1263.24 413.466 li
1243.33 428.004 li
1240.49 424.388 1237.59 420.817 1234.65 417.293 cv
1239.89 413.466 li
1231.41 413.466 li
1231.41 413.469 1231.41 413.472 1231.42 413.475 cv
1223.89 404.68 1216.03 396.181 1207.85 388.001 cv
1178.83 358.98 1145.8 333.951 1109.68 313.826 cv
1127.49 292.608 1154.22 279.107 1184.12 279.107 cv
1192.5 279.107 1200.64 280.168 1208.39 282.164 cv
1230.34 241.918 1273.03 214.61 1322.1 214.61 cv
1370.97 214.61 1413.51 241.7 1435.53 281.679 cv
1450.65 272.935 1468.19 267.906 1486.9 267.906 cv
1543.67 267.906 1589.69 313.922 1589.69 370.686 cv
1589.69 371.868 1589.64 373.039 1589.6 374.212 cv
1609.76 375.15 1626.77 388.118 1633.64 406.1 cv
1633.9 406.78 1634.15 407.467 1634.38 408.162 cv
1634.4 408.214 li
1634.62 408.887 1634.83 409.566 1635.02 410.251 cv
1635.07 410.422 li
1635.25 411.07 1635.42 411.723 1635.57 412.382 cv
1635.6 412.494 1635.63 412.608 1635.65 412.72 cv
1635.79 413.331 1635.92 413.943 1636.04 414.561 cv
1636.07 414.745 1636.1 414.932 1636.14 415.117 cv
1636.23 415.673 1636.33 416.229 1636.41 416.791 cv
1636.45 417.07 1636.48 417.352 1636.51 417.633 cv
1636.57 418.113 1636.64 418.592 1636.68 419.076 cv
1636.72 419.49 1636.74 419.908 1636.77 420.325 cv
1636.8 420.689 1636.83 421.05 1636.85 421.415 cv
1636.89 422.209 1636.91 423.007 1636.91 423.81 cv
1636.91 425.523 1636.82 427.217 1636.65 428.887 cv
1635.89 436.399 1633.45 443.415 1629.72 449.558 cv
1628.89 450.923 1628 452.245 1627.04 453.52 cv
1623.71 457.981 1619.64 461.862 1615.02 464.985 cv
1614.36 465.432 1613.68 465.862 1613 466.277 cv
1611.64 467.106 1610.23 467.872 1608.78 468.569 cv
1607.33 469.267 1605.85 469.896 1604.33 470.453 cv
1602.8 471.01 1601.25 471.494 1599.66 471.902 cv
1597.28 472.515 1594.83 472.955 1592.33 473.21 cv
1590.66 473.379 1588.97 473.466 1587.25 473.466 cv
429.865 440.691 mo
427.26 440.691 425.064 438.674 424.881 436.036 cv
424.69 433.281 426.77 430.894 429.524 430.703 cv
475.773 427.502 512.001 388.649 512.001 342.251 cv
512.001 338.965 511.822 335.703 511.468 332.479 cv
514.244 326.98 516.522 321.192 518.238 315.182 cv
520.247 322.24 521.47 329.554 521.861 337.012 cv
610.918 337.012 li
618.504 337.012 625.469 339.716 630.902 344.211 cv
628.104 346.271 625.338 348.359 622.59 350.483 cv
619.231 348.289 615.221 347.012 610.918 347.012 cv
521.886 347.012 li
519.499 396.516 480.094 437.226 430.215 440.679 cv
430.097 440.687 429.98 440.691 429.865 440.691 cv
.247059 .65098 .486274 rgb
f
1274.67 473.466 mo
1274.67 473.466 li
1272.48 469.831 1270.25 466.246 1267.97 462.68 cv
1267.97 462.68 li
1270.25 466.246 1272.48 469.831 1274.67 473.466 cv
1268.86 473.466 mo
1253.19 473.466 li
1263.95 465.611 li
1265.62 468.212 1267.25 470.829 1268.86 473.466 cv
1244.72 473.466 mo
1235.33 473.466 li
1233.8 471.183 1232.25 468.92 1230.68 466.667 cv
1253.49 450.009 li
1256.13 453.769 1258.71 457.569 1261.23 461.408 cv
1244.72 473.466 li
1229.3 473.466 mo
1221.36 473.466 li
1226.64 469.616 li
1227.53 470.895 1228.42 472.177 1229.3 473.466 cv
1212.88 473.466 mo
1189.53 473.466 li
1215.52 454.493 li
1218.33 458.13 1221.07 461.813 1223.74 465.537 cv
1212.88 473.466 li
1181.12 473.42 mo
1174.34 473.214 1167.73 472.314 1161.37 470.788 cv
1203.7 439.885 li
1206.68 443.393 1209.59 446.952 1212.44 450.551 cv
1181.12 473.42 li
1155.21 469.093 mo
1121.53 458.612 1095.71 430.302 1088.79 395.205 cv
973.328 395.205 li
956.451 395.205 942.72 381.474 942.72 364.596 cv
942.72 358.048 li
942.72 346.685 933.475 337.44 922.112 337.44 cv
921.594 337.44 li
910.231 337.44 900.986 346.685 900.986 358.048 cv
900.986 391.995 li
900.986 408.872 887.255 422.603 870.377 422.603 cv
869.86 422.603 li
852.982 422.603 839.251 408.872 839.251 391.995 cv
839.251 357.116 li
839.251 345.752 830.006 336.508 818.643 336.508 cv
818.126 336.508 li
806.763 336.508 797.518 345.752 797.518 357.116 cv
797.518 391.995 li
797.518 408.872 783.787 422.603 766.909 422.603 cv
766.392 422.603 li
749.514 422.603 735.784 408.872 735.784 391.995 cv
735.784 357.116 li
735.784 346.427 727.605 337.613 717.177 336.604 cv
721.517 334.504 725.901 332.478 730.327 330.528 cv
739.553 335.806 745.784 345.747 745.784 357.116 cv
745.784 391.995 li
745.784 403.358 755.029 412.603 766.392 412.603 cv
766.909 412.603 li
778.273 412.603 787.518 403.358 787.518 391.995 cv
787.518 357.116 li
787.518 340.239 801.248 326.508 818.126 326.508 cv
818.643 326.508 li
835.521 326.508 849.251 340.239 849.251 357.116 cv
849.251 391.995 li
849.251 403.358 858.496 412.603 869.86 412.603 cv
870.377 412.603 li
881.741 412.603 890.985 403.358 890.985 391.995 cv
890.985 358.048 li
890.985 341.171 904.716 327.44 921.594 327.44 cv
922.112 327.44 li
938.99 327.44 952.72 341.171 952.72 358.048 cv
952.72 364.596 li
952.72 375.96 961.965 385.204 973.328 385.204 cv
1087.35 385.204 li
1087.08 382.267 1086.94 379.294 1086.94 376.286 cv
1086.94 366.216 1088.48 356.496 1091.32 347.356 cv
1124.02 365.572 1154 388.236 1180.81 415.042 cv
1187.62 421.851 1194.16 428.868 1200.43 436.08 cv
1155.21 469.093 li
1227.78 462.589 mo
1225.11 458.866 1222.36 455.18 1219.56 451.544 cv
1242.38 434.884 li
1245.18 438.524 1247.92 442.212 1250.6 445.934 cv
1227.78 462.589 li
1265.24 458.48 mo
1262.72 454.639 1260.14 450.841 1257.5 447.085 cv
1257.5 447.084 li
1260.14 450.841 1262.72 454.639 1265.24 458.48 cv
1265.24 458.481 li
1216.48 447.601 mo
1213.63 443.999 1210.72 440.441 1207.75 436.928 cv
1230.62 420.235 li
1233.57 423.759 1236.47 427.328 1239.31 430.936 cv
1216.48 447.601 li
1254.6 443.009 mo
1251.92 439.283 1249.18 435.592 1246.39 431.955 cv
1246.39 431.955 li
1249.18 435.592 1251.92 439.283 1254.6 443.008 cv
1254.6 443.009 li
1204.49 433.121 mo
1198.05 425.707 1191.34 418.5 1184.34 411.506 cv
1156.99 384.152 1126.38 361.062 1092.96 342.546 cv
1096.28 333.595 1100.88 325.259 1106.53 317.77 cv
1142.29 337.569 1175.05 362.271 1204.31 391.537 cv
1212.35 399.569 1220.04 407.865 1227.37 416.413 cv
1204.49 433.121 li
1243.33 428.004 mo
1240.49 424.388 1237.59 420.817 1234.65 417.293 cv
1234.65 417.293 li
1237.59 420.817 1240.49 424.388 1243.33 428.004 cv
1243.33 428.004 li
663.442 422.603 mo
662.924 422.603 li
646.046 422.603 632.316 408.872 632.316 391.995 cv
632.316 391.757 li
635.609 388.972 638.943 386.243 642.316 383.57 cv
642.316 391.995 li
642.316 403.358 651.561 412.603 662.924 412.603 cv
663.442 412.603 li
674.805 412.603 684.049 403.358 684.049 391.995 cv
684.049 357.116 li
684.049 356.241 684.086 355.373 684.159 354.516 cv
688.234 352.053 692.353 349.663 696.517 347.343 cv
694.943 350.253 694.049 353.582 694.049 357.116 cv
694.049 391.995 li
694.049 408.872 680.319 422.603 663.442 422.603 cv
1231.43 413.487 mo
1223.9 404.692 1216.03 396.181 1207.85 388.001 cv
1216.03 396.181 1223.89 404.68 1231.42 413.475 cv
1231.42 413.479 1231.42 413.483 1231.43 413.487 cv
632.316 385.237 mo
632.316 368.41 li
632.316 362.741 630.1 357.581 626.49 353.748 cv
629.141 351.707 631.818 349.694 634.512 347.716 cv
639.368 353.245 642.316 360.49 642.316 368.41 cv
642.316 377.214 li
638.946 379.832 635.609 382.509 632.316 385.237 cv
685.462 347.915 mo
689.377 335.519 700.984 326.508 714.657 326.508 cv
715.175 326.508 li
718.279 326.508 721.276 326.972 724.101 327.835 cv
710.829 333.862 697.941 340.561 685.462 347.915 cv
.227451 .603922 .45098 rgb
f
1274.67 473.466 mo
1268.86 473.466 li
1267.25 470.829 1265.62 468.212 1263.95 465.611 cv
1267.97 462.68 li
1267.97 462.68 li
1270.25 466.246 1272.48 469.831 1274.67 473.466 cv
1261.23 461.408 mo
1258.71 457.569 1256.13 453.769 1253.49 450.009 cv
1257.49 447.089 li
1257.49 447.089 li
1257.5 447.085 li
1260.14 450.841 1262.72 454.639 1265.24 458.48 cv
1265.24 458.481 li
1265.24 458.481 li
1261.23 461.408 li
1250.6 445.934 mo
1247.92 442.212 1245.18 438.524 1242.38 434.884 cv
1246.39 431.955 li
1246.39 431.955 li
1249.18 435.592 1251.92 439.283 1254.6 443.009 cv
1254.6 443.013 li
1254.6 443.013 li
1250.6 445.934 li
1239.31 430.936 mo
1236.47 427.328 1233.57 423.759 1230.62 420.235 cv
1234.64 417.297 li
1234.64 417.297 li
1234.65 417.293 li
1237.59 420.817 1240.49 424.388 1243.33 428.004 cv
1243.32 428.004 li
1243.32 428.004 li
1239.31 430.936 li
1234.64 417.297 mo
1233.57 416.015 1232.49 414.74 1231.4 413.471 cv
1227.37 416.413 li
1220.04 407.865 1212.35 399.569 1204.31 391.537 cv
1175.05 362.271 1142.29 337.569 1106.53 317.77 cv
1107.55 316.428 1108.59 315.112 1109.68 313.826 cv
1145.8 333.951 1178.83 358.98 1207.85 388.001 cv
1216.03 396.181 1223.9 404.692 1231.43 413.487 cv
1232.5 414.754 1233.57 416.022 1234.64 417.297 cv
626.49 353.748 mo
625.326 352.513 624.017 351.415 622.59 350.483 cv
625.338 348.359 628.104 346.271 630.902 344.211 cv
632.196 345.281 633.405 346.454 634.512 347.716 cv
631.818 349.694 629.141 351.707 626.49 353.748 cv
.2 .52549 .392157 rgb
f
1235.33 473.466 mo
1229.3 473.466 li
1228.42 472.177 1227.53 470.895 1226.64 469.616 cv
1230.68 466.667 li
1232.25 468.92 1233.8 471.183 1235.33 473.466 cv
1223.74 465.537 mo
1221.07 461.813 1218.33 458.13 1215.52 454.493 cv
1219.56 451.544 li
1222.36 455.18 1225.11 458.866 1227.78 462.589 cv
1223.74 465.537 li
1212.44 450.551 mo
1209.59 446.952 1206.68 443.393 1203.7 439.885 cv
1207.75 436.928 li
1210.72 440.441 1213.63 443.999 1216.48 447.601 cv
1212.44 450.551 li
1200.43 436.08 mo
1194.16 428.868 1187.62 421.851 1180.81 415.042 cv
1154 388.236 1124.02 365.572 1091.32 347.356 cv
1091.83 345.732 1092.37 344.133 1092.96 342.546 cv
1126.38 361.062 1156.99 384.152 1184.34 411.506 cv
1191.34 418.5 1198.05 425.707 1204.49 433.121 cv
1200.43 436.08 li
632.316 391.757 mo
632.316 385.237 li
635.609 382.509 638.946 379.832 642.316 377.214 cv
642.316 383.57 li
638.943 386.243 635.609 388.972 632.316 391.757 cv
684.159 354.516 mo
684.351 352.236 684.795 350.027 685.462 347.915 cv
697.941 340.561 710.829 333.862 724.101 327.835 cv
726.29 328.503 728.376 329.411 730.327 330.528 cv
725.901 332.478 721.517 334.504 717.177 336.604 cv
716.518 336.541 715.85 336.508 715.175 336.508 cv
714.657 336.508 li
706.828 336.508 700.004 340.896 696.517 347.343 cv
692.353 349.663 688.234 352.053 684.159 354.516 cv
.247059 .65098 .486274 rgb
f
1257.49 447.089 mo
1256.54 445.725 1255.57 444.366 1254.6 443.013 cv
1255.57 444.366 1256.54 445.725 1257.49 447.089 cv
.2 .52549 .392157 rgb
f
507.792 315.184 mo
503.632 302.207 496.471 290.273 486.665 280.258 cv
470.352 263.597 448.582 254.132 425.366 253.609 cv
422.606 253.547 420.418 251.258 420.48 248.498 cv
420.542 245.778 422.758 243.61 425.467 243.61 cv
425.508 243.61 425.55 243.611 425.591 243.612 cv
451.433 244.194 475.661 254.724 493.811 273.262 cv
501.024 280.629 506.951 288.931 511.476 297.885 cv
510.825 303.839 509.577 309.625 507.792 315.184 cv
.247059 .65098 .486274 rgb
f
1109.42 595.474 mo
1110.17 596.991 1110.91 598.518 1111.63 600.053 cv
1277.78 478.751 li
1276.94 477.304 1276.09 475.862 1275.23 474.425 cv
1109.42 595.474 li
.266667 .705882 .52549 rgb
f
1123.75 631.49 mo
1124.27 633.181 1124.77 634.877 1125.25 636.583 cv
1295.46 512.32 li
1294.74 510.787 1294.01 509.259 1293.26 507.736 cv
1123.75 631.49 li
f
1117.25 612.999 mo
1117.89 614.601 1118.5 616.213 1119.11 617.831 cv
1286.96 495.29 li
1286.18 493.8 1285.38 492.317 1284.58 490.837 cv
1117.25 612.999 li
f
1310.42 547.877 mo
1309.82 546.254 1309.21 544.635 1308.59 543.021 cv
1132.36 671.679 li
1132.6 673.578 1132.82 675.482 1133.01 677.394 cv
1310.42 547.877 li
f
1041.21 512.033 mo
1209.22 389.383 li
1208.03 388.185 1206.83 386.994 1205.63 385.809 cv
1037.06 508.874 li
1038.46 509.911 1039.84 510.966 1041.21 512.033 cv
cp
f
1128.83 651.02 mo
1129.21 652.809 1129.58 654.606 1129.92 656.41 cv
1303.3 529.841 li
1302.63 528.264 1301.96 526.692 1301.28 525.125 cv
1128.83 651.02 li
f
1100.36 578.85 mo
1101.22 580.287 1102.07 581.731 1102.9 583.188 cv
1267.97 462.68 li
1267.07 461.275 1266.16 459.876 1265.24 458.481 cv
1100.36 578.85 li
f
1174.04 368.587 mo
1171.21 368.592 1168.38 368.597 1165.54 368.599 cv
1002.62 487.542 li
1004.28 488.384 1005.92 489.247 1007.56 490.126 cv
1174.04 368.587 li
cp
f
1090.11 563.098 mo
1091.07 564.458 1092.02 565.828 1092.96 567.208 cv
1257.49 447.089 li
1256.54 445.725 1255.57 444.366 1254.6 443.013 cv
1090.11 563.098 li
f
1020.58 497.669 mo
1022.1 498.615 1023.61 499.575 1025.11 500.553 cv
1195.52 376.143 li
1194.27 374.987 1193.02 373.839 1191.76 372.698 cv
1020.58 497.669 li
cp
f
1315.19 561.444 mo
1134.09 693.653 li
1134.16 695.679 1134.2 697.711 1134.22 699.749 cv
1316.82 566.442 li
1316.29 564.771 1315.74 563.106 1315.19 561.444 cv
f
1078.66 548.22 mo
1079.72 549.502 1080.78 550.798 1081.82 552.102 cv
1246.39 431.955 li
1245.38 430.632 1244.35 429.316 1243.32 428.004 cv
1078.66 548.22 li
f
1052.17 521.077 mo
1053.46 522.2 1054.73 523.333 1055.99 524.483 cv
1222.26 403.1 li
1221.13 401.86 1219.99 400.625 1218.85 399.398 cv
1052.17 521.077 li
cp
f
1066.02 534.209 mo
1067.19 535.412 1068.35 536.628 1069.5 537.856 cv
1234.64 417.297 li
1233.57 416.015 1232.49 414.74 1231.4 413.471 cv
1066.02 534.209 li
f
1324.16 561.088 mo
1315.68 561.088 li
1435.7 473.466 li
1444.18 473.466 li
1324.16 561.088 li
.364706 .807843 .627451 rgb
f
1444.18 473.466 mo
1435.7 473.466 li
1517.89 413.466 li
1526.37 413.466 li
1444.18 473.466 li
.356863 .780392 .607843 rgb
f
1310.43 547.873 mo
1309.83 546.255 1309.21 544.626 1308.6 543.017 cv
1403.87 473.466 li
1412.35 473.466 li
1310.42 547.877 li
.364706 .807843 .627451 rgb
f
1310.43 547.873 mo
1309.83 546.255 1309.21 544.626 1308.6 543.018 cv
1308.59 543.021 li
1309.21 544.626 1309.83 546.255 1310.43 547.873 cv
1310.42 547.877 li
.356863 .780392 .607843 rgb
f
1310.42 547.877 mo
1310.42 547.877 li
1309.82 546.254 1309.21 544.635 1308.59 543.021 cv
1308.59 543.021 li
1309.21 544.626 1309.83 546.255 1310.43 547.873 cv
1310.42 547.877 li
.341176 .741176 .576471 rgb
f
1412.35 473.466 mo
1403.87 473.466 li
1486.05 413.466 li
1494.53 413.466 li
1412.35 473.466 li
.356863 .780392 .607843 rgb
f
1303.3 529.838 mo
1302.64 528.268 1301.96 526.683 1301.28 525.121 cv
1372.04 473.466 li
1380.52 473.466 li
1303.3 529.841 li
.364706 .807843 .627451 rgb
f
1303.3 529.839 mo
1302.64 528.268 1301.96 526.683 1301.28 525.122 cv
1301.28 525.125 li
1301.96 526.683 1302.64 528.268 1303.3 529.838 cv
1303.3 529.841 li
.356863 .780392 .607843 rgb
f
1303.3 529.841 mo
1303.3 529.841 li
1302.63 528.264 1301.96 526.692 1301.28 525.125 cv
1301.28 525.125 li
1301.96 526.683 1302.64 528.268 1303.3 529.839 cv
1303.3 529.841 li
.341176 .741176 .576471 rgb
f
1380.52 473.466 mo
1372.04 473.466 li
1454.22 413.466 li
1462.7 413.466 li
1380.52 473.466 li
.356863 .780392 .607843 rgb
f
1295.47 512.316 mo
1294.74 510.781 1294.01 509.257 1293.27 507.732 cv
1340.21 473.466 li
1348.69 473.466 li
1295.47 512.316 li
.364706 .807843 .627451 rgb
f
1295.47 512.316 mo
1294.74 510.781 1294.01 509.257 1293.27 507.732 cv
1293.27 507.732 li
1294.01 509.257 1294.74 510.781 1295.47 512.316 cv
1295.47 512.316 li
.356863 .780392 .607843 rgb
f
1295.46 512.32 mo
1295.46 512.32 li
1294.74 510.787 1294.01 509.259 1293.26 507.736 cv
1293.27 507.732 li
1294.01 509.257 1294.74 510.781 1295.47 512.316 cv
1295.46 512.32 li
.341176 .741176 .576471 rgb
f
1348.69 473.466 mo
1340.21 473.466 li
1422.39 413.466 li
1430.87 413.466 li
1348.69 473.466 li
.356863 .780392 .607843 rgb
f
1286.96 495.289 mo
1286.18 493.803 1285.38 492.311 1284.58 490.835 cv
1308.38 473.466 li
1316.86 473.466 li
1286.96 495.29 li
.364706 .807843 .627451 rgb
f
1286.96 495.289 mo
1286.18 493.803 1285.38 492.311 1284.58 490.835 cv
1284.58 490.837 li
1285.38 492.311 1286.18 493.803 1286.96 495.289 cv
1286.96 495.29 li
.356863 .780392 .607843 rgb
f
1286.96 495.29 mo
1286.96 495.29 li
1286.18 493.8 1285.38 492.317 1284.58 490.837 cv
1284.58 490.837 li
1285.38 492.311 1286.18 493.803 1286.96 495.289 cv
1286.96 495.29 li
.341176 .741176 .576471 rgb
f
1316.86 473.466 mo
1308.38 473.466 li
1390.56 413.466 li
1399.04 413.466 li
1316.86 473.466 li
.356863 .780392 .607843 rgb
f
1277.79 478.747 mo
1276.95 477.299 1276.1 475.857 1275.24 474.421 cv
1276.55 473.466 li
1285.03 473.466 li
1277.79 478.747 li
.364706 .807843 .627451 rgb
f
1277.79 478.747 mo
1276.95 477.299 1276.1 475.858 1275.24 474.421 cv
1275.24 474.421 li
1276.1 475.857 1276.95 477.299 1277.79 478.747 cv
1277.79 478.747 li
.356863 .780392 .607843 rgb
f
1277.78 478.751 mo
1277.78 478.751 li
1276.94 477.304 1276.09 475.862 1275.23 474.425 cv
1275.24 474.421 li
1276.1 475.858 1276.95 477.299 1277.79 478.747 cv
1277.78 478.751 li
.341176 .741176 .576471 rgb
f
1285.03 473.466 mo
1276.55 473.466 li
1358.73 413.466 li
1367.21 413.466 li
1285.03 473.466 li
.356863 .780392 .607843 rgb
f
1267.97 462.68 mo
1267.07 461.273 1266.16 459.877 1265.24 458.48 cv
1326.9 413.466 li
1335.38 413.466 li
1267.97 462.68 li
f
1267.97 462.68 mo
1267.07 461.273 1266.16 459.877 1265.24 458.48 cv
1265.24 458.48 li
1266.16 459.877 1267.07 461.273 1267.97 462.68 cv
1267.97 462.68 li
.345098 .756863 .588235 rgb
f
1267.97 462.68 mo
1267.97 462.68 li
1267.07 461.275 1266.16 459.876 1265.24 458.481 cv
1265.24 458.481 li
1266.16 459.877 1267.07 461.273 1267.97 462.68 cv
1267.97 462.68 li
.333333 .717647 .560784 rgb
f
1267.97 462.68 mo
1267.07 461.275 1266.16 459.876 1265.24 458.481 cv
1265.24 458.481 li
1266.16 459.876 1267.07 461.275 1267.97 462.68 cv
1267.97 462.68 li
.364706 .807843 .627451 rgb
f
1257.5 447.084 mo
1256.54 445.718 1255.58 444.363 1254.6 443.008 cv
1295.07 413.466 li
1303.55 413.466 li
1257.5 447.084 li
.356863 .780392 .607843 rgb
f
1257.5 447.085 mo
1256.54 445.719 1255.58 444.363 1254.6 443.009 cv
1254.6 443.008 li
1255.58 444.363 1256.54 445.718 1257.5 447.084 cv
1257.5 447.085 li
.345098 .756863 .588235 rgb
f
1257.49 447.089 mo
1257.49 447.089 li
1257.49 447.089 li
1256.54 445.725 1255.57 444.366 1254.6 443.013 cv
1254.6 443.013 li
1254.6 443.009 li
1255.58 444.363 1256.54 445.719 1257.5 447.085 cv
1257.49 447.089 li
.333333 .717647 .560784 rgb
f
1246.39 431.955 mo
1245.38 430.632 1244.36 429.314 1243.33 428.004 cv
1263.24 413.466 li
1271.72 413.466 li
1246.39 431.955 li
.356863 .780392 .607843 rgb
f
1246.39 431.955 mo
1245.38 430.632 1244.35 429.315 1243.33 428.004 cv
1243.33 428.004 li
1244.36 429.314 1245.38 430.632 1246.39 431.955 cv
1246.39 431.955 li
.345098 .756863 .588235 rgb
f
1246.39 431.955 mo
1246.39 431.955 li
1245.38 430.632 1244.35 429.316 1243.32 428.004 cv
1243.33 428.004 li
1244.35 429.315 1245.38 430.632 1246.39 431.955 cv
1246.39 431.955 li
.333333 .717647 .560784 rgb
f
1234.65 417.293 mo
1233.58 416.015 1232.5 414.74 1231.42 413.475 cv
1231.41 413.472 1231.41 413.469 1231.41 413.466 cv
1239.89 413.466 li
1234.65 417.293 li
.356863 .780392 .607843 rgb
f
1234.65 417.293 mo
1233.58 416.015 1232.51 414.752 1231.43 413.487 cv
1231.42 413.483 1231.42 413.479 1231.42 413.475 cv
1232.5 414.74 1233.58 416.015 1234.65 417.293 cv
1234.65 417.293 li
.345098 .756863 .588235 rgb
f
1234.64 417.297 mo
1234.64 417.297 li
1234.64 417.297 li
1233.57 416.022 1232.5 414.754 1231.43 413.487 cv
1232.51 414.752 1233.58 416.015 1234.65 417.293 cv
1234.64 417.297 li
.333333 .717647 .560784 rgb
f
1589.6 314.213 mo
1589.64 313.039 1589.69 311.869 1589.69 310.686 cv
1589.69 253.922 1543.67 207.906 1486.91 207.906 cv
1468.19 207.906 1450.65 212.935 1435.53 221.679 cv
1413.51 181.7 1370.97 154.61 1322.1 154.61 cv
1273.03 154.61 1230.34 181.918 1208.39 222.164 cv
1200.64 220.168 1192.5 219.107 1184.12 219.107 cv
1130.45 219.107 1086.94 262.616 1086.94 316.286 cv
1086.94 369.957 1130.45 413.466 1184.12 413.466 cv
1587.25 413.466 li
1614.68 413.466 1636.91 391.234 1636.91 363.81 cv
1636.91 337.171 1615.93 315.437 1589.6 314.213 cv
cp
1 1 1 rgb
f
1587.25 378.038 mo
1184.12 378.038 li
1136.5 378.038 1096.88 343.784 1088.56 298.573 cv
1087.5 304.317 1086.94 310.236 1086.94 316.286 cv
1086.94 369.957 1130.45 413.466 1184.12 413.466 cv
1587.25 413.466 li
1614.68 413.466 1636.91 391.234 1636.91 363.81 cv
1636.91 357.568 1635.74 351.602 1633.64 346.099 cv
1626.51 364.772 1608.43 378.038 1587.25 378.038 cv
cp
.462745 .909804 .72549 rgb
f
1272.87 313.186 mo
1269.31 313.186 1265.86 311.277 1264.06 307.918 cv
1250.78 283.221 1255.37 252.115 1275.21 232.273 cv
1295.16 212.323 1325.34 207.721 1350.3 220.821 cv
1355.19 223.388 1357.08 229.433 1354.51 234.323 cv
1351.94 239.212 1345.9 241.097 1341.01 238.531 cv
1323.84 229.52 1303.08 232.689 1289.36 246.416 cv
1275.7 260.067 1272.54 281.464 1281.67 298.45 cv
1284.29 303.315 1282.46 309.378 1277.6 311.993 cv
1276.09 312.802 1274.47 313.186 1272.87 313.186 cv
cp
.921569 .921569 .921569 rgb
f
1286.44 290.406 mo
1256.85 311.687 li
1282.28 315.836 li
1286.44 290.406 li
cp
f
1321.98 341.589 mo
1311.84 341.589 1301.62 339.167 1292.14 334.194 cv
1287.25 331.628 1285.37 325.583 1287.93 320.693 cv
1290.5 315.802 1296.54 313.918 1301.43 316.484 cv
1318.6 325.495 1339.36 322.327 1353.09 308.601 cv
1366.74 294.949 1369.9 273.551 1360.77 256.566 cv
1358.16 251.701 1359.98 245.638 1364.84 243.023 cv
1369.71 240.409 1375.77 242.234 1378.39 247.098 cv
1391.66 271.795 1387.07 302.901 1367.23 322.743 cv
1354.85 335.119 1338.54 341.589 1321.98 341.589 cv
cp
f
1356 264.61 mo
1385.59 243.328 li
1360.16 239.179 li
1356 264.61 li
cp
f
429.865 386.691 mo
427.26 386.691 425.064 384.674 424.881 382.036 cv
424.69 379.281 426.77 376.894 429.524 376.703 cv
475.773 373.502 512.001 334.649 512.001 288.251 cv
512.001 264.961 503.003 242.945 486.665 226.258 cv
470.352 209.597 448.582 200.132 425.366 199.609 cv
422.606 199.547 420.418 197.258 420.48 194.498 cv
420.543 191.737 422.826 189.544 425.591 189.612 cv
451.433 190.194 475.661 200.724 493.811 219.262 cv
511.99 237.829 522.001 262.33 522.001 288.251 cv
522.001 339.882 481.684 383.116 430.215 386.679 cv
430.097 386.687 429.98 386.691 429.865 386.691 cv
.462745 .909804 .72549 rgb
f
870.377 368.603 mo
869.86 368.603 li
852.982 368.603 839.251 354.872 839.251 337.995 cv
839.251 303.116 li
839.251 291.752 830.006 282.508 818.643 282.508 cv
818.126 282.508 li
806.763 282.508 797.518 291.752 797.518 303.116 cv
797.518 337.995 li
797.518 354.872 783.787 368.603 766.909 368.603 cv
766.392 368.603 li
749.514 368.603 735.784 354.872 735.784 337.995 cv
735.784 303.116 li
735.784 291.752 726.538 282.508 715.175 282.508 cv
714.658 282.508 li
703.294 282.508 694.049 291.752 694.049 303.116 cv
694.049 337.995 li
694.049 354.872 680.319 368.603 663.442 368.603 cv
662.924 368.603 li
646.046 368.603 632.316 354.872 632.316 337.995 cv
632.316 314.41 li
632.316 302.611 622.717 293.012 610.918 293.012 cv
517.001 293.012 li
517.001 283.012 li
610.918 283.012 li
628.231 283.012 642.316 297.097 642.316 314.41 cv
642.316 337.995 li
642.316 349.358 651.561 358.603 662.924 358.603 cv
663.442 358.603 li
674.805 358.603 684.049 349.358 684.049 337.995 cv
684.049 303.116 li
684.049 286.239 697.78 272.508 714.658 272.508 cv
715.175 272.508 li
732.053 272.508 745.784 286.239 745.784 303.116 cv
745.784 337.995 li
745.784 349.358 755.029 358.603 766.392 358.603 cv
766.909 358.603 li
778.273 358.603 787.518 349.358 787.518 337.995 cv
787.518 303.116 li
787.518 286.239 801.248 272.508 818.126 272.508 cv
818.643 272.508 li
835.521 272.508 849.251 286.239 849.251 303.116 cv
849.251 337.995 li
849.251 349.358 858.496 358.603 869.86 358.603 cv
870.377 358.603 li
881.741 358.603 890.986 349.358 890.986 337.995 cv
890.986 304.048 li
890.986 287.171 904.716 273.44 921.594 273.44 cv
922.112 273.44 li
938.99 273.44 952.72 287.171 952.72 304.048 cv
952.72 310.596 li
952.72 321.959 961.965 331.205 973.328 331.205 cv
1092.05 331.205 li
1092.05 341.205 li
973.328 341.205 li
956.451 341.205 942.72 327.474 942.72 310.596 cv
942.72 304.048 li
942.72 292.685 933.475 283.44 922.112 283.44 cv
921.594 283.44 li
910.231 283.44 900.986 292.685 900.986 304.048 cv
900.986 337.995 li
900.986 354.872 887.255 368.603 870.377 368.603 cv
cp
f
1339.79 1148.36 mo
1323.87 1148.36 li
1318.87 1148.36 li
1318.87 1087.52 li
1280.19 1087.52 li
1261.06 1087.52 1245.49 1071.96 1245.49 1052.82 cv
1245.49 1045.23 li
1245.49 1031.61 1234.41 1020.53 1220.79 1020.53 cv
1220.19 1020.53 li
1206.57 1020.53 1195.49 1031.61 1195.49 1045.23 cv
1195.49 1027.77 li
1201.2 1022.49 1206.79 1017.04 1212.21 1011.46 cv
1214.78 1010.85 1217.45 1010.53 1220.19 1010.53 cv
1220.79 1010.53 li
1230.45 1010.53 1239.2 1014.5 1245.49 1020.88 cv
1245.49 1022.82 li
1245.49 1032.3 1249.31 1040.9 1255.49 1047.17 cv
1255.49 1052.82 li
1255.49 1066.44 1266.57 1077.52 1280.19 1077.52 cv
1318.87 1077.52 li
1318.87 1057.52 li
1323.87 1057.52 li
1323.87 1047.52 li
1318.87 1047.52 li
1318.87 1017.71 li
1328.87 1017.72 li
1339.79 1017.72 li
1339.79 1113.44 li
1339.79 1148.36 li
.247059 .65098 .486274 rgb
f
1195.49 1027.77 mo
1195.49 1027.77 li
1201.2 1022.49 1206.79 1017.04 1212.21 1011.46 cv
1212.21 1011.46 1212.21 1011.46 1212.21 1011.46 cv
1206.79 1017.04 1201.2 1022.49 1195.49 1027.77 cv
1195.49 1020.93 mo
1195.49 1020.88 li
1196.19 1020.17 1196.92 1019.49 1197.68 1018.85 cv
1196.95 1019.55 1196.22 1020.24 1195.49 1020.93 cv
.227451 .603922 .45098 rgb
f
1195.49 1027.77 mo
1195.49 1020.93 li
1196.22 1020.24 1196.95 1019.55 1197.68 1018.85 cv
1201.8 1015.32 1206.76 1012.75 1212.21 1011.46 cv
1206.79 1017.04 1201.2 1022.49 1195.49 1027.77 cv
.2 .52549 .392157 rgb
f
749.856 1138.29 mo
649.391 1138.29 li
649.391 1128.29 li
749.856 1128.29 li
753.848 1128.29 757.626 1127.35 760.979 1125.68 cv
765.034 1126.95 769.134 1128.17 773.239 1129.33 cv
767.031 1134.9 758.832 1138.29 749.856 1138.29 cv
.247059 .65098 .486274 rgb
f
773.239 1129.33 mo
769.134 1128.17 765.034 1126.95 760.979 1125.68 cv
760.979 1125.68 li
765.035 1126.95 769.134 1128.17 773.239 1129.33 cv
773.239 1129.33 li
777.122 1125.24 mo
773.506 1124.25 769.904 1123.2 766.312 1122.11 cv
771.581 1117.51 774.914 1110.75 774.914 1103.23 cv
774.914 1097.72 li
775.539 1097.08 776.139 1096.42 776.713 1095.74 cv
779.438 1096.55 782.175 1097.33 784.914 1098.09 cv
784.914 1103.23 li
784.914 1111.56 781.994 1119.22 777.122 1125.24 cv
784.914 1092.9 mo
783.208 1092.42 781.505 1091.93 779.805 1091.44 cv
783.046 1086.13 784.914 1079.89 784.914 1073.23 cv
784.914 1092.9 li
.227451 .603922 .45098 rgb
f
773.239 1129.33 mo
769.134 1128.17 765.035 1126.95 760.979 1125.68 cv
762.91 1124.72 764.702 1123.52 766.312 1122.11 cv
769.904 1123.2 773.506 1124.25 777.122 1125.24 cv
775.938 1126.7 774.639 1128.07 773.239 1129.33 cv
.2 .52549 .392157 rgb
f
784.914 1098.09 mo
782.175 1097.33 779.438 1096.55 776.713 1095.74 cv
777.847 1094.39 778.882 1092.95 779.805 1091.44 cv
781.505 1091.93 783.208 1092.42 784.914 1092.9 cv
784.914 1098.09 li
.247059 .65098 .486274 rgb
f
1160.8 1119.3 mo
1160.2 1119.3 li
1141.06 1119.3 1125.5 1103.73 1125.5 1084.6 cv
1125.5 1080.81 li
1128.02 1079.27 1130.51 1077.71 1132.99 1076.12 cv
1133.78 1077.1 1134.61 1078.05 1135.5 1078.95 cv
1135.5 1084.6 li
1135.5 1098.22 1146.58 1109.3 1160.2 1109.3 cv
1160.8 1109.3 li
1174.42 1109.3 1185.49 1098.22 1185.49 1084.6 cv
1185.49 1078.95 li
1191.67 1072.68 1195.49 1064.08 1195.49 1054.6 cv
1195.49 1084.6 li
1195.49 1103.73 1179.93 1119.3 1160.8 1119.3 cv
f
1125.5 1080.81 mo
1125.5 1080.81 li
1128.02 1079.27 1130.51 1077.71 1132.99 1076.12 cv
1132.99 1076.12 li
1130.51 1077.71 1128.02 1079.27 1125.5 1080.81 cv
1125.5 1074.98 mo
1125.5 1044.15 li
1125.5 1043.21 1125.45 1042.28 1125.34 1041.37 cv
1125.4 1041.33 1125.45 1041.3 1125.5 1041.26 cv
1125.5 1054.6 li
1125.5 1060.94 1127.21 1066.89 1130.19 1072.02 cv
1128.64 1073.01 1127.07 1074 1125.5 1074.98 cv
1075.5 1044.15 mo
1075.5 1019.8 li
1081.8 1013.42 1090.54 1009.45 1100.2 1009.45 cv
1100.8 1009.45 li
1110.46 1009.45 1119.2 1013.42 1125.5 1019.8 cv
1125.5 1035.18 li
1125.05 1035.5 1124.61 1035.8 1124.16 1036.11 cv
1120.81 1026.43 1111.61 1019.45 1100.8 1019.45 cv
1100.2 1019.45 li
1086.58 1019.45 1075.5 1030.53 1075.5 1044.15 cv
.227451 .603922 .45098 rgb
f
1125.5 1080.81 mo
1125.5 1074.98 li
1127.07 1074 1128.64 1073.01 1130.19 1072.02 cv
1131.03 1073.45 1131.97 1074.82 1132.99 1076.12 cv
1130.51 1077.71 1128.02 1079.27 1125.5 1080.81 cv
.2 .52549 .392157 rgb
f
1125.34 1041.37 mo
1125.14 1039.55 1124.74 1037.79 1124.16 1036.11 cv
1124.61 1035.8 1125.05 1035.5 1125.5 1035.18 cv
1125.5 1041.26 li
1125.45 1041.3 1125.4 1041.33 1125.34 1041.37 cv
.247059 .65098 .486274 rgb
f
1047.44 1118.66 mo
1051.18 1117.28 1054.92 1115.85 1058.61 1114.37 cv
1055.22 1116.41 1051.45 1117.88 1047.44 1118.66 cv
f
1047.44 1118.66 mo
1051.18 1117.28 1054.92 1115.85 1058.61 1114.37 cv
1058.61 1114.37 li
1054.92 1115.85 1051.18 1117.28 1047.44 1118.66 cv
1047.44 1118.66 li
1032.81 1118.51 mo
1021.23 1115.98 1011.79 1107.66 1007.7 1096.74 cv
1010.91 1095.81 1014.11 1094.85 1017.3 1093.84 cv
1020.96 1102.89 1029.85 1109.3 1040.2 1109.3 cv
1040.8 1109.3 li
1054.42 1109.3 1065.5 1098.22 1065.5 1084.6 cv
1065.5 1078.95 li
1067.26 1077.16 1068.84 1075.18 1070.18 1073.05 cv
1071.96 1072.2 1073.73 1071.34 1075.5 1070.47 cv
1075.5 1084.6 li
1075.5 1092.01 1073.16 1098.89 1069.19 1104.53 cv
1067.72 1105.17 1066.25 1105.8 1064.78 1106.43 cv
1054.25 1110.88 1043.59 1114.91 1032.81 1118.51 cv
1006.29 1091.94 mo
1005.77 1089.57 1005.51 1087.12 1005.51 1084.6 cv
1005.51 1044.15 li
1005.51 1030.53 994.425 1019.45 980.807 1019.45 cv
809.973 1019.45 li
796.156 1019.45 784.914 1030.69 784.914 1044.51 cv
784.914 1020.01 li
791.283 1013.5 800.164 1009.45 809.973 1009.45 cv
980.807 1009.45 li
990.462 1009.45 999.209 1013.42 1005.51 1019.8 cv
1005.51 1054.6 li
1005.51 1064.08 1009.32 1072.68 1015.51 1078.95 cv
1015.51 1084.6 li
1015.51 1086.11 1015.64 1087.6 1015.9 1089.04 cv
1012.71 1090.04 1009.5 1091.01 1006.29 1091.94 cv
1073.64 1065.81 mo
1074.85 1062.29 1075.5 1058.52 1075.5 1054.6 cv
1075.5 1064.89 li
1074.88 1065.2 1074.26 1065.51 1073.64 1065.81 cv
.227451 .603922 .45098 rgb
f
1040.8 1119.3 mo
1040.2 1119.3 li
1037.67 1119.3 1035.2 1119.02 1032.81 1118.51 cv
1043.59 1114.91 1054.25 1110.88 1064.78 1106.43 cv
1066.25 1105.8 1067.72 1105.17 1069.19 1104.53 cv
1066.39 1108.5 1062.79 1111.86 1058.61 1114.37 cv
1054.92 1115.85 1051.18 1117.28 1047.44 1118.66 cv
1045.29 1119.08 1043.07 1119.3 1040.8 1119.3 cv
.2 .52549 .392157 rgb
f
1007.7 1096.74 mo
1007.11 1095.19 1006.64 1093.58 1006.29 1091.94 cv
1009.5 1091.01 1012.71 1090.04 1015.9 1089.04 cv
1016.21 1090.7 1016.68 1092.31 1017.3 1093.84 cv
1014.11 1094.85 1010.91 1095.81 1007.7 1096.74 cv
1070.18 1073.05 mo
1071.6 1070.8 1072.77 1068.37 1073.64 1065.81 cv
1074.26 1065.51 1074.88 1065.2 1075.5 1064.89 cv
1075.5 1070.47 li
1073.73 1071.34 1071.96 1072.2 1070.18 1073.05 cv
.247059 .65098 .486274 rgb
f
1496 1246.96 mo
1404.28 1246.96 li
1339.79 1246.96 li
1339.79 1193.93 li
1339.79 1148.36 li
1339.79 1196.96 li
1404.28 1196.96 li
1496 1196.96 li
1542.46 1150.5 li
1542.46 1200.5 li
1496 1246.96 li
1542.46 1049.95 mo
1542.46 930.245 li
1464.81 930.245 li
1469.77 926.58 1475.23 923.542 1481.05 921.247 cv
1485.46 919.511 1490.09 918.212 1494.87 917.373 cv
1494.87 676.335 li
1479.24 671.969 1467.78 657.639 1467.78 640.623 cv
1467.78 627.451 li
1467.78 625.286 li
1467.78 621.016 li
1480.68 621.016 li
1480.68 595.692 li
1480.68 592.281 1483.45 589.516 1486.86 589.516 cv
1486.99 589.516 li
1490.4 589.516 1493.16 592.281 1493.16 595.692 cv
1493.16 621.016 li
1516.57 621.016 li
1516.57 595.692 li
1516.57 592.281 1519.34 589.516 1522.75 589.516 cv
1522.87 589.516 li
1526.28 589.516 1529.05 592.281 1529.05 595.692 cv
1529.05 621.016 li
1541.95 621.016 li
1541.95 625.286 li
1541.95 627.451 li
1541.95 640.07 li
1541.95 657.156 1530.56 671.852 1514.87 676.316 cv
1514.87 916.693 li
1550.75 920.508 1578.7 950.867 1578.7 987.762 cv
1578.7 996.761 1577.03 1005.36 1573.99 1013.3 cv
1568.03 1028.86 1556.79 1041.8 1542.46 1049.95 cv
1413.16 930.245 mo
1393.16 930.245 li
1393.16 902.811 li
1393.16 875.96 1371.32 854.114 1344.46 854.114 cv
1311.12 854.114 li
1313.53 847.523 1315.79 840.847 1317.88 834.114 cv
1344.46 834.114 li
1382.35 834.114 1413.16 864.932 1413.16 902.811 cv
1413.16 930.245 li
f
1226.87 881.201 mo
1213.7 881.201 li
1211.53 881.201 li
1207.26 881.201 li
1207.26 868.296 li
1181.94 868.296 li
1178.53 868.296 1175.76 865.531 1175.76 862.12 cv
1175.76 861.996 li
1175.76 858.584 1178.53 855.819 1181.94 855.819 cv
1207.26 855.819 li
1207.26 832.409 li
1181.94 832.409 li
1178.53 832.409 1175.76 829.644 1175.76 826.233 cv
1175.76 826.108 li
1175.76 822.697 1178.53 819.932 1181.94 819.932 cv
1207.26 819.932 li
1207.26 807.026 li
1211.53 807.026 li
1213.7 807.026 li
1226.32 807.026 li
1243.4 807.026 1258.1 818.423 1262.56 834.114 cv
1277.64 834.114 li
1275.33 840.833 1272.83 847.498 1270.15 854.114 cv
1262.58 854.114 li
1258.22 869.737 1243.89 881.201 1226.87 881.201 cv
1311.12 854.114 mo
1311.12 854.114 li
1313.53 847.523 1315.79 840.847 1317.88 834.114 cv
1317.88 834.114 li
1315.79 840.847 1313.53 847.523 1311.12 854.114 cv
1305.8 854.114 mo
1275.54 854.114 li
1278.18 847.499 1280.64 840.83 1282.93 834.114 cv
1312.66 834.114 li
1310.54 840.825 1308.25 847.494 1305.8 854.114 cv
.227451 .603922 .45098 rgb
f
1311.12 854.114 mo
1305.8 854.114 li
1308.25 847.494 1310.54 840.825 1312.66 834.114 cv
1317.88 834.114 li
1315.79 840.847 1313.53 847.523 1311.12 854.114 cv
.2 .52549 .392157 rgb
f
1275.54 854.114 mo
1270.15 854.114 li
1272.83 847.498 1275.33 840.833 1277.64 834.114 cv
1282.93 834.114 li
1280.64 840.83 1278.18 847.499 1275.54 854.114 cv
.247059 .65098 .486274 rgb
f
1542.46 930.245 mo
1339.79 930.245 li
1339.79 1196.96 li
1496 1196.96 li
1542.46 1150.5 li
1542.46 930.245 li
.462745 .909804 .72549 rgb
f
1496 1196.96 mo
1404.28 1196.96 li
1339.79 1133.93 li
1339.79 1053.45 li
1340.21 988.015 li
1340.21 988.015 1462.47 1105.38 1525.45 1167.51 cv
1496 1196.96 li
.411765 .870588 .67451 rgb
f
1542.46 1150.5 mo
1496 1196.96 li
1496 1150.5 li
1542.46 1150.5 li
cp
1 1 1 rgb
f
1404.49 1061.71 mo
1404.49 1057.63 1401.18 1054.32 1397.09 1054.32 cv
1393.01 1054.32 1389.7 1057.63 1389.7 1061.71 cv
1389.7 1065.79 1393.01 1069.11 1397.09 1069.11 cv
1401.18 1069.11 1404.49 1065.79 1404.49 1061.71 cv
cp
.266667 .705882 .52549 rgb
f
1498.06 1065.56 mo
1417.17 1065.56 li
1417.17 1057.86 li
1498.06 1057.86 li
1498.06 1065.56 li
cp
f
1404.49 1085.62 mo
1404.49 1081.54 1401.18 1078.23 1397.09 1078.23 cv
1393.01 1078.23 1389.7 1081.54 1389.7 1085.62 cv
1389.7 1089.71 1393.01 1093.02 1397.09 1093.02 cv
1401.18 1093.02 1404.49 1089.71 1404.49 1085.62 cv
cp
f
1498.06 1089.48 mo
1417.17 1089.48 li
1417.17 1081.77 li
1498.06 1081.77 li
1498.06 1089.48 li
cp
f
1404.49 1109.54 mo
1404.49 1105.45 1401.18 1102.14 1397.09 1102.14 cv
1393.01 1102.14 1389.7 1105.45 1389.7 1109.54 cv
1389.7 1113.62 1393.01 1116.93 1397.09 1116.93 cv
1401.18 1116.93 1404.49 1113.62 1404.49 1109.54 cv
cp
f
1498.06 1113.39 mo
1417.17 1113.39 li
1417.17 1105.68 li
1498.06 1105.68 li
1498.06 1113.39 li
cp
f
1514.87 937.535 mo
1494.87 937.535 li
1494.87 603.839 li
1514.87 603.839 li
1514.87 937.535 li
cp
.215686 .568627 .423529 rgb
f
1505.36 617.707 mo
1525.74 617.442 1541.95 600.453 1541.95 580.07 cv
1541.95 565.286 li
1541.95 563.657 1540.63 562.336 1539.01 562.336 cv
1470.73 562.336 li
1469.1 562.336 1467.78 563.657 1467.78 565.286 cv
1467.78 580.623 li
1467.78 601.269 1484.65 617.975 1505.36 617.707 cv
cp
f
1522.75 529.516 mo
1522.87 529.516 li
1526.28 529.516 1529.05 532.281 1529.05 535.692 cv
1529.05 562.336 li
1516.57 562.336 li
1516.57 535.692 li
1516.57 532.281 1519.34 529.516 1522.75 529.516 cv
cp
f
1486.86 529.516 mo
1486.99 529.516 li
1490.4 529.516 1493.16 532.281 1493.16 535.692 cv
1493.16 562.336 li
1480.68 562.336 li
1480.68 535.692 li
1480.68 532.281 1483.45 529.516 1486.86 529.516 cv
cp
f
1467.78 561.016 mo
1541.95 561.016 li
1541.95 567.452 li
1467.78 567.452 li
1467.78 561.016 li
cp
.462745 .909804 .72549 rgb
f
1413.16 930.645 mo
1393.16 930.645 li
1393.16 842.812 li
1393.16 815.96 1371.32 794.114 1344.47 794.114 cv
1253.95 794.114 li
1253.95 774.114 li
1344.47 774.114 li
1382.34 774.114 1413.16 804.932 1413.16 842.812 cv
1413.16 930.645 li
cp
f
1263.95 783.622 mo
1263.69 763.241 1246.7 747.027 1226.32 747.027 cv
1211.53 747.027 li
1209.9 747.027 1208.58 748.347 1208.58 749.976 cv
1208.58 818.252 li
1208.58 819.881 1209.9 821.201 1211.53 821.201 cv
1226.87 821.201 li
1247.52 821.201 1264.22 804.33 1263.95 783.622 cv
cp
f
1175.76 766.233 mo
1175.76 766.108 li
1175.76 762.697 1178.53 759.932 1181.94 759.932 cv
1208.58 759.932 li
1208.58 772.409 li
1181.94 772.409 li
1178.53 772.409 1175.76 769.644 1175.76 766.233 cv
cp
f
1175.76 802.12 mo
1175.76 801.995 li
1175.76 798.584 1178.53 795.819 1181.94 795.819 cv
1208.58 795.819 li
1208.58 808.296 li
1181.94 808.296 li
1178.53 808.296 1175.76 805.531 1175.76 802.12 cv
cp
f
1207.26 821.201 mo
1207.26 747.027 li
1213.7 747.027 li
1213.7 821.201 li
1207.26 821.201 li
cp
.215686 .568627 .423529 rgb
f
1448.8 927.645 mo
1448.8 958.612 1473.9 983.715 1504.87 983.715 cv
1535.83 983.715 1560.94 958.612 1560.94 927.645 cv
1560.94 896.678 1535.83 871.574 1504.87 871.574 cv
1473.9 871.574 1448.8 896.678 1448.8 927.645 cv
cp
f
1435.74 927.762 mo
1435.74 967.24 1467.75 999.243 1507.22 999.243 cv
1537.7 999.243 1563.71 980.159 1573.99 953.296 cv
1553.45 945.441 li
1546.33 964.04 1528.33 977.252 1507.22 977.252 cv
1479.89 977.252 1457.73 955.095 1457.73 927.762 cv
1457.73 906.827 1470.74 888.942 1489.11 881.709 cv
1481.05 861.247 li
1454.53 871.693 1435.74 897.525 1435.74 927.762 cv
cp
1 1 1 rgb
f
1507.22 878.272 mo
1534.56 878.272 1556.71 900.429 1556.71 927.762 cv
1556.71 933.993 1555.55 939.949 1553.45 945.441 cv
1573.99 953.296 li
1577.03 945.364 1578.71 936.761 1578.71 927.762 cv
1578.71 888.284 1546.7 856.281 1507.22 856.281 cv
1497.98 856.281 1489.16 858.054 1481.05 861.247 cv
1489.11 881.709 li
1494.72 879.499 1500.83 878.272 1507.22 878.272 cv
cp
.462745 .909804 .72549 rgb
f
1526.07 921.322 mo
1489.21 921.322 li
1488.47 921.322 1487.87 921.923 1487.87 922.664 cv
1487.87 950.815 li
1487.87 951.556 1488.47 952.157 1489.21 952.157 cv
1526.07 952.157 li
1526.81 952.157 1527.41 951.556 1527.41 950.815 cv
1527.41 922.664 li
1527.41 921.923 1526.81 921.322 1526.07 921.322 cv
cp
f
1496.03 912.577 mo
1496.03 907.251 1500.36 902.918 1505.69 902.918 cv
1509.59 902.918 li
1514.91 902.918 1519.25 907.251 1519.25 912.577 cv
1519.25 921.322 li
1524.09 921.322 li
1524.09 912.577 li
1524.09 904.584 1517.58 898.081 1509.59 898.081 cv
1505.69 898.081 li
1497.7 898.081 1491.19 904.584 1491.19 912.577 cv
1491.19 921.322 li
1496.03 921.322 li
1496.03 912.577 li
cp
f
1345.3 1118.36 mo
1323.87 1118.36 li
1323.87 987.715 li
1345.3 987.715 li
1351.53 987.715 1356.58 992.762 1356.58 998.988 cv
1356.58 1107.09 li
1356.58 1113.32 1351.53 1118.36 1345.3 1118.36 cv
cp
.301961 .301961 .301961 rgb
f
1328.87 1118.36 mo
1318.87 1118.36 li
1318.87 987.715 li
1328.87 987.715 li
1328.87 1118.36 li
cp
.462745 .909804 .72549 rgb
f
749.856 1108.29 mo
582.247 1108.29 li
582.247 1098.29 li
749.856 1098.29 li
763.673 1098.29 774.914 1087.05 774.914 1073.23 cv
774.914 1014.51 li
774.914 995.179 790.642 979.451 809.973 979.451 cv
980.807 979.451 li
999.94 979.451 1015.51 995.017 1015.51 1014.15 cv
1015.51 1054.6 li
1015.51 1068.22 1026.59 1079.3 1040.2 1079.3 cv
1040.8 1079.3 li
1054.42 1079.3 1065.5 1068.22 1065.5 1054.6 cv
1065.5 1014.15 li
1065.5 995.017 1081.07 979.451 1100.2 979.451 cv
1100.8 979.451 li
1119.93 979.451 1135.5 995.017 1135.5 1014.15 cv
1135.5 1054.6 li
1135.5 1068.22 1146.58 1079.3 1160.2 1079.3 cv
1160.8 1079.3 li
1174.42 1079.3 1185.49 1068.22 1185.49 1054.6 cv
1185.49 1015.23 li
1185.49 996.097 1201.06 980.532 1220.19 980.532 cv
1220.79 980.532 li
1239.93 980.532 1255.49 996.097 1255.49 1015.23 cv
1255.49 1022.82 li
1255.49 1036.44 1266.57 1047.52 1280.19 1047.52 cv
1323.87 1047.52 li
1323.87 1057.52 li
1280.19 1057.52 li
1261.06 1057.52 1245.49 1041.96 1245.49 1022.82 cv
1245.49 1015.23 li
1245.49 1001.61 1234.41 990.532 1220.79 990.532 cv
1220.19 990.532 li
1206.57 990.532 1195.49 1001.61 1195.49 1015.23 cv
1195.49 1054.6 li
1195.49 1073.73 1179.93 1089.3 1160.8 1089.3 cv
1160.2 1089.3 li
1141.06 1089.3 1125.5 1073.73 1125.5 1054.6 cv
1125.5 1014.15 li
1125.5 1000.53 1114.42 989.451 1100.8 989.451 cv
1100.2 989.451 li
1086.58 989.451 1075.5 1000.53 1075.5 1014.15 cv
1075.5 1054.6 li
1075.5 1073.73 1059.94 1089.3 1040.8 1089.3 cv
1040.2 1089.3 li
1021.07 1089.3 1005.51 1073.73 1005.51 1054.6 cv
1005.51 1014.15 li
1005.51 1000.53 994.425 989.451 980.807 989.451 cv
809.973 989.451 li
796.156 989.451 784.914 1000.69 784.914 1014.51 cv
784.914 1073.23 li
784.914 1092.56 769.187 1108.29 749.856 1108.29 cv
f
1356.39 662.537 mo
1336.16 662.537 li
1335.27 652.426 1334.05 642.442 1332.5 632.537 cv
1356.39 632.537 li
1367.62 632.537 1376.72 623.432 1376.72 612.2 cv
1376.72 642.2 li
1376.72 653.432 1367.62 662.537 1356.39 662.537 cv
.247059 .65098 .486274 rgb
f
1336.16 662.537 mo
1336.16 662.537 li
1335.27 652.426 1334.05 642.442 1332.49 632.537 cv
1332.5 632.537 li
1334.05 642.442 1335.27 652.426 1336.16 662.537 cv
1331.16 662.537 mo
1302.8 662.537 li
1301.84 652.465 1300.52 642.463 1298.83 632.537 cv
1327.46 632.537 li
1329.03 642.47 1330.27 652.469 1331.16 662.537 cv
1297.77 662.537 mo
1252.59 662.537 li
1241.36 662.537 1232.25 653.432 1232.25 642.2 cv
1232.25 628.182 li
1236.72 624.92 li
1240.45 629.564 1246.17 632.537 1252.59 632.537 cv
1293.76 632.537 li
1295.47 642.461 1296.81 652.464 1297.77 662.537 cv
.227451 .603922 .45098 rgb
f
1336.16 662.537 mo
1331.16 662.537 li
1330.27 652.469 1329.03 642.47 1327.46 632.537 cv
1332.49 632.537 li
1334.05 642.442 1335.27 652.426 1336.16 662.537 cv
.2 .52549 .392157 rgb
f
1302.8 662.537 mo
1297.77 662.537 li
1296.81 652.464 1295.47 642.461 1293.76 632.537 cv
1298.83 632.537 li
1300.52 642.463 1301.84 652.465 1302.8 662.537 cv
.247059 .65098 .486274 rgb
f
1232.25 621.991 mo
1232.25 611.425 li
1232.25 611.425 li
1232.25 612.2 li
1232.25 612.2 li
1232.25 615.216 1232.91 618.078 1234.09 620.652 cv
1232.25 621.991 li
.227451 .603922 .45098 rgb
f
1232.25 628.182 mo
1232.25 621.991 li
1234.09 620.652 li
1234.79 622.187 1235.68 623.619 1236.72 624.92 cv
1232.25 628.182 li
.247059 .65098 .486274 rgb
f
1356.39 632.537 mo
1252.59 632.537 li
1241.36 632.537 1232.25 623.432 1232.25 612.2 cv
1232.25 581.425 li
1232.25 570.193 1241.36 561.088 1252.59 561.088 cv
1356.39 561.088 li
1367.62 561.088 1376.72 570.193 1376.72 581.425 cv
1376.72 612.2 li
1376.72 623.432 1367.62 632.537 1356.39 632.537 cv
.462745 .909804 .72549 rgb
f
1252.59 624.013 mo
1246.08 624.013 1240.78 618.714 1240.78 612.2 cv
1240.78 581.425 li
1240.78 574.911 1246.08 569.612 1252.59 569.612 cv
1356.39 569.612 li
1362.9 569.612 1368.2 574.911 1368.2 581.425 cv
1368.2 612.2 li
1368.2 618.714 1362.9 624.013 1356.39 624.013 cv
1252.59 624.013 li
.266667 .705882 .52549 rgb
f
1259.57 595.147 mo
1256.49 591.528 li
1255.78 590.688 1255.94 589.415 1256.84 588.779 cv
1258.21 587.809 li
1259.13 587.164 1260.4 587.456 1260.94 588.433 cv
1263.57 593.186 li
1266.2 588.433 li
1266.74 587.456 1268.01 587.164 1268.92 587.809 cv
1270.29 588.779 li
1271.2 589.415 1271.36 590.688 1270.64 591.528 cv
1267.56 595.147 li
1272.5 594.653 li
1273.61 594.543 1274.56 595.41 1274.56 596.52 cv
1274.56 598.559 li
1274.56 599.661 1273.62 600.526 1272.52 600.428 cv
1267.56 599.981 li
1270.63 603.544 li
1271.35 604.378 1271.2 605.648 1270.31 606.292 cv
1268.93 607.286 li
1268.02 607.945 1266.73 607.654 1266.19 606.664 cv
1263.57 601.872 li
1260.94 606.664 li
1260.4 607.654 1259.12 607.945 1258.2 607.286 cv
1256.82 606.292 li
1255.93 605.648 1255.78 604.378 1256.5 603.544 cv
1259.57 599.981 li
1254.61 600.428 li
1253.51 600.526 1252.57 599.661 1252.57 598.559 cv
1252.57 596.52 li
1252.57 595.41 1253.53 594.543 1254.63 594.653 cv
1259.57 595.147 li
1 1 1 rgb
f
1287.6 595.147 mo
1284.52 591.528 li
1283.8 590.688 1283.96 589.415 1284.86 588.779 cv
1286.24 587.809 li
1287.15 587.164 1288.42 587.456 1288.96 588.433 cv
1291.59 593.186 li
1294.22 588.433 li
1294.76 587.456 1296.03 587.164 1296.94 587.809 cv
1298.32 588.779 li
1299.22 589.415 1299.38 590.688 1298.67 591.528 cv
1295.58 595.147 li
1300.53 594.653 li
1301.63 594.543 1302.59 595.41 1302.59 596.52 cv
1302.59 598.559 li
1302.59 599.661 1301.64 600.526 1300.55 600.428 cv
1295.58 599.981 li
1298.66 603.544 li
1299.38 604.378 1299.23 605.648 1298.34 606.292 cv
1296.96 607.286 li
1296.04 607.945 1294.76 607.654 1294.21 606.664 cv
1291.59 601.872 li
1288.97 606.664 li
1288.43 607.654 1287.14 607.945 1286.23 607.286 cv
1284.85 606.292 li
1283.95 605.648 1283.8 604.378 1284.52 603.544 cv
1287.6 599.981 li
1282.64 600.428 li
1281.54 600.526 1280.59 599.661 1280.59 598.559 cv
1280.59 596.52 li
1280.59 595.41 1281.55 594.543 1282.66 594.653 cv
1287.6 595.147 li
.462745 .909804 .72549 rgb
f
1315.62 595.147 mo
1312.54 591.528 li
1311.83 590.688 1311.99 589.415 1312.89 588.779 cv
1314.26 587.809 li
1315.18 587.164 1316.45 587.456 1316.99 588.433 cv
1319.62 593.186 li
1322.25 588.433 li
1322.79 587.456 1324.06 587.164 1324.97 587.809 cv
1326.34 588.779 li
1327.24 589.415 1327.41 590.688 1326.69 591.528 cv
1323.61 595.147 li
1328.55 594.653 li
1329.66 594.543 1330.61 595.41 1330.61 596.52 cv
1330.61 598.559 li
1330.61 599.661 1329.67 600.526 1328.57 600.428 cv
1323.61 599.981 li
1326.68 603.544 li
1327.4 604.378 1327.25 605.648 1326.36 606.292 cv
1324.98 607.286 li
1324.07 607.945 1322.78 607.654 1322.24 606.664 cv
1319.62 601.872 li
1316.99 606.664 li
1316.45 607.654 1315.17 607.945 1314.25 607.286 cv
1312.87 606.292 li
1311.98 605.648 1311.83 604.378 1312.55 603.544 cv
1315.62 599.981 li
1310.66 600.428 li
1309.56 600.526 1308.62 599.661 1308.62 598.559 cv
1308.62 596.52 li
1308.62 595.41 1309.58 594.543 1310.68 594.653 cv
1315.62 595.147 li
f
1343.65 595.147 mo
1340.57 591.528 li
1339.85 590.688 1340.01 589.415 1340.91 588.779 cv
1342.29 587.809 li
1343.2 587.164 1344.47 587.456 1345.01 588.433 cv
1347.64 593.186 li
1350.27 588.433 li
1350.81 587.456 1352.08 587.164 1352.99 587.809 cv
1354.37 588.779 li
1355.27 589.415 1355.43 590.688 1354.72 591.528 cv
1351.63 595.147 li
1356.58 594.653 li
1357.68 594.543 1358.64 595.41 1358.64 596.52 cv
1358.64 598.559 li
1358.64 599.661 1357.69 600.526 1356.6 600.428 cv
1351.63 599.981 li
1354.71 603.544 li
1355.43 604.378 1355.28 605.648 1354.39 606.292 cv
1353.01 607.286 li
1352.09 607.945 1350.81 607.654 1350.26 606.664 cv
1347.64 601.872 li
1345.02 606.664 li
1344.48 607.654 1343.19 607.945 1342.28 607.286 cv
1340.9 606.292 li
1340 605.648 1339.85 604.378 1340.57 603.544 cv
1343.65 599.981 li
1338.69 600.428 li
1337.59 600.526 1336.64 599.661 1336.64 598.559 cv
1336.64 596.52 li
1336.64 595.41 1337.6 594.543 1338.71 594.653 cv
1343.65 595.147 li
f
1356.39 632.537 mo
1332.5 632.537 li
1332.5 632.537 li
1356.39 632.537 li
1367.62 632.537 1376.72 623.432 1376.72 612.2 cv
1376.72 612.2 li
1376.72 623.432 1367.62 632.537 1356.39 632.537 cv
.227451 .603922 .45098 rgb
f
1356.39 632.537 mo
1332.5 632.537 li
1332.49 632.537 li
1327.46 632.537 li
1298.83 632.537 li
1293.76 632.537 li
1252.59 632.537 li
1246.17 632.537 1240.45 629.564 1236.72 624.92 cv
1235.68 623.619 1234.79 622.187 1234.09 620.652 cv
1232.91 618.078 1232.25 615.216 1232.25 612.2 cv
1232.25 596.813 li
1240.78 596.813 li
1240.78 612.2 li
1240.78 618.714 1246.08 624.013 1252.59 624.013 cv
1356.39 624.013 li
1362.9 624.013 1368.2 618.714 1368.2 612.2 cv
1368.2 596.813 li
1376.72 596.813 li
1376.72 612.2 li
1376.72 612.2 li
1376.72 623.432 1367.62 632.537 1356.39 632.537 cv
.427451 .839216 .670588 rgb
f
1356.39 624.013 mo
1252.59 624.013 li
1246.08 624.013 1240.78 618.714 1240.78 612.2 cv
1240.78 596.813 li
1252.57 596.813 li
1252.57 598.559 li
1252.57 599.604 1253.42 600.435 1254.44 600.435 cv
1254.5 600.435 1254.56 600.433 1254.61 600.428 cv
1259.57 599.981 li
1256.5 603.544 li
1255.78 604.378 1255.93 605.648 1256.82 606.292 cv
1258.2 607.286 li
1258.53 607.526 1258.92 607.64 1259.29 607.64 cv
1259.95 607.64 1260.6 607.293 1260.94 606.664 cv
1263.57 601.872 li
1266.19 606.664 li
1266.53 607.293 1267.18 607.64 1267.84 607.64 cv
1268.22 607.64 1268.6 607.526 1268.93 607.286 cv
1270.31 606.292 li
1271.2 605.648 1271.35 604.378 1270.63 603.544 cv
1267.56 599.981 li
1272.52 600.428 li
1272.58 600.433 1272.63 600.435 1272.69 600.435 cv
1273.71 600.435 1274.56 599.604 1274.56 598.559 cv
1274.56 596.813 li
1280.59 596.813 li
1280.59 598.559 li
1280.59 599.604 1281.44 600.435 1282.47 600.435 cv
1282.52 600.435 1282.58 600.433 1282.64 600.428 cv
1287.6 599.981 li
1284.52 603.544 li
1283.8 604.378 1283.95 605.648 1284.85 606.292 cv
1286.23 607.286 li
1286.56 607.526 1286.94 607.64 1287.32 607.64 cv
1287.98 607.64 1288.62 607.293 1288.97 606.664 cv
1291.59 601.872 li
1294.21 606.664 li
1294.56 607.293 1295.2 607.64 1295.86 607.64 cv
1296.24 607.64 1296.62 607.526 1296.96 607.286 cv
1298.34 606.292 li
1299.23 605.648 1299.38 604.378 1298.66 603.544 cv
1295.58 599.981 li
1300.55 600.428 li
1300.6 600.433 1300.66 600.435 1300.72 600.435 cv
1301.74 600.435 1302.59 599.604 1302.59 598.559 cv
1302.59 596.813 li
1308.62 596.813 li
1308.62 598.559 li
1308.62 599.604 1309.47 600.435 1310.49 600.435 cv
1310.55 600.435 1310.61 600.433 1310.66 600.428 cv
1315.62 599.981 li
1312.55 603.544 li
1311.83 604.378 1311.98 605.648 1312.87 606.292 cv
1314.25 607.286 li
1314.58 607.526 1314.97 607.64 1315.34 607.64 cv
1316 607.64 1316.65 607.293 1316.99 606.664 cv
1319.62 601.872 li
1322.24 606.664 li
1322.58 607.293 1323.23 607.64 1323.89 607.64 cv
1324.27 607.64 1324.65 607.526 1324.98 607.286 cv
1326.36 606.292 li
1327.25 605.648 1327.4 604.378 1326.68 603.544 cv
1323.61 599.981 li
1328.57 600.428 li
1328.63 600.433 1328.68 600.435 1328.74 600.435 cv
1329.76 600.435 1330.61 599.604 1330.61 598.559 cv
1330.61 596.813 li
1336.64 596.813 li
1336.64 598.559 li
1336.64 599.604 1337.49 600.435 1338.52 600.435 cv
1338.57 600.435 1338.63 600.433 1338.69 600.428 cv
1343.65 599.981 li
1340.57 603.544 li
1339.85 604.378 1340 605.648 1340.9 606.292 cv
1342.28 607.286 li
1342.61 607.526 1342.99 607.64 1343.37 607.64 cv
1344.03 607.64 1344.67 607.293 1345.02 606.664 cv
1347.64 601.872 li
1350.26 606.664 li
1350.61 607.293 1351.25 607.64 1351.91 607.64 cv
1352.29 607.64 1352.67 607.526 1353.01 607.286 cv
1354.39 606.292 li
1355.28 605.648 1355.43 604.378 1354.71 603.544 cv
1351.63 599.981 li
1356.6 600.428 li
1356.65 600.433 1356.71 600.435 1356.77 600.435 cv
1357.79 600.435 1358.64 599.604 1358.64 598.559 cv
1358.64 596.813 li
1368.2 596.813 li
1368.2 612.2 li
1368.2 618.714 1362.9 624.013 1356.39 624.013 cv
.247059 .65098 .486274 rgb
f
1259.29 607.64 mo
1258.92 607.64 1258.53 607.526 1258.2 607.286 cv
1256.82 606.292 li
1255.93 605.648 1255.78 604.378 1256.5 603.544 cv
1259.57 599.981 li
1254.61 600.428 li
1254.56 600.433 1254.5 600.435 1254.44 600.435 cv
1253.42 600.435 1252.57 599.604 1252.57 598.559 cv
1252.57 596.813 li
1274.56 596.813 li
1274.56 598.559 li
1274.56 599.604 1273.71 600.435 1272.69 600.435 cv
1272.63 600.435 1272.58 600.433 1272.52 600.428 cv
1267.56 599.981 li
1270.63 603.544 li
1271.35 604.378 1271.2 605.648 1270.31 606.292 cv
1268.93 607.286 li
1268.6 607.526 1268.22 607.64 1267.84 607.64 cv
1267.18 607.64 1266.53 607.293 1266.19 606.664 cv
1263.57 601.872 li
1260.94 606.664 li
1260.6 607.293 1259.95 607.64 1259.29 607.64 cv
.92549 .92549 .92549 rgb
f
1287.32 607.64 mo
1286.94 607.64 1286.56 607.526 1286.23 607.286 cv
1284.85 606.292 li
1283.95 605.648 1283.8 604.378 1284.52 603.544 cv
1287.6 599.981 li
1282.64 600.428 li
1282.58 600.433 1282.52 600.435 1282.47 600.435 cv
1281.44 600.435 1280.59 599.604 1280.59 598.559 cv
1280.59 596.813 li
1302.59 596.813 li
1302.59 598.559 li
1302.59 599.604 1301.74 600.435 1300.72 600.435 cv
1300.66 600.435 1300.6 600.433 1300.55 600.428 cv
1295.58 599.981 li
1298.66 603.544 li
1299.38 604.378 1299.23 605.648 1298.34 606.292 cv
1296.96 607.286 li
1296.62 607.526 1296.24 607.64 1295.86 607.64 cv
1295.2 607.64 1294.56 607.293 1294.21 606.664 cv
1291.59 601.872 li
1288.97 606.664 li
1288.62 607.293 1287.98 607.64 1287.32 607.64 cv
.427451 .839216 .670588 rgb
f
1315.34 607.64 mo
1314.97 607.64 1314.58 607.526 1314.25 607.286 cv
1312.87 606.292 li
1311.98 605.648 1311.83 604.378 1312.55 603.544 cv
1315.62 599.981 li
1310.66 600.428 li
1310.61 600.433 1310.55 600.435 1310.49 600.435 cv
1309.47 600.435 1308.62 599.604 1308.62 598.559 cv
1308.62 596.813 li
1330.61 596.813 li
1330.61 598.559 li
1330.61 599.604 1329.76 600.435 1328.74 600.435 cv
1328.68 600.435 1328.63 600.433 1328.57 600.428 cv
1323.61 599.981 li
1326.68 603.544 li
1327.4 604.378 1327.25 605.648 1326.36 606.292 cv
1324.98 607.286 li
1324.65 607.526 1324.27 607.64 1323.89 607.64 cv
1323.23 607.64 1322.58 607.293 1322.24 606.664 cv
1319.62 601.872 li
1316.99 606.664 li
1316.65 607.293 1316 607.64 1315.34 607.64 cv
f
1343.37 607.64 mo
1342.99 607.64 1342.61 607.526 1342.28 607.286 cv
1340.9 606.292 li
1340 605.648 1339.85 604.378 1340.57 603.544 cv
1343.65 599.981 li
1338.69 600.428 li
1338.63 600.433 1338.57 600.435 1338.52 600.435 cv
1337.49 600.435 1336.64 599.604 1336.64 598.559 cv
1336.64 596.813 li
1358.64 596.813 li
1358.64 598.559 li
1358.64 599.604 1357.79 600.435 1356.77 600.435 cv
1356.71 600.435 1356.65 600.433 1356.6 600.428 cv
1351.63 599.981 li
1354.71 603.544 li
1355.43 604.378 1355.28 605.648 1354.39 606.292 cv
1353.01 607.286 li
1352.67 607.526 1352.29 607.64 1351.91 607.64 cv
1351.25 607.64 1350.61 607.293 1350.26 606.664 cv
1347.64 601.872 li
1345.02 606.664 li
1344.67 607.293 1344.03 607.64 1343.37 607.64 cv
f
297.431 764.936 mo
297.306 764.936 li
293.895 764.936 291.13 762.171 291.13 758.76 cv
291.13 733.436 li
267.719 733.436 li
267.719 758.76 li
267.719 762.171 264.954 764.936 261.543 764.936 cv
261.418 764.936 li
258.007 764.936 255.242 762.171 255.242 758.76 cv
255.242 733.436 li
242.337 733.436 li
242.337 729.166 li
242.337 727 li
242.337 714.382 li
242.337 697.295 253.734 682.599 269.425 678.135 cv
269.425 406.916 li
179.977 406.916 li
169.629 406.916 160.507 401.674 155.12 393.7 cv
151.888 388.916 150 383.148 150 376.94 cv
150 376.419 150.015 375.902 150.041 375.388 cv
150.048 375.256 150.061 375.126 150.07 374.994 cv
150.095 374.609 150.122 374.224 150.161 373.844 cv
150.174 373.715 150.194 373.588 150.208 373.46 cv
150.253 373.074 150.301 372.688 150.36 372.307 cv
150.377 372.201 150.397 372.098 150.415 371.993 cv
150.482 371.588 150.555 371.185 150.638 370.785 cv
150.692 370.549 li
150.784 370.123 150.884 369.7 150.995 369.282 cv
151.038 369.125 li
151.158 368.679 151.288 368.236 151.428 367.799 cv
151.454 367.719 li
151.603 367.258 151.763 366.802 151.944 366.323 cv
152.12 365.858 152.308 365.398 152.507 364.943 cv
156.957 354.771 166.882 347.542 178.562 346.999 cv
178.538 346.291 178.508 345.584 178.508 344.87 cv
178.508 310.604 206.287 282.824 240.553 282.824 cv
251.854 282.824 262.439 285.861 271.565 291.139 cv
284.861 267.005 310.54 250.651 340.042 250.651 cv
369.664 250.651 395.435 267.136 408.683 291.432 cv
413.367 290.227 418.277 289.586 423.337 289.586 cv
453.648 289.586 478.585 312.575 481.675 342.067 cv
481.688 342.167 li
481.779 343.047 481.843 343.935 481.894 344.826 cv
481.902 344.951 481.916 345.073 481.923 345.198 cv
481.973 346.175 481.997 347.159 481.999 348.148 cv
482.002 348.251 li
482.002 350.521 481.873 352.76 481.622 354.963 cv
467.513 367.327 449.447 375.324 429.524 376.703 cv
426.77 376.894 424.69 379.281 424.881 382.036 cv
425.064 384.674 427.26 386.691 429.865 386.691 cv
429.98 386.691 430.097 386.687 430.215 386.679 cv
447.675 385.47 463.848 379.699 477.603 370.58 cv
476.444 373.394 475.073 376.097 473.509 378.671 cv
470.569 383.509 466.949 387.888 462.782 391.676 cv
452.364 401.145 438.525 406.916 423.337 406.916 cv
366.512 406.916 li
366.512 538.367 li
366.512 565.219 388.808 587.064 416.214 587.064 cv
464.934 587.064 li
463.172 593.663 461.551 600.349 460.089 607.065 cv
416.214 607.065 li
377.781 607.065 346.512 576.247 346.512 538.367 cv
346.512 406.916 li
289.425 406.916 li
289.425 678.117 li
305.048 682.483 316.512 696.813 316.512 713.829 cv
316.512 727 li
316.512 729.166 li
316.512 733.436 li
303.607 733.436 li
303.607 758.76 li
303.607 762.171 300.842 764.936 297.431 764.936 cv
.247059 .65098 .486274 rgb
f
608.333 634.152 mo
603.989 634.152 li
601.786 634.152 li
588.952 634.152 li
571.573 634.152 556.626 622.756 552.085 607.065 cv
550.671 607.065 li
541.943 607.065 li
499.296 607.065 li
500.905 600.354 502.686 593.689 504.642 587.064 cv
541.943 587.064 li
550.671 587.064 li
552.067 587.064 li
556.508 571.441 571.082 559.977 588.39 559.977 cv
601.786 559.977 li
603.989 559.977 li
608.333 559.977 li
608.333 572.882 li
634.09 572.882 li
637.559 572.882 640.372 575.647 640.372 579.058 cv
640.372 579.183 li
640.372 582.594 637.559 585.359 634.09 585.359 cv
608.333 585.359 li
608.333 608.77 li
634.09 608.77 li
637.559 608.77 640.372 611.535 640.372 614.946 cv
640.372 615.071 li
640.372 618.481 637.559 621.247 634.09 621.247 cv
608.333 621.247 li
608.333 634.152 li
494.156 607.065 mo
465.179 607.065 li
466.657 600.36 468.293 593.693 470.088 587.064 cv
499.431 587.064 li
497.502 593.688 495.743 600.357 494.156 607.065 cv
460.089 607.065 mo
460.089 607.065 li
461.551 600.349 463.172 593.663 464.934 587.064 cv
464.935 587.064 li
463.172 593.663 461.551 600.349 460.089 607.065 cv
.227451 .603922 .45098 rgb
f
465.179 607.065 mo
460.089 607.065 li
461.551 600.349 463.172 593.663 464.935 587.064 cv
470.088 587.064 li
468.293 593.693 466.657 600.36 465.179 607.065 cv
.2 .52549 .392157 rgb
f
499.296 607.065 mo
494.156 607.065 li
495.743 600.357 497.502 593.688 499.431 587.064 cv
504.642 587.064 li
502.686 593.689 500.905 600.354 499.296 607.065 cv
.247059 .65098 .486274 rgb
f
429.865 386.691 mo
427.26 386.691 425.064 384.674 424.881 382.036 cv
424.69 379.281 426.77 376.894 429.524 376.703 cv
449.447 375.324 467.513 367.327 481.622 354.963 cv
480.999 360.432 479.624 365.674 477.603 370.58 cv
463.848 379.699 447.675 385.47 430.215 386.679 cv
430.097 386.687 429.98 386.691 429.865 386.691 cv
.427451 .839216 .670588 rgb
f
289.425 630.613 mo
269.425 630.613 li
269.425 306.916 li
289.425 306.916 li
289.425 630.613 li
cp
1 1 1 rgb
f
278.932 616.745 mo
258.551 617.009 242.337 633.999 242.337 654.382 cv
242.337 669.166 li
242.337 670.795 243.658 672.115 245.287 672.115 cv
313.562 672.115 li
315.191 672.115 316.512 670.795 316.512 669.166 cv
316.512 653.829 li
316.512 633.182 299.641 616.476 278.932 616.745 cv
cp
f
261.543 704.936 mo
261.418 704.936 li
258.007 704.936 255.242 702.171 255.242 698.76 cv
255.242 672.115 li
267.719 672.115 li
267.719 698.76 li
267.719 702.171 264.954 704.936 261.543 704.936 cv
cp
.215686 .568627 .423529 rgb
f
297.431 704.936 mo
297.306 704.936 li
293.895 704.936 291.13 702.171 291.13 698.76 cv
291.13 672.115 li
303.607 672.115 li
303.607 698.76 li
303.607 702.171 300.842 704.936 297.431 704.936 cv
cp
f
316.512 673.436 mo
242.337 673.436 li
242.337 667 li
316.512 667 li
316.512 673.436 li
cp
.462745 .909804 .72549 rgb
f
554.671 547.064 mo
416.214 547.064 li
377.781 547.064 346.512 516.247 346.512 478.368 cv
346.512 306.916 li
366.512 306.916 li
366.512 478.368 li
366.512 505.219 388.808 527.064 416.214 527.064 cv
554.671 527.064 li
554.671 547.064 li
cp
f
550.671 537.557 mo
550.94 557.938 568.221 574.152 588.952 574.152 cv
603.989 574.152 li
605.646 574.152 606.989 572.831 606.989 571.202 cv
606.989 502.927 li
606.989 501.298 605.646 499.977 603.989 499.977 cv
588.39 499.977 li
567.39 499.977 550.398 516.848 550.671 537.557 cv
cp
f
640.372 554.946 mo
640.372 555.071 li
640.372 558.482 637.559 561.247 634.09 561.247 cv
606.989 561.247 li
606.989 548.77 li
634.09 548.77 li
637.559 548.77 640.372 551.535 640.372 554.946 cv
cp
f
640.372 519.058 mo
640.372 519.183 li
640.372 522.594 637.559 525.359 634.09 525.359 cv
606.989 525.359 li
606.989 512.882 li
634.09 512.882 li
637.559 512.882 640.372 515.647 640.372 519.058 cv
cp
f
608.333 499.977 mo
608.333 574.152 li
601.786 574.152 li
601.786 499.977 li
608.333 499.977 li
cp
.215686 .568627 .423529 rgb
f
178.562 286.999 mo
178.538 286.291 178.508 285.584 178.508 284.87 cv
178.508 250.603 206.287 222.825 240.554 222.825 cv
251.854 222.825 262.439 225.861 271.565 231.139 cv
284.861 207.005 310.54 190.652 340.042 190.652 cv
369.664 190.652 395.435 207.136 408.683 231.432 cv
413.367 230.227 418.277 229.587 423.337 229.587 cv
455.737 229.587 482.002 255.852 482.002 288.251 cv
482.002 320.651 455.737 346.916 423.337 346.916 cv
179.977 346.916 li
163.421 346.916 150 333.495 150 316.94 cv
150 300.859 162.664 287.738 178.562 286.999 cv
cp
1 1 1 rgb
f
423.337 322.917 mo
179.977 322.917 li
167.69 322.917 157.136 315.522 152.507 304.943 cv
150.899 308.617 150 312.672 150 316.94 cv
150 333.495 163.421 346.916 179.977 346.916 cv
423.337 346.916 li
455.737 346.916 482.002 320.651 482.002 288.251 cv
482.002 284.138 481.575 280.126 480.769 276.252 cv
475.231 302.896 451.624 322.917 423.337 322.917 cv
cp
.462745 .909804 .72549 rgb
f
959.819 1172.79 mo
827.998 1172.79 li
827.998 1078.35 li
959.819 1078.35 li
959.819 1172.79 li
cp
.301961 .301961 .301961 rgb
f
970.148 1201.82 mo
970.148 1178.25 li
970.148 1175.23 967.704 1172.79 964.69 1172.79 cv
823.126 1172.79 li
820.112 1172.79 817.669 1175.23 817.669 1178.25 cv
817.669 1201.82 li
817.669 1204.83 820.112 1207.28 823.126 1207.28 cv
964.69 1207.28 li
967.704 1207.28 970.148 1204.83 970.148 1201.82 cv
cp
970.148 1158.85 mo
970.148 1135.27 li
970.148 1132.26 967.704 1129.82 964.69 1129.82 cv
823.126 1129.82 li
820.112 1129.82 817.669 1132.26 817.669 1135.27 cv
817.669 1158.85 li
817.669 1161.86 820.112 1164.3 823.126 1164.3 cv
964.69 1164.3 li
967.704 1164.3 970.148 1161.86 970.148 1158.85 cv
cp
970.148 1115.87 mo
970.148 1092.3 li
970.148 1089.29 967.704 1086.84 964.69 1086.84 cv
823.126 1086.84 li
820.112 1086.84 817.669 1089.29 817.669 1092.3 cv
817.669 1115.87 li
817.669 1118.89 820.112 1121.33 823.126 1121.33 cv
964.69 1121.33 li
967.704 1121.33 970.148 1118.89 970.148 1115.87 cv
cp
964.69 1078.35 mo
823.126 1078.35 li
820.112 1078.35 817.669 1075.91 817.669 1072.9 cv
817.669 1049.33 li
817.669 1046.31 820.112 1043.87 823.126 1043.87 cv
964.69 1043.87 li
967.704 1043.87 970.148 1046.31 970.148 1049.33 cv
970.148 1072.9 li
970.148 1075.91 967.704 1078.35 964.69 1078.35 cv
cp
.215686 .568627 .423529 rgb
f
970.148 1158.85 mo
970.148 1135.27 li
970.148 1132.26 967.704 1129.82 964.69 1129.82 cv
893.909 1129.82 li
893.909 1164.3 li
964.69 1164.3 li
967.704 1164.3 970.148 1161.86 970.148 1158.85 cv
cp
.266667 .705882 .52549 rgb
f
970.148 1092.3 mo
970.148 1089.29 967.704 1086.84 964.69 1086.84 cv
893.909 1086.84 li
893.909 1121.33 li
964.69 1121.33 li
967.704 1121.33 970.148 1118.89 970.148 1115.87 cv
970.148 1092.3 li
cp
f
970.148 1201.82 mo
970.148 1178.25 li
970.148 1175.23 967.704 1172.79 964.69 1172.79 cv
893.909 1172.79 li
893.909 1207.28 li
964.69 1207.28 li
967.704 1207.28 970.148 1204.83 970.148 1201.82 cv
cp
f
964.69 1043.87 mo
893.909 1043.87 li
893.909 1078.35 li
964.69 1078.35 li
967.704 1078.35 970.148 1075.91 970.148 1072.9 cv
970.148 1049.33 li
970.148 1046.31 967.704 1043.87 964.69 1043.87 cv
cp
f
964.69 1164.3 mo
967.704 1164.3 970.148 1161.86 970.148 1158.85 cv
970.148 1135.27 li
970.148 1132.26 967.704 1129.82 964.69 1129.82 cv
943.157 1129.82 li
943.157 1164.3 li
964.69 1164.3 li
cp
.462745 .909804 .72549 rgb
f
970.148 1115.87 mo
970.148 1092.3 li
970.148 1089.29 967.704 1086.84 964.69 1086.84 cv
943.157 1086.84 li
943.157 1121.33 li
964.69 1121.33 li
967.704 1121.33 970.148 1118.89 970.148 1115.87 cv
cp
f
964.69 1043.87 mo
943.157 1043.87 li
943.157 1078.35 li
964.69 1078.35 li
967.704 1078.35 970.148 1075.91 970.148 1072.9 cv
970.148 1049.33 li
970.148 1046.31 967.704 1043.87 964.69 1043.87 cv
cp
f
964.69 1207.28 mo
967.704 1207.28 970.148 1204.83 970.148 1201.82 cv
970.148 1178.25 li
970.148 1175.23 967.704 1172.79 964.69 1172.79 cv
943.157 1172.79 li
943.157 1207.28 li
964.69 1207.28 li
cp
f
649.391 1174.88 mo
449.928 1174.88 li
449.928 1054.32 li
649.391 1054.32 li
649.391 1174.88 li
.215686 .568627 .423529 rgb
f
481.567 1151.71 mo
481.567 1148.26 478.773 1145.47 475.326 1145.47 cv
471.878 1145.47 469.084 1148.26 469.084 1151.71 cv
469.084 1155.16 471.878 1157.95 475.326 1157.95 cv
478.773 1157.95 481.567 1155.16 481.567 1151.71 cv
cp
.462745 .909804 .72549 rgb
f
506.465 1151.71 mo
506.465 1148.26 503.671 1145.47 500.223 1145.47 cv
496.776 1145.47 493.982 1148.26 493.982 1151.71 cv
493.982 1155.16 496.776 1157.95 500.223 1157.95 cv
503.671 1157.95 506.465 1155.16 506.465 1151.71 cv
cp
f
529.649 1151.87 mo
529.649 1148.52 526.929 1145.8 523.573 1145.8 cv
520.218 1145.8 517.497 1148.52 517.497 1151.87 cv
517.497 1155.23 520.218 1157.95 523.573 1157.95 cv
526.929 1157.95 529.649 1155.23 529.649 1151.87 cv
1 1 1 rgb
f
628.703 1157.95 mo
579.297 1157.95 li
577.259 1157.95 575.607 1156.3 575.607 1154.26 cv
575.607 1154.19 li
575.607 1152.15 577.259 1150.5 579.297 1150.5 cv
628.703 1150.5 li
630.74 1150.5 632.392 1152.15 632.392 1154.19 cv
632.392 1154.26 li
632.392 1156.3 630.74 1157.95 628.703 1157.95 cv
.301961 .301961 .301961 rgb
f
630.236 1120.12 mo
618.439 1120.12 li
618.439 1131.92 li
630.236 1131.92 li
630.236 1120.12 li
605.343 1120.12 mo
593.546 1120.12 li
593.546 1131.92 li
605.343 1131.92 li
605.343 1120.12 li
580.451 1120.12 mo
568.654 1120.12 li
568.654 1131.92 li
580.451 1131.92 li
580.451 1120.12 li
555.558 1120.12 mo
543.761 1120.12 li
543.761 1131.92 li
555.558 1131.92 li
555.558 1120.12 li
530.665 1120.12 mo
518.869 1120.12 li
518.869 1131.92 li
530.665 1131.92 li
530.665 1120.12 li
505.773 1120.12 mo
493.976 1120.12 li
493.976 1131.92 li
505.773 1131.92 li
505.773 1120.12 li
480.88 1120.12 mo
469.084 1120.12 li
469.084 1131.92 li
480.88 1131.92 li
480.88 1120.12 li
630.236 1096.31 mo
618.439 1096.31 li
618.439 1108.11 li
630.236 1108.11 li
630.236 1096.31 li
605.343 1096.31 mo
593.546 1096.31 li
593.546 1108.11 li
605.343 1108.11 li
605.343 1096.31 li
580.451 1096.31 mo
568.654 1096.31 li
568.654 1108.11 li
580.451 1108.11 li
580.451 1096.31 li
555.558 1096.31 mo
543.761 1096.31 li
543.761 1108.11 li
555.558 1108.11 li
555.558 1096.31 li
530.665 1096.31 mo
518.869 1096.31 li
518.869 1108.11 li
530.665 1108.11 li
530.665 1096.31 li
505.773 1096.31 mo
493.976 1096.31 li
493.976 1108.11 li
505.773 1108.11 li
505.773 1096.31 li
480.88 1096.31 mo
469.084 1096.31 li
469.084 1108.11 li
480.88 1108.11 li
480.88 1096.31 li
630.236 1072.5 mo
618.439 1072.5 li
618.439 1084.3 li
630.236 1084.3 li
630.236 1072.5 li
605.343 1072.5 mo
593.546 1072.5 li
593.546 1084.3 li
605.343 1084.3 li
605.343 1072.5 li
580.451 1072.5 mo
568.654 1072.5 li
568.654 1084.3 li
580.451 1084.3 li
580.451 1072.5 li
555.558 1072.5 mo
543.761 1072.5 li
543.761 1084.3 li
555.558 1084.3 li
555.558 1072.5 li
530.665 1072.5 mo
518.869 1072.5 li
518.869 1084.3 li
530.665 1084.3 li
530.665 1072.5 li
505.773 1072.5 mo
493.976 1072.5 li
493.976 1084.3 li
505.773 1084.3 li
505.773 1072.5 li
480.88 1084.3 mo
469.084 1084.3 li
469.084 1072.5 li
480.88 1072.5 li
480.88 1084.3 li
.266667 .705882 .52549 rgb
f
649.391 1174.88 mo
504.055 1174.88 li
568.654 1129.2 li
568.654 1131.92 li
580.451 1131.92 li
580.451 1120.85 li
598.477 1108.11 li
605.343 1108.11 li
605.343 1103.25 li
649.391 1072.1 li
649.391 1072.58 li
649.391 1072.58 li
649.391 1098.29 li
649.391 1108.29 li
649.391 1128.29 li
649.391 1138.29 li
649.391 1174.88 li
579.297 1150.5 mo
577.259 1150.5 575.607 1152.15 575.607 1154.19 cv
575.607 1154.26 li
575.607 1156.3 577.259 1157.95 579.297 1157.95 cv
628.703 1157.95 li
630.74 1157.95 632.392 1156.3 632.392 1154.26 cv
632.392 1154.19 li
632.392 1152.15 630.74 1150.5 628.703 1150.5 cv
579.297 1150.5 li
618.439 1120.12 mo
618.439 1131.92 li
630.236 1131.92 li
630.236 1120.12 li
618.439 1120.12 li
593.546 1120.12 mo
593.546 1131.92 li
605.343 1131.92 li
605.343 1120.12 li
593.546 1120.12 li
618.439 1096.31 mo
618.439 1108.11 li
630.236 1108.11 li
630.236 1096.31 li
618.439 1096.31 li
.2 .52549 .392157 rgb
f
628.703 1157.95 mo
579.297 1157.95 li
577.259 1157.95 575.607 1156.3 575.607 1154.26 cv
575.607 1154.19 li
575.607 1152.15 577.259 1150.5 579.297 1150.5 cv
628.703 1150.5 li
630.74 1150.5 632.392 1152.15 632.392 1154.19 cv
632.392 1154.26 li
632.392 1156.3 630.74 1157.95 628.703 1157.95 cv
.278431 .278431 .278431 rgb
f
630.236 1131.92 mo
618.439 1131.92 li
618.439 1120.12 li
630.236 1120.12 li
630.236 1131.92 li
605.343 1131.92 mo
593.546 1131.92 li
593.546 1120.12 li
605.343 1120.12 li
605.343 1131.92 li
580.451 1131.92 mo
568.654 1131.92 li
568.654 1129.2 li
580.451 1120.85 li
580.451 1131.92 li
630.236 1108.11 mo
618.439 1108.11 li
618.439 1096.31 li
630.236 1096.31 li
630.236 1108.11 li
605.343 1108.11 mo
598.477 1108.11 li
605.343 1103.25 li
605.343 1108.11 li
.247059 .65098 .486274 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 17.1.0%%For: (Constantin Rassylnov) ()%%Title: (\756\741\753\740\767\755\740\737 \762\745\765\755\756\753\756\743\750\737.eps)%%CreationDate: 17.05.14 12:11%%Canvassize: 16383%AI9_DataStream%Gb",KGsg')oD%b`n/gkGJj@G+!%L,4"[PEC`mCSZl"(BRI/`oTp>=)12VFm?'79pd5"0fmp6s[FG;kq^caO.]C;"bPDu[/0OY'/J%XN6j-AQ7Jd1+SeM2a>&_5BM6>jg(%$lVq!2>*c$q%682sQL7a'[O[!-gZfl&gD.3L/$p8_DJq+*q!GFDHd2e"EAAWk7\fo4PA`FG%X1A&]Ndb$32r&GcgN<90,:ap24eo%GH;FjHj*(WqB0/h<*4c#3$k!un4qG-n@Wqgr.L,g=nAUW6b>R8VY3;=F=a6`VH-J)[U"U,E%/^$sa*PSJbS769>CdGn#U6W)J05.D`U16Jf2_7>8)H]nRK&qTcCV6;E%;K"lQ>@fte6kE]50%iUSh$h(aZl+DS_#P1=Z>]703H3A%TF/DC'u(EOQ]-BE.Z16)003'`G?./0Is=tkX#aP:r@q\sb<Rg#8.icBl71:+eW;Yi+\NTSTh;V-a>%%pL1rs`Gg"!o=.]CCHoc@&%lFhYul.=[l06eqTA$D@bE]Xb`_rRu*iPNQ-dB,E]7\?qN-7B%)qhl>,I(t;a*`W7]4Cfc,+8Z5;QQlH1AGdM`)ubTLQ&M0ZW1/El%,'KZal\:W)Osofq*i^Np^OUr)IQhqESVGU;8X:(.[^%s9P,Tm5I0ec]!P)V"'cY+e;WOn`1QtZ^dfP@^'`,oY#GUD\XLl6u1>As1%Fh:>aEo$^lrEg*^fsJu)-(>cTPF)cb!f)D_gO7\RpOS>/Jo!=uHgRifJ80Nhjb?-S-X][;XMD*i]l<kA3nfPocH9>1P.XG+#0gH:%[u9N:Q<4[p*Og1H5,$BHTMeH('T$]W=]IA:V;Ml]%OB'BJCFer#+3R6i>p+SCMXEKiglJ9+&(PmBT;t.rM&.P6UeHcZ=kqGZIQ'Y%"+=WF=6tp.b$)[*jtAW;+@O!5[QN9bb#r.Kcq@8[mtc+*HoYl3\"#KW;1WmV.9J9u4GZ>)kk#m_?./l1[bZEgq;6V02`ED+T;pn_%@Gnb7j*RK8Th#uIa/c4t=&kMk/XN_#X(<,M$8j!@@k#=2;MJ%$o/:G)bLe_=Z/H4/gGYA'D(LCun/Y.:$<X<)^m]rY?7?Sm9Y$*`%b@ST,g>t(r0:,f^2I\RN2BLEo]8AKAFVWOGhm!mTK^W"MET3@kCPWS:@i<2jh[sd%$!%j^_KYp3(u[Qb`9>-C7Z?gWn]"@X,#6c<%UF,:K9-IX:Nb-@EK^nlSOY[n3.P`L440-IWB;9*LB4GGbj2h$9nIk1!9-JcZN\.LRA6?0RCrYrX9-Jb3L)Eun?,R92nJ>ZTjr`L6%a:X$m=:4T9G;bA<9,Lr;s4ARZ!?=,_+$O=RI#R>mMU@F4Kji7rO!A;t@f<Tuq0]F[r"$snG+:?#406]2AlfR/I)f-D^C`\"'35q,%Ymb)#2pXLRb7:9el[a%7k@)XdSD/#DN)LQHE4OnJb37,?a/I;[ATYhPo,6MsZ*@dfhE,MDeS!Le*ud5(9ZG=nc5CJ$$YB0Er#80g%X"u]\V)=>c:8`X:)0^/9&,6ZN#<]pN4d]eUj^9-K7%BEB4.ld".j$G5QaP"Ob-FEbprTn;m/8@?]+TLs5>>Y&K2;2"2m;NU&q$uL%dq$4G:\JF(m'gQr^+Je,QXa*K:\L.$ZerSHqjX'.()\CmA:LEgq]1'i5KWq8qAeZ.hq>ZJhu";f"T/t9T]pc*rIYo"^H\e[WO5`#%bpU9!G)B2H>T7@MGr-*s4fZJ+8b37rs01YAofYGoG13iH77-ISp@QS]c.8I#$,,Z=Ve="e](VpjkZuf3Sf,/ng63_SJ(-Et6W`mZ%^$f['Z(]l4@UNo\;U3G$Vks@$^992"=RWES)ol5:8e>31>4Qq;CLf`D7s)e$!?V[+Din6T'emt#b;mb`r7ZRsQZ)(^KAJHK%5B6#%FboB%*QHWB<;TT3V:l!!$0NLkU(g,pdC&pR``&=IJr\JMP\ud)[f3A+T//sElb>F(M6D&l?2m@./X<-GbbRFOeqa,D0,GDLCFN>Z%3Mqas:2Mf0d:[23okC#[73_n>b++Zhn"NcJ/k`?3NmFEL;Rn4!AWK;;F4Z^4:>JdQ`Sa.l4AlXO$3+\A(`!GL4^(J-4LQH7fGa`I%N.>ZbHla=(W1#\lUcD>q+*B#,g`9$F*EpmZbQo+BAu>>\YI<l42#\M@4]551I4g(H;rj87qKEYBc->:miHVJpVp?XWAV`GZZB.G@%Wc<="li)iW]S)?4*mgrm<)h1%NKKD!OV7t0-9(D8@%P-;[SL8dOH=A:D`s1c?Y@2&EfZ;:dJ52AIKbk.aaB"&(<:8Q8MQterY?pA%Gma>-q.i?-,M>Hl@p-Z=&,7O1,>Tg*")UT$A^;icM$)f!)eTWY-h*Z>5B5c"-!H,.]bdHY5PKVfHp/*3Rd[nF[5dKJJN7&N[[.`7%m3?I>4C9=6R,&9:fijUFOb,*<KQqdtC\-8sVoE<W+Z,ZF=*2\6>/4D5RL!OX#G5$L=!e7H1nq(2f'B)U:%p4Oqo%/Q$0<oi>dp,3%`b@l/TtJ]S)X5[X-3K+0Bn#E1PR+]>n0p);cB[BH:;Cr0\:hjK]Q1M?U@U*0Y!YF*N9S%ZkdjJfQ3)?kr`AkRite(";'415:s\Y#%:s*$Y`Rp>Np5ZW)5!@Xg^S,S8\:sG1h?0ObW5SiGe#+77U3m3SJ=r?U2>de@NQEU>)ZOuo:W>oVPHjW4&YFD+#SI@A6<"NWb3'@f%Q@ef(optU#__m0UW0qU*R>bMIL"_+X_H*faT>T'g^_(.t&b5i+]eiLU-n!q#kLd<%_qYmWgoq8,rJ<?Q;o0UA9>l0^@Gf=r?#26+%#OSb)-i-4C>"*,F36$kDA,K9!<B]8)VBPaCV'HHU]lLr5Y<Obe(ZVb'c^)7b??D'NJFo9O`AZWYiA3s[LZa"p8M/jMlG`HVebeL`%\oF@)H1gfTHLGmqgB4#4[hs)&OIYRoGn9%aP_P"A(a8:_CWBl*]\P<72YT$sD3nQr`9Gc*8#YrT=YSb/&T\q?jWgAu[m[C;d:cX_%E]Z2U22^R\[0-:OIdhKGGho"\I+Woi/bAKF3_K.dkSGmQO\D3^)o'A87T^U_FP]PQFnGT1<"dM/M:t4^eWIL&`"f%2Ffq.,1eRKL%pROVqBV#aucSt^^_kdE`-,2*6eq`fJU<gkg,PDPaj;g'_Lbl`r=M6WhC0IX&"-1`]\2MP=^(66,8;;=N+5h9A;bF-_pSgYp1ospP%d5F=uMrBB^\\1s!O8'*obrd_s:QpB+k3[G6%bD7hGn/m^njt'%UDZI,K(D8r[uA`<EM%`R*<OMF\A&gB^CFr`T5-h9@!IS@msC4p%&8d7F5AI#/dTHNT46V:*TEi$!Lc"t7j7.aSk+Db^NV/<@1hfY,iV=6GJmR#`28bNapcI1QbRkH%4G4M_-!8>s2!=TFeHme=-l%L/%K\(*$p@ga*HP"Va4Dttb).!H:7Q89,bOBgki$iU``6B%o%/cEq?5T,ZTN9@TJ)8>Ak4?-V04XVUAfHLbOP-cZkJ?DbO0Lg](.kK(%76V"+!Bt?RY@rW;ITsUSk"q.dqR"a=c7EE/gak3a6q`Kg%a],;a8@2;WX1LXN.)Y\k:&4hPRIDC+W63b3:*J2['1Z+(@Bs9Mk!P.%<WEaCBnd4i`q&:9^HiNX6g(ced4Jk86Q0^u8epL;7rf!8\Xtn/.3B/Q"^!jRjd]lt5o\n\]HJZ@Gn@Vo@Eg"bCM&\=+`?d'o49=a%*I+*U7+Ym"/[eoc/J%]<eH\-U^OWMB&g?Ou@*_,D+5n'!7?:lKo]+<:'k<;'a4O4k&\Jim/!c>"(CO8?SBE'/!SV(s:gj2D'ps/@%e*$t[j#0!#M8JjY(/3Y@,[O$u/HHnI=bn'#gI87O[Nt:;$e12-4`UYdmLA0/P)&dFImK"<@M$LJ`gdk??mK'0G"AKoLs63C8W"R3%OV?m>R;G4769;=erW@%7'0'D[9-n>L(i:#MK[EgSNRSN3O1)D^'GU/\=4[RH@B8(8]_@gEj;A[L&!J*3nMq@@A>=6CXKLR^g/uS=%F+Upin("[5;`r2+U-=WQ"FLMkEb0tiHa2mm[o?b"(s?\^O_SRD;s%$-H._/`Fdru^n'$X.$uEUW=*0/l8osU!3+8Vs&U5EfY9A?d%IZUH>P4qjCg5Y,.EP>mH,?!t"J`eg<MAbLYd7OgEE7be_io`%d0Oe+%P$ZL<gb`KDA4QgA9(5YnORmY+j=JRcpl<)KY\%Dt"o/oe%^S;#j)Dc]#S!(.rG[?20i:'`dcNgTNBP\]Vo0S,m5)/8G"PNkUL&$9gQ_YYm+^XbfB%C<Sdl8m&S9cdCE35[s)Ua/<fsB![X_?id%bY",#&Sm>Z4?i7OBL"55hcL(Y>d"jnZ9rqtCQh_#'2F6Gfm+C8Ha%l*b.8=g)]6>Hf^W+jaf$6T2ge'd6=+?MCJe>Z%!#Th7=&&h%`+cOp>E[-1LjjB5j/O:!IGu`3puuQ&JT!9+7,J:8Wo;9S8c^%'Q8ft>pJS8A8+)2uWDTp69Kr+fF!'KZ:5.&`F4<C,GqIALq%585%dhL14^9<?@q0P+i?(`uu]R<?5o5W3AR!4AKo>]6AmuQ<!)5?g\p`.RG#Hdfi$aF96jo3s-d%90[*lI4;*qp$+]V+shO+Df#@Eu1*%,<Q-lYPe1<O!SYWK'i$@$#>;qp;,JuPcP==)=]NOkF(n2(8<(8q"3s,k<"X]$=Cfj/a30PF<m3lG=qCNnM7C;H&#8ocP*7Ra3Buh%_oonm2Jt[XhaPe_%s(BcmX;2KjInpV,.\`9cY5k]8"UkGl7&'fk/=qK&\W09%3]9]_;bbq9Rb[OV_TU)nG+`qoMBF3p\^=6;1o]+%1Z*gX;/DZ``dD!Z;Ep+r/7<kQ?'TE%CbHNU%-J'eT:F5Ur9:j[PV86[83qapg`GJZo[*9:<:G-\oM,bpmf^=siOU</&%rur'#U"%%V$_R2`.sZ<n!&ctDU5qUp?hlTcnLn1ebF!%^1KI[0K4_cn0E\bNC_qopa4&jbgl4>3NO`#&`K'!h;QFaCi3WC+2lY=[mKjD+04a>%*QaYpV7bu2rAWVbo7P'gSA29e9U5k[_*<'XKLR"1h*^;@]:i\LfRXPHMudNS?`)Xt'&35Q@odd&NlPSa&FV]Rc3q:0i]g3X0eF)Y%8Dr=Eo>C@T:gWZ1\j>\PI<muu23/,%IX^_2I0[-;*hCtFFIpr%G:\tM+*h2+cM'9]<`j77'(0J21&b4P7eCmgZ=]egULJT/.=5s+%AOjH@m)FPE*IRh$,"\Yq3>Z(hhQocK!%uo]q"`Kgc(6$I.Jf$8@JsC<F?rm?_`E[G?,DPT(].DCGc(!OI#GgP/[-A6M1IobTU$KJ%heJbMER9Jb./E`QK%`>ujSZfh;tL9e5O_dRGAdW.N\PFjlpl"IikP=">R-ob%&AudL;@BX+S&%[EjT^,>U)>-0fB:[\pq`<pC)Hk%nP7b^B->hhigkf<PO1[Mo+@[Y`pceAn'S^TfRKQV8;u[ndeDkOhtoe_[cf;sF9C^td=&<+F#pYPm$rqYY!73D-%,'P:\8hRU5fM$%"lIqXHPk:W3rQjB#;"36,_fH(/oe%&:gST6d-[OZT^562QhSSa0K3sq,\g#%Xorkmd+oDD<qte.r]Ah"i!CG47^I`=QF"G@YbNj9%p(QM;[mo4G*bk'4KAk(bUmJW@d"OHrj*fpA^tXcl^IHG=c&qj2<8Jeb5PXb@SpQZs_1qN[_4""RlD-V];3g;hF#i9Ud_1jhrbU^c%)%3AQI@H?^?hEUQDo0'=lhV+N-h812N&h3>Q[LA3GQJ:$[/N@]mW!tVA(H@(Y7]CmSU<mrR;dn>l\;)rR>11^KWt;K^4YM8G*Kk9%_$Vcce;i/dIMUF;X&4c5rN@B4&+Xk3s4c#lri$ki<D$s(KDf_O-Wu9iEao$>AJl3+%.\>nB@6a<Se6kT4J#<56Fp*VE!l-FQ00p+%l@G8jZm+,j6R.W:^Si6ffO+443E7mJ7l@.[^!%RH.OD3iQs(Qn!9O<rQNI-2p1NlBWp!%OPfe'<+g/lmS7)6.6QeT</3U>[^/^?7%ZcJ`88j$UUm`mV^F-1%>7S</JIB>FJ';6cC27]>Jk1=k/N_u/+;aibd*K*INi,dCsA:D8DgBT[W1D-@M0e[FjfF'[Tir[P6;Zu?n%)0YMQaBnDa'^gH\Gp\Xq]RA:dEu1*[k$s0Jn,fe-S?J;X019,Wa-:"Mn7KZ51:'EH5Q(JX61'cZTpcQH+\qT<CQ#BDBWo.r$Y>ob%*++&o?APKt;5*3e9'd5[N=aP%UM>-\U3^.!-SO*845eCmD+GELYu[''LZX)>Ul=fIo9%?R1,bjpY_(,@+SjAI*6*6t0cE@pA!Xo#%`q/Z/Rin[6IE4'4hVW?:DAi>/=GP8:-*I%Nc3lB<9_d,cZoC!o?&aqD6BbaOf_O)gCP1]^8"L`[=cJ4Vq2NXCWnM1M5I'YhPXn%0%CMS]iT4rHgrlr/IT.Wj;BC85Nge_k5!S>^T6D!Fb[DR[KSu2=takHJT48b)PVe="e](VpjkZuf3Sf,/ng63_SGMW#cbh,YASeMLE%le:Xf*D-@AN%$LLF8X1/dc^#kNHYteIk(>cS*/].j:h9Tr)q99kdt(V]r03#QWdC:Ql5d%BK,HQF?TVjZ\*/-dCs#?r9nahaR'L!%m.kMjqs7#r9%R;B(q$n5FN$:&BFNhI<jt6Um'LNp\V4:rII:]Bge,?;XoI]f1]-@miQ#D>JK>>i3USpCBE3MYA[5(EZT,D(El7.Q%)0QU,dSKk1>eB4Ng>-@;SO#oNT5LF[&XrA9:90gDFh4.)V@OS?bNWUEm^Ki5rs;aHTN'9]!)(_<g[0-63)kTh6ol/`5e*&Q,H$$Z%aZ&!U[HG$DIYJ*Q@*.dV<Ud8?h+YOEkZqe\g[0aQD"s1N\d'Q1QCj+"%]D^0^VpI8glke^g/G0/T=A4#o]R@SiZu!>E#O`47G$d/%egk_\`*E%`@b7d#=ML?gm7+e@%/<DE*&uc'^!^k\IeW\V1\Kg@9%>sN\Ii:5[`m,PVdI!iXe0g.DVZ<`I5h88HE.CcIl++uh1.cX%Ad=qAS2n0&3\I,R^FW=*,JQPC$rk!?gfIOrCOK>pQ]=hLb4Pt30Xp=sc)f0l^>I[ne#p:W[90WjUILgBmr9/p1CO4>)_JS,![R$]%cNek71t(sMC9H<6+se_*ogZ@T[d^kk=ks*1lX.Q=rbo_sH#>p6V"r!Rl4Gl*\d4YukqiUGd'%c'IlX6&b@sitkhI\s4HVU.](M!)%IPMPKgoY(K!f,[T_uG,i,L>bIjVj[_k=eXhTO(>^!R".\p&@T)qEK0Xni"%=_NW7Y&ZLm*U1Yc"UD,2jS-"I;d;8bIpNus)=iF)\%#cj.W$/Y5)j3_T`p$6#H'!^Xt0mr&*MJ3M7^3,s16tBJRk'j/qr(Ma$=SDG'7on%OYrR#SDRo*4(]ZXp:u[Vs[uM,Z:*NG=[l7ur%0W;Wh)Vm,WYk"0t-7V+O3(X\bK,m>D>FpGAp7PW0\!YpACfXahb\HGR3,.HhK!DdHDV"p@4rK!GjCCkN]erEcKr./H6Wp'aVao-1%U+"g8!6CR!m!H/(ehZQtJ8#cQh=H.gRfuKlJ8%n<>HR4A(Ys>bY4lNO;[bF*)_r_?MCAn#OqU9jLhRVZ?#L'^&^r:?RRKo6(bob!%+C[rq_o,&=/':i39R6B1gGlcdWpO0B][W0\(=L2tdh?%Aqb2"uoNLEg0>,o?(>YU*#=jq(V@ZDX3]cG`_'n%nKl64B1[+Ms:+JOI%X%@D<PBj0s675k'67JfLH4!)A]o+F<.b:4o4k-XbH>\3@UJITYmLr>o,e+;*j)?MNV;5g/f7%"cNY4bWn@Of,F644LFiI$[bO,hN%25fFT<Ld$5KM'Rdr*#l9:!3?c;'PO;7/XL2Vduq3<!Nl1>A1KlIA`>3RGf'.Y`>"fYL5Y+G0@Q/?9sQbo(!s6J\OUYr0pB8J+"R<%P>dHi6:9fK4jDpb?=\=+?GJk=hWjR,8u169_Tb77"E;sKmo/;0Ubru&C[pgcpA90XNq>p4$0A(aM(u/sc(>]D:0-U\U\lWnoN5],%rP#<H]RP&?XIk+0UTu!$d'^uk\sd*llCI1aWF*Sd](Q&6e*X'K@4KK(HG<ou9j+7JVj#(U>BW_M:Pp%&7`mO#?FZc0gN0tC0%+Wp%glU"eFK_WmEs%fs-i$^87\8upR?7@mBs<uOA6Eg5XO(iDnm0lG2gNqcE]93GaYPX*LS)`?9T4GD-6J<93n='L"VH!i#u?(GBGagQ%2k1RT\l03X,u;FsY9Kk%Uss/UY$B:r[r[E#%nj?gPN2Jr$\^E96PH/JDW6o)`1\k`6T5Zq9^bHm1e1t$<;W150.0H-aSsHE!d>or%;n"p\rgY?2_`j86^A%.KFRgd/.67j-ls!9==m5GkdDEg@N+<nThI'%=.IL%P'*LI`EoZt$m5U_I>EO[+-[1:E4ILC??gf9#0X47_%LWKo9KhJ>oEZ7MdK5PIs@U3HA`pGDn-*M8n)m/';G@i.Yoj4QT<*Xh-_4K,D,#cm2TW.!@UPY!^U^[9i)>Yh<^*_i2hbptr]\Gp?%[Y_DNagn=k[k3+$DKC#tXU9=$Ec7K+:SO^Y6hs=8r"MZqVWs0Hagm&G(Z]*Hrh^f6MA4UhD:PW9)i[h/6Q1/&Fffg;)$?d7))MS.%f),Y5`3QkeVV:h,r#Xs?KES=DFONeq.sUq1glllJ0L*5-2`10F.1-m+FkjP\3V^^0<NC7i,ZY82r/q_,Nb[Bn1PPa*WB3(ncuP]<%%I=h-;;#`_fUsd[]_sC/ZK,(cgk^_#R_Ue6IQL!NfY39:0q%OomR8%TdOTK2m_%#K2q&VS)qp!1V72@dZ"D`5mU57DHa!r'"V)3<%!LR_V\?f^W)YTRun\("<+B%!DBSuLLgqUmC<UR[mL_MgB]ZHP`N=a3<hLog#QtC,rL?g42,=LW7CkP?1_e^R9Ca6l7,K,#d#U/*_%N=]fGgVd:8Ha")+"V)47dn]'qLbt?g<6i6k)^-^*?mA&H*%#!Rs4/[<o^(U/1M`tT^`C\R1u?"uc*j;`h>][ps5ojWVL\"l2h4!T%I/<<!QJ4DMdQJl$rao2BH7VgKI+Y7P^>tm@)#$L<ATCkpnN&VXQmo!($Hi.9<)C\=cP4l&6-U+n>q2dN(B?5rC8RWk<'Rq7KerBY%;burKC$%V(eC.)Sc.(4\W@)\Rj6Us@?RLO72uW+<kub`i8Osa+1&iUI,T5p9K`&#GLb<92jLnn/dDIfq^P&>j^Qij&m%F?=gGik+%^X)oATr_J<A+g1hGe/"QAp`T)qC/sT7D2]DC\?9BkKA]$KfZBc0;^br/JPmN1LRPYDiEMkF[nCJ85e0J4)[g0SMtj8]Qlpi/lQcU%$9?'W'INV3'fU(6LteMON4c;a)-M`=.0Hbrp^Wq^E$99)48eQco1sjcMb3GCm_r,:DE<Zfm;8>,Sp3?e>I@C<nNX?_HQn;2WU`/l%@/k@8@D\@U-MMmBJ+.]O8&G:E4\ksa*Pk/7?]E2\$)GTs'6p&4.YRk-h$*hVT_bUp*c^DtA5[j*?6=1NlD/3dM)Am?\)+l9])<<Y%@#BnHg5'/e9\N4rk\Zc*g@V2sY;_BG;cfq&0O(fPX]S%n/H=iq_.G3`'>^cV(!FuoI(!KE>HnTH10_#RL)%o/FL1r!MPW92]3;Hb%D[tAM'koh%B/a%kS;<]QKI2:_X-Bqjb1S8@8Gq@_UXB(+8H)*Wij'*H="8G&]]?&JQCks_HaR1\%=2och#`A?PsR`j.SLs_9SebX%h5!)2q"AQOZ7[2?CZ$#,`$S`86FGIA)FfdsVr*l;7H?Y(jI)j.B'H*o3[oKO,)&ZGb:1\V8q5NLS*hX`:4H#q76KlP?.WqqK@f7g%K?^B&[+BfYgC:X,hK>mbmB4nV\Hk8i2Vn;E7?S=4D?G?`bL-YbDdV;%A5o(Klch_Fe5Od`(!I'B=dGgbVq?20D<G2AO=2k#J(M$a%;oI7[>4,grAJW?_:a"Z]\.sf/\i6rgr79KWP$,uG2glT_\AgpoN&So-595P%YCfnQA!X`ojXt/UMcoIWQFiOG/nVYPqiJGZ1)2?a%i?^6-Ke^bV9T1>Tb?ZCT0(-SY:B(N^8P$N7Gqm;Qk$G2((f+siJ%nb?:]1=6Rn^?HOe.u\,P`c`=AS4Er"S>JB1MO]@d'#%,laIk%[/Re1a\TV?Ci[d'UY\4Sl6CAp1KuadWbG@Jg$JDfZeN[YN5h9RYmChQVSJG@DC[NF\!9NLK<ne)U`.#hF[#c5Pf`<_*F1_Vp93.:%,=^ZL[C9PS(WVu.D[eNbeiZ#2I(`*BIW/IJq:U-pk19>U`R%,S5B5oe9If@(X<)-.C-B%eN8A]Xl#c4?M"*[fp:oR5s1phS.jo^B%k2E18rDPBRZT)XXiZMBfjqF0P=1t&72iq,-p2d'F$61\S<-rHZEjq(JMQA18Ohs2l$g0'sVPj3DVPtmbKo^Kq0'4\uE/udU`[hcW%\KSnUAcf'ubljgZqCE:6+VEebM"*#0n@oWk:<G]C1''<fJ6=5W5K%Mh-dA6LM2gG*;,BA\C0dacG8bDRob;aU=firQn@!6QPKMe<%3HFHKmZ75;IUuJ&9oS5=fQ"TejsXl@nEm.1P.+Q%#0hSS^7T,$&^0&1DUE:k*B_W<Sm1Wo56c#+Os3)I'Yf'98P[<#r;C)&i%Ve3%CU3&jh)f1kn!#4YpZLB^C%Uu_egZf%l]a5,[ao:S;^aLQFU,P*n'A[SVYo!ug#PZ<o\1g(R<CXCi!/`Vl0j:G,8l^*62,cR!1c,E%BsTW+iM=JDZ[4ioS.4T*K^a<.E+[e@pdDn\fLM/1LPanYPQHW^h*i"pUpEq=>GiSSSRMq<qhS-aqajY'r?OmI9(M0>0aF8^+(U7,%d*fVN6)3Z!T7%n^))7tVJm$;SMj\03e&93EZ^>G^*;6@fR?F+r=j/^\R;Rj6pLi+*I>jVXcdPZee<Gp9/81IU9fFa0Z_2"J1sLWL%>7ERaHOr$1_-u>UVA4BV_ktn+]6_kI;CK\ENL<\h^as5hWi50Rg^-0t,G1N0T1gd_rg?>VHK'Bsn%ID2qeI.mgGj2&-TFi8)Z&oH%%(P\PC]ce+p2J]mo7g2S>0em!]AllUrSMC)nn>`9mo5?pB>ncgYZRnqk>&[KUdJYO7APn/2+8.@P3eBI/ac9WmuQm419jWW\;rP\%7lU;qg^btoNR*gbFd_AgD5nu+$e#Y=J,>)Mj?S>\OfcuJd=ZL=6ljY^'8R?dj.hKq`jH-g^AS^taWBH7>B;938o2A@BAqgW7\BDE%KG/9";Enga*o?+s\3H%?=-L&0ZohOkG&KE^,C[l_4BoP@"FCIt/UpPZXI9$Y+T$SnO.)\#2j^;/hK^3GE<dH<;r^mSVpfOof>/u9%1%SLZ*m9')=Cr&dh\a7n-^dosZ!?`H^Ct>pmn4/fVY7,e0MbEfG4]KBpni9Wr2:e@l*8J"+4!J!H4'Yd\dS4-1%\=9k2OaqaW1/U%4046*=78h,:Akr!Vd&Us2Vg36<1aM]Q9%T!\`Si8Isu"Qma@Dt:ed-gb>O_dR4Z#YW_]WH9<E2GAo%N9R[GUo2H)Ls=k),'\0b],%DEpQb!VLAK!)k`IpZE#4pYn3Bp[L-lpZV]Mp[I=0M0C;769f37n$^YdTW.!.i"N5Gjc&:!Mu2X(&s8u..?jid2p"rRZ,UA`WqOI!%ELK51Vt1aPirj'/-3%;]0)+^U#P[g-hc"j]J<aZKCLZ`PYVO2,%_/4^bUm>0IiHE=mms+LmKe8fVdj33l+Uu\q?+9qi7.hOSKfc-%pZfJde$uo9XdPPY.@3sqV/rY!>&d_`ih>!\QhGpQ%O+9RYIWJ0]mD[eKLqTT^2olT*[a!gVdtssoRu?ub04+hnD2oLB@*Xu:6ASe%#Fq#91K*ALo$Z*JQYr(TjSQ!DnoqK1JO0]+Ed?G_>.n*sS"WUf:LD<,QrqDn^*F8mHV._@EsE,A47d#rf`Q.FBEqP?dJ0>o.'C[R%Z[I+KCL>pmFFL>>Nm-[0AEg2FWqoL46'.+gZT%:&!Am)d:K_,a]R*LoM&5=2FT/4jc*$-=r?JspD/X=bFfYJA76c;Q(-]S(*0?pK%JB/ZH1pY>&^"I,0]SMg*T*t@?i4o!r!"S1fX=:39X_+B1TrXW!i>9Be'o3R0VI@V&IZ\3l<:nNR8[g5so0,)LCa+0))h,GO0Acg&%.jI]T^!*B-;PjfZpP3h>CNXN[[^-#m"fg9IOT<'_)BCdH\)2B9V1WhW6C/B(LMkh#7ECjZU-RY,[3aMQ]E'X43eZ5#I[AK15V3uQ%qg[e'n@=1o*'W]@Q8PV0[58QD7=*%D-/%cVOu,`r;H]<ZR!;26oT6A9Xi[l6=a3nD[$$aLqRE!c!FFf@WbG"-75YMl7r2@`ALfac%XGoWF%X#ZEn=kfb.bJLH+R>KK.KcnU28dp\PM/iM78e:)WkfN0SS2G9&n2!gCNa=Kn2Uu$la``>RJ_-ZdXu^u0<lQl9@aLk[VQd-%;S\Mre],TT?.*8,#tGG3n:UL,;cI%rrW'"$k;!GMg6=.n]>t_j2p#)7*3c5RVG.^4W2KooV&8\lCs$Iq1UJ3;>$eNDJOgi42%"_K%RRgE6Zn9I5"!q2OBTV@CQ"8X2A%o`D9bR^<Dg?R@&I?3U:Ptte3!WST!WF4q.$gS>42Ms;Sa;^s8:*usC;;pZ?40J#j:Z)Qh',`i%R`RNfdOa3`o5F41U0jQRQl2?(Uq<@U(a+-]H4&mJ/4B)ams09keW3tPq?M:Q\@E#T8+Z,"OG`=@89[m]5>e\YfBL`2n)eo-J^+*W%6/@<I,9$<r>&77E9o._b:>_J/5?m6a5mu^+d6E3>Ja5(=EMPf!7Cbp-o1f.:p.#tfq6P'if)44<P?./=Vpk%8-TP=+(?%hF#(Io3%d'"mp:932CoKJsNUKtENPO>P?UYmGbmhW+uH4-@UPdh;?M?7i=\c"I?6o'4#l+](Rs,drS>hAeX<;>'"BpOMD'5)HV"F]ZMC/N$G%GKeHj?=hLL\!qTBa_m+Lf6Rp])eeh.`6tsONQ]:<iqBG-*6N\kdU)=m"C'nJ(5#qg?C>tB/=Vrj[:G('<Y&K60cJ_%%l'nXpl@/C%;m\AQK4l:bb651M4kGpQ&Nnb=/eM<M2,28o.54EKKM=i/IFn88QDA,8>;hYk8_TNU7W@PSA6/<hp)#X3gO8Q!G26>O^K\HD9GZ)B%L?hN`%m\9uji-JhWII>I:3VBblCbLaDKhRFiotk>>cTg=Z%YOr+I9`G%[UY-MKnfbmY0C#pBNK#]q&UNm"Xh"ICLmU.0?u(mT+N=%KnF7^-T;L&L8s#h-]D-[GWYP&'9kj6()KV>\.\7PgD=/)f;npF2/f2JGDquT,elPJ:8?ZAjZN<,-[`MZSUS7Ts#44a9IP;/BnSuf%qFb6i^b#-6ER-iW@47GUEt'mRk$%/cCS;Lr565(gU.]H@M2AHr^$F'j;FV%uP;9"AmFPVSU$;9AWm`&4pac"sm/K&*7oaIB.uhm^%Ko$"gC8kP>\K/C(<cD5,S_ar,eqhc"mDs>1!6h4mrTRpSh1,9h;RPA*cKg$unNDkZ_f`!s#b;*N*V0"M^DE]I.bgu'gT%5GiZ?\B%!+@=WWMUraVJJOATaVcU:/iVel\;BBMBsdH6="I\J/Yu9S@rhW:<_^SAf`".B(9`S/EUdDDqKg2rsgNc>4"K[6Eg1C87lg*]&.80%c^i(LgDMhohH?['4c\8;JK3WaLR>EX,@YAMVUu(gO`#bQ4)[*`_C4Rr=r))./\f)PgVk*ap;%EslIN"K7%VgkI@ke]J1Zi)V\sk+%9"1EQDJ';H8*MEM)lAHBqn<2@457f&]:$<1\[q!6XIKk2<2<#6q6&mmG+-^1S&t>VC1/,=VWH#6ctGu&j"%?_%NM(H>9?j!:t'."%&H*V8PI<(%c8qkq3N]cjm9dP/EeriNSB?r]LmE><WrEaK6b$A;PtIj;6G)i9Lt7^9m'J7%!B<^?pC:Ze#j1MfE*d<=Wie;&$[%,[%(=$\L>W<BJ<eb7t39W3a'q!HD)$3$W;Vo*/Ib&opDOB9Ir?G"e#^-)okF#ha$5p$?q`8j`99LZOMKR0iMH<TcAj,etlY1iN:M9?Z%FOb]*^q-WqQ]@[r,r0Bm_n[iK#K^W:>*Y?Ikt\1RL-:Hj8g6.RCNUoA;E^`%Lac)tV>jCEj,[rC?ENP<PniDYd0,MpU`s.8Yj.7T%34oBo0]1Ao_j8:qGLUU^?qe&ah>4nR<o7W0.`?9H:OU*AS&'WqNb5?*$`9@Cmmc6p,`SkSm.>cDgd\%tdV/JWNf0gFA@4"jmu6R`%FS;<T3VNF9'QcBU]7!N6N>)ZFSld`!X/$TVDS+o#AWPR7nEg&(r/GIMlVY"@W-?Vga`[LDD5USY.O:Kk^H*CZDe2]6.@$>"T5M-e%X`KgYTT5Ql2_[@4+]#g`aeR(_qpQQt*a-Y8=BVkcm6SKaDn29B^Y?JC7l_]cB`?(iCcd&1&\<.t42i7HNJm]4P"<Fob*6"//9$R6%qUhi]dq(*]AOXr=.^r=t1`Dmg0^%Z*_poo*QONsYVq%t`J/HS97)Y7^%l$tHX(CDZW711@H`jcWadt-i;53)4MY8&3RC2jlHD<;!%%l[I]lh#_e.mK^\E'tjmETkDij8,\sO&aoDUZA%@f=aH<hP9V=4h"T:1c'o)YMC%?gUID7$=ZMfNs?]N@aHY0Q$q&XdX?-Y1[_fe%bKM+=f?6Pfh67ft'WSE&k][70KK=.hnAD$UF]oR`Ek'kp5pr7f<IZU-j&E'f+f_mg;/U,0]dmNu<34fQB-T8%!II4L!mc]q+d3l;%gHKZ*'HLW",Q5hdX'N7;L<Q="g_j>'%cfq%'nh?#q@+1J1EE@qo@9m##7WtW.>$RCj8$cVe&<946D*p#Pib?_'hrX5m>U))WXM&@%2PXf7crD,i/7haHKUZ)p%s/7d=7sreARU+G7>1afQ5(T\@&Q]0>BR!a*1'fVe*_uDM\E&p*.1T_a)->JWO\:MC>T2di<Fn;hBhg1%B4<a>b-%HW4"-E@+F7m)I9Y`)@&0`[7K%ndij`#H/.-Vul*(JSli4K\F?0^3WHV7LH)KC9gH-.0(r^J`),BkU<Up.45kn:Pr1rc[%neC6V,q(oa"Y^UVDPkR"c=_IY?hed.[PC#.'frJ@:89OG`+jB2#+,VH'f/SqYN;eOF3mk)Z7j@'$?5ml6]\7$Rf2%`A3-CO1S>FJ%CZ?-J"DdVGWOFYU(0.,Y]e5X-d&gZi"fQ'!$UHic2q:3@ZnbCRiD?r>W,Q-Z-ko/$gDa*EEO7g0U>)_U[">_g^T9BPSH4\Z>mj,#%mpu^*.m-dr(!K5h00mF?DS=L@cFo4-]#2=E*&l.+eY:XuJs/=EL[N-Qe%P%C*<SrdV(I,NmN`>%!6j"hX4C#uH/,M\L!bo*!`/_$%$rLK8;fFcK#@)JJ*_3$"Phno<*TI@0f*7.Vfki\(,&d_?hE#3#a63ro)PFRml?hjgk]e)SJQ[IMdikmkf6*[>'&8Rfjg6XsSuBW2%NAX_T4"##3L'hk<"^tm\gTgY3PlY<$s'P0]Q,p1EK%(2Vo#;.nNhZ)HAiL^!j6.Vg4[amJmYGa+FG+l258$,WOk^"aPR\?m%FHC=%XlgRS*t)CO$J\K&_"0V$*&PuG:7]GB8SAAC)A$`'kRumB0lgXA^^RWhZ+,l[P%)A*Km)c0$`ZV*\fRUMcGFhFmi<#=*J=r[L'#j?%akq%Q2kbhZc1kV4\-!aJ8bsb_X6ASW_"I5sOQ"R+WWZ9kJ_3e^+a;fB3?G4\AKj[85#R04#fI>W_(d\If3'45bfVmGnG"P(!lcb<%YbF^g6dl4TfA_UW.N"h)Xj0uhXsY3g?'d7-6@*!97bHrB3^l&%94]=-V^I1bOfNTYk>$NYq<`?PImP77;&YL+6jTMhVO>dS:Eir8%G_ITi)V's!(bdkk2M1&2VkqC;8g7$_<%`P2r4e20GCqk96$1k#.q(TQSlpT@R@G)klX:L%)6b*/4TH"TYDq`24BfuM'm=aO]a,3c%'lU90YJ&_@nnDguo_HsYkPas%ou[2*I^?Z:]Ni'^4a9tUYe9J4:j94Ya2YaYP4<4&oA.uU4mh@bmcUKpS)$BL/=2SaCL5T!8!;@P%IP5"Y992$`^Lj*TDCg!XS%[FrlJ2="qX/tg0D)9:^Y""I]=FWG7tpg2(R8Gfqt+?rX53%Gkg(fGkL[q=>Q*RU06usFb&XZ<hX0EJ%Nr#)808rDRE`%12RfD5hH9*ulX@]V@@iKc2g,8K_mAJ:@j$NHMFJiTY[4e!g=62*)CV=P*WOP&T-nfC:CNK)8XR\;Xk@3i%WL7[@%2VtXfnsB<lV>3suOlP2[@R]/PZ+9Dqkp^BQL>4;,^%g<9DbkfrGH*_8ngi;ca17t17kHWRpJ,ib2fF1Q=K7T8qV-_@V09;]OdfFE%/EPb?Ip:VX4FL9`\:\EI:0p)p>d%+s/,WFT.b/\q=jOC\lBpE(j)8`+YHOu%`r+#X/)@&JKA>nBP92d``Qe'WQg3A=Z$u7T1Y8Wh%D(\!/>@07WT:a_0F1#(JF5>!!]QCP.q^kj+YBhQ]2Y3n`SuP\2X^5+P@".4Nk6if`DSBO#1`6K>G3:dl3ua5U9?Xd#K6c/GA3>0H%(><,^2GU9Ees,br?`;WoXa*1qL%4LA:<=mDe9K_73k`UA/K-,\CS"LL-2G`Z^#H&unYH(jl!kNV1%<%]C5%PhbtI41G;T01oV0"W%IG6_5]k54kbGB-Y1$+%n"0DB+>'f_5[&asK?9Iu93ISWH?N'lc/'XkS?taICYC!rJU&6Ej!+1<Ya:$<)Z&l!u9Ri-WSe7s<*I=\&%+-#`Sgi;l];R*\,qFAYISj(F=kO79]#P7EAjn9)XK4=5HraYQ?QaMa^q7QF[pl#gVUJ^tl3g5n*o%NurI_#7PoW1mhDQL"mRe%?W%6LC0L"FTaa1_6YSTKhc+8+Uk@J+qX^EcJA\RaHj'RdiScI_V(p]Cb[4q8!Vg@9Ch;qJlODmeBe30T91gZ2u'A7(htPi(Y5CjQm]Z%F7Z5hebKU7gW%F2<;sP0&drN'gF*kh4.\#WjkKL\kZifj.o%Xf#f\kX07*eq'&Xt^l.,3&md-34*4)p"=oVN/W4gL=UlFDqb2VHb%)f-X*EYsErgFY'@kq!T&NPhgFdVcK5E%2./LGin7UJ_geF;'>-q#jN@ZrjiJ/G76[b.GQ]q,'/3cG@>?j!<.J_l_A0o!oc"-2*W$%\hH(845R"jJVJGY(\>6\Y2VoD-&$AD+3YW/9hCJ3/T#EnF8?.'`Il0V\Yt!WQ<nBU>FCrkn,f[@[;r7FRsALTs+D(]<o-#CVG<&M%h`B*Shttr9^<nuUkDh4Q5DCLk0DQ'!9$?T\9)6Sdq'gMi]6jt9^-'LV9=pNa>:p\,:U^cMD>TK1_:$I&D6CaLK@aIjeahkAoCo3A%^D5)&bL>7Yq+<;FmRcj9pf#*,hH8GRN><?4kU!aqIO/jlY801lo#@!.+R&N[LX-s&-=BILAM$R<K@7X.+/a[dM-L3Z?Kdjp0Kf)C%kdpG(Bmlm\"-$T3V!$i*j&>C0gT,pMe]rTtgt45iTua\VciUgTo('i;=mfsBX9D\)0^(4k1cN%3[3oe!7/:*dYjlbKcnZ,I(CTg0%f697Jab.V[jQV9/<S6-GD_Inf>OljW4^WOb0/"#GqQLc%NOekX,XLs5*`ZX".ah,QBNKJ;=.chQ]Rp:&nuT+O`_+q6=,MdUfuHho%Mel3ur)oPZpP5*U6>qI!=>/<6\;<q0n1X\XlVn!WF$N+`dEU'(k2ltEL+j+[4P8LP7bBaZ(A'pf6qP=P*:8u>qX#;K^%f"7c8o8Z%1gUB^UuF3n7`ErtqHKQp7mp.fQ]9)9_<cq).V<Gq?m6fDi:XtP+L-O,#n<V-QlOEYX5G?_k4cM'1PX.V>[A[O#obXJo35arL4:te%!6m`c0h/GP(>e_h$<SU?=EFR'H'h^[)6P5FS/fiWS?_R4*)RrDl4`YIUK@XnU<-TKM3m2K'`=O?:IdIB_L^2;-O6smRai2Tf2?Ua%6nUr.f)61%pr\4D.:)FRT:3GWWQ4T<Odr@@/UKSqVZ7#\?Snt,L29J0).M<_`cu0!o&;i]A)p-:B^kfj1$na"b8m4fDO!/Q]#Wan%f+cV?fXVdMb)>*H\%N;fjTj,;@)W[1Md-(Da5FKBY;T/u]t5]B^Rf;..T\j+0N0=.'70[dF>tMV*D<:Ec9Nor%VTOK`J^##Qd#+a%fNJ+lfXObb,sBsEH+IB"/dI.RMm$LfaGU>cceR;aX15oioX0#U*c,>m.>N7QU=`oANRTrB=SZ!88$B'Z>l4^jkXh[O=[$0:)p?B]%&3%c-o8B@?XL'#C<p2!G)V>(!4>6'-[4d2NU([R$.E8f>UYN",pM?dZpDR"8Bs6qFIa6o^^f(;Q?2s\,Js-nB$$o5D0fV`:RWr/2%c_2kF)@Ms#Z1$;F+@<=Og$Z:-#OgfY4TFXDX$!qt!M+h>mT3pbJM`Fc[QbR8kDcCd_;]b>mH1<Zq7#s&qW&-]W\@rH,fV%Hp+MBV%g#C;$dg=)"OTcBC,Ccl(D4WS-O)t3e?3@flF>Dte"u7[,@.\hT(sdR1fZH.3MbiF4ccl^os6r;0rSlDY]F3`lFp!pH(&55mhs*<d%\*^#7m7k+Dh%;rq``&aC[W4ltbpB<:nO'H!^>)dJh`\3W8G2bG$cKX)&qYSoj40pAjlZka0]98n55S]mJ8Q-55C^)M"G+W[:%JO!%%0M6dq((S&KA_@-m*](FfoU0A?A2j!,@B:UIEq\kR,tMYSinQi=p'jYA_q<.N3eflYC<e$b3l>.gOi5)(*Au`]R^PVbidis3BFuY%RpS/RY'MpB5EX0j_>/YhgW;@^HM_S=d^(<dOhUj=cZA\A99qNKh91#rg>;'el<mnD\c*&5]7O"g$Tg]0qjmY.?5qrOH21b76"g`l%IEgI2Y?1W0a4cSj4\)bZBmI&^nC;^Xg#B:AlKT)CS)nAmXOCUgI(&h.&i!BF2pT1H2G`3_4^#C%3i[i&ZbI0G$efkSJ[)mdI+<Z=%NUbXTa#kc`?mU6s%5jGHH5.\!KIe8.@?T\Q%?cb3V,nK>8hYjLm964?WuIF+=S[%e]dit/6s<7rjU9>II/oS&9<S]jbNf?I=d,rm%i:E9O590<:Y<U*.2N?$i^Sr!L9m`9ahnha:dpG_d_Y,3dN)nXC?=[1_J7[&%TBg:\[jS=KVsT,eHm<td6_d.'E]`FG=c[LX=^Od6%?fsYii%H-frlBRpn1E4fcZc%)NQ:WU$$unoc:-uFoj^/O_iVn;7'X@:YBMY8;_h/C3_*W5bt=EDC<8&Uh*4++hdd`B:2R78=ctu3%Zj$=YW4u8hq#XmslD)U`Qg^L[GFJ2#H2ZfP2YZpu_+!e]GR5RPXnf(PB)YE*G"#Jd)3j<b`LTf:cd:?)U`uJ&2icl%D]M&fHrN:V%o]/BE#5$%sXN/N'<ssoojP9O9:S,MDr"\^SrG]IDpujK1;[n]L@B['1bc$B\%Hja4QN+OAo!mTOHesH*^3F&XGKYcWang"#-$8D9%")6rIeqVe0DdOq\]D'!>>H9u:]*BtEEir[FYl-*_[88l3Bl8Cu9Dd3$EJ7/ZR;XS@qiN)gmaoE.b+l)P\QH&%QJ3Kmd#>Q+44;;Z%[[R/-:U/]!Y$m'pkYVk,ake=bA6p2C[gI$\-SH^WiN6F.+++.!q8XXPo&^J!47nu)Z9[9qcJ1N6JAfYt(?G(p@6?4Cf\S#7G4iWW%p*T=qUBecldC4:mrp[0&N32L1=tb'QEBJpGJkWZ2Y&s$Dg8^[t?RrhH>gIU^ceBDl`kl>3`?([IhTVBpWc*bPqqGlMUYC82Tr7k&%qt(`lrmq[kp>u90TNIRaI!:ErILZPmK6k'QE64%$L)S)Tp/S8;S29P"EZ<>^[C8<'a@oTYUYUAu0''`OPRErsLYIl^b<%_2odUbb%,kp[&k/m.R;r/qrL!bDtIe7T#mF8i%Zo[#!b"E6=!Wh+5ROd<jK?LWh1,glAb/RIlYIX;BgtDu0o&Jd,#CiII:m@dtVWlt>GC4nG%Gu?^F#]7=1?4DeF_s5D,g7.P4Jo_E?a2Z#;X5GSCpu;,pLXBnO$.^atrhkb+9D@a2:23iDag&ND-uOP%onprUjjM0.j8!o7M][E/%S,4l2@=EM!&BrbV8+`%sjTX"Pg,ul[a/d25E>O3iWR_b/E2WHlgX^cJ_<]A6UTaW*Xkh7A0WY^ao3r<`G2APn[?kVN5$n/=c@Lh/%=QX(X+2@h^QPBD`ZFKR:h?=_52HUHtEq6Ku2nNC&fVtHOE;:Ao`;?:@nJ+EF_,:gEnl6b(ftsJ[GLoX,/)'ikgR%L]K\8#^2E+ra%*f72Dh&uJn>ns:dop.f\0A^E>SA+Rj/Lh*Q\/-V_"8uD(NalqS_t%]G<7+pso1F0\L0.5mk0[KQk2=-CY+;UF`:j=tIr10[@KF+h%l!eLJ8Hhb5r8^-n8I_pfS!R!2mjI"h4p^[u.jlc!bAVs2^.G0DLTXt=h!Y*uKpUQXcl%e)[Q\LcB]7>0/s`*DqY3[U%To8Tq1cHU%QpM*t+k+6G"nUCIou5nD8o:?h@k+>up9kd6I&#*b((&n$*YZckH0JSfGUe%/?Af$"OD?g.Y"Cgn`>U1Lf\Z!3QhPu/\YjO,n4,(a%([C*RWUeF2!g1]ZDRj9uDF^7W+5;R_'I^0:RSTM?f`'\4I%_Af?k5);.8,j6]o;J1ek\q3qbNQ/J6uBtQ$]b@@efdSoN]\]ofP2%%pO0W`d3pZ*5'XH>UX=+;,5e5*VIY0$K<k-DpX'J8,A9_<l1r3N`=EfZ]NM@$>2/Nd>$e.TelXdp7iI@]oDM*,B5R><\FdI4??iku%;NTcnHgC+RP:#48\1%(Ki^]3F8CYa7.rJHn%W^-Gk<^j/Ui8Q4Fgf-<CJ4!$J_Q0ahY+;8W_gT?(ac,JRl>f;p(@)S8*0=("Yfc"%i4,6"^BOkT6jJYQp4.Qd(%=^Op2W[HRkQK3cWXd2`13[Hi8Iha>0/rrLX:j](RUt`S(FgC<TE/rQP7Pi=kG?3I]>TM#j^I3``r+O%nb)4-L]1b&Zl8^LA`lX!F8a9DE')=R99QUYUB4Wuit^5%=snOHcqd#$fQk6b>C?ITq"g6_D#Yp@M,U@#ec+L%H$hM`c-8Vt_Xlc@%DEQ]V*dk+007H#65nrtX7sUk7n[Quu:VLT'3m#i\4YN`nGd?shdsP8n]`TsM0*UsGg>2gJ]^tpa8s%h5X&^akCPq`M+Q$:`O13tq%I,BO$l0!\8*\6gDlhR4OmE=E#G?[2+fP%+hI&t^`Lm'FLII>d)e5fXG@H-/rjBC^_4^Y[P>5YBWaT`*!/4.UQJFiV[!!N3R%r1M!%+LoR=lniqac9)SMB4#M)hZ_5nVkK>$;Yf&rR&H%pb=NXk3^QT+Lm<J$EEmll?`e,qIs@O1=j&nZhNL"Y6F,l<7&)0V-cbiJ9&ND)%/%PW1gULL7nH%mIKSK-m+W(IYe%0VSrXR?AC?bVC\R`28V6B>@hgrXIq%-L&S+1Crds"U*m$9ksCqI@4?Z28\`hK'^>?n8!Xdupo%(l:bhd;Qkhn!0LH4$W^H>5;Q3jL%p/7@=&MfB%qGEO#8^q!m'`q&El("UM7hjD]Tt/'jf>]UZ024YM8`Is<4mRbnU/ojDj0URG$:%(+qPH/&e&KiA>$7-0=OW8*,HVGmicri8\i^^d"%g2gikHa7rRdSKF3j5Vn.@reQTPG*N]k4@A\eVOS"5aJr2Kk?QS1cF<8c\^nq/%#N]k3?PF3/cc&rrC/Q`JhY,XSopu'K6Y#N^]5td,/UK)oYaVIA?:bqeqr$Tg63j.%>eRE9kY%qX7CmoU<8(Q^60ac%6&(DHV94^5%B^4E;c=?`Wl-j/>iY5j4(tgh0jg/<8a-W&TNq*-UnDer&P'PSAcg9+`Q<pFZ[i#Mn&WH.>4)-e4G":!qO*cU#'"7<67u#Ys]^5Cd%H(,NVT@s^_&9l_64*kqQj0\SAiT0$76^nVPXfFppT</7*(L6^[.IORG1AIf/9Q7:=4Hf.1FS?!!I_F3Lq$FOed"Z/L.(>Dnl8mHV%%bYPr]j8nC%[=7k]=<,!g87Jas.e6,)h'(n;`ZnLG#tbGMS?6?H;t^kEjj]<3FP%]<='^mQgQgd;.Rl_hXDCt4L9p#%WZgX^ct@5%*]'\ekR;gSgKK"RDQOs0]'jKJ4c4'-NA#G@Dg;eM#8CV$fiLu%6)8nh(j)_?IcP$^RR>C\RAn;]KbN[g>"hF7<]6(<iF;>Q@V+!8%b%iXsX?S[V$;)a?9fS,e':.nX*QM+[fY.a[5@u"Gf^AN4]rQJB*3^E(_@qiM>s.N6+u\9I-#l_&bT3=M`Ak:-,$YT*JK31^Gf3D)%Kn#b2Z)@2>^ZjZ'rPW1WSVuW1p)HjO[VN;;T]ble]&V'sL+Af&B?+KUo2G0+Sk+eU%m<Q=m;DMT1j]*ieiRa'@:u(L9a6pWMR=)B%(K&RT[Fq^oNE5<fFK.oLZ3QWh"lgr8e*21t`_7J=nN-?'`S7Y1Og(AFA,o8$7[4VTZS,OX9$n*UZAmf'G='D85ImJWk4k+qTR0=p%a-R7?&o\Is\n^C*GGa!r+0%DSV6G8=<7SlL<$LBA?0F%kf:#Q2[HSr0@UkO06aKL`k["\Xohh!7A&mBJ+]_sAHhWRCf-1qDDL4OT%SC;!E-V5D7AmlP07Q9)on"he>7"ro3p@7hp@o0t(^1RSK^G8:O=1Zpu]8Ot*1OP'+>-J2Xqm,&Vf444\V8rr^ItXBcHBB5kEF,'*%_BIY.;S@t:E-YZEjaN61Yug0H`Z8T!ALah=36m45rU=OU&bs0n24RDs*P?E&`_L-dD;f>a`bAR,e\f!_NFQ$>`KY?b"Cm;jHhZiS%?Woph&>c+o^<o@WX.(he3h]6D476tf<!8bkqUf!Y:pI1mPh)X*nPIoLIj^6j:.&DM;AAO,-mb,nlphCq,T'"._Yu5ePjOJqb#rNQ%Zdm'?ou>-r]!Z]sS8Q5R]tl^q^:;YhSK8n'hWHDl`&SjQ)`,mTCs0M2qYk@(7hhs+a$UN_JOO:4DlY$_k_91,+a'Scn'V4aIGCen%/EHNpfOPB0jqArI[;`+tqd03LaelS["dJ9^3T77+R%`S0[,d$`T#DY_%9\'=G+Nf'8MFU`]>Rn]32,8Q7)=&E1.J<@J_lb3VZPDb%BV,G8oXqflrPG&[EIkdBq/g:Z]\`b[=YJHE:oW0A<>i\HXGiJmk`(RAWMkGn=&(<3'G=B6K%m[%/pii-S@[mO65q,uC?G-)dHUYH%kJbY@AQ6b$"><Mhp#>*7b$aiup3oW`%QjGkC&T1:E!6F"rC](oEe"]=kBLti2I7JcLP*X:LS"r:O,k$q*1HA!@QK6--[QA*Arg(q%18^VYB.1ZQPgL)QHTnoX%U?d'R\P3Gp1'\6o5:H3d5_qO_j8T@i&cB@Y/iaH]t7HHs.OdDO"5EPn)59H6fe@'ZT0Ie%u#N5$S]\F%fTYLudY#225AFNTD)lB)QCbq5UT*UrDp:;qP-h<$b9?AX#hFO=@dWAtZ!)!^J@KdbA6Yu.(0jpW\o(qp!naAn1l^3diW+GHh>$\e%k8%fjR:jn,iJft;r:R1cd:6jcHB@o;TD0<uL*^DBkR7YA6>6_2Wb+smjhLVU)UPr=_'NAb,@Fq,'ua"TMJC:BE*V"Br9joDpXM8K%Z`ogBIlb%X4P?7c,P8eACIn.'Q$kAj]YcK_TRW]3Bo7dgQ'GoTQ;FRih:=Dn&P3&'6InsiO>NFZ8N&=5#aka#`I$bd+su?G"8?A-%9`1b:1bSl/Z]2&cJugI\OAq?A27'%0B%AjS,GQ)X`;`u.;`%e%RPq)FToaj7Ue$Bq=9.s)L"ZRW[`khSl"3Cu;3ids$OTGpq@.m@%eR3J"=?scB0+QqJ."Q#9$Y5,cIS87RqMG\2bp&^UWj[r;f-O.'QU"R\-F,m[,ep)=MN(M!63,hm&BL$r/%uS*:m5n[$j"M-TZ3'd%N?sqVUM"+j(=S@<M^+Q;ZmWYBSd"<hIqU#Y@>'cg'$qGb=t?XF3bi+1`iG8W_M:`o,ufKs[?[h%!*HK@)+L?n9Zr<Z<FoQW`Ia8=%@1uHnJFF]QJ.tZqW!EPGO:</O)Hm=J_?A>`.>4Z7+c,1m`)&&$6P"__h3(XXjA:K?!jkfN44:ZOC0:r:G\Eah0l+t<*(!4#idrkB%fL((kW*.(r8_(oi=BJE"MCRq"@Pq\(6O2V$l;CFbl`q"B[\92p,9pMKd23gQVPRL"_q'Z[Cl^e3#nW4-?%dnlM*h^[L1si<GL.PX%>unCM6gS#9jfE!mKR,=E?&"2u,T(*C%aY^lUZs&_ROVrm'ndJ3kL0^h.#VUH8-ujhMpGuIWNN75(*o<P%OMH`&g\-9%VAV('Tiq)%T279#MP*e]5!`ZZVhs469Gn6mi*Hp'J]e4=<Cqi%TbeFT7[8Ma<9RL.TIRjh1^g[P88;.ZWDH=>&gdc!`UJQ.T0*,i&mHIC1PF,L%cT"8K!fIA[oU/Rl-K*T;nKo"J%d`Rr@q^39(cChjnhdnI_]T?qO8pR/F.Up)3<TOE!\=b:C^cEK;Gd(/i$2BeRHD?+hC'kYX(>oY%-I?qePYn)2:!Y:)W>Gqp"tlPmQ@RWtQ&)(7&PQRAPSMOi(>`JE`O7Y.gb=,;'u1,-pPQ'T;Q>?>,6MGLN(`#P:eGRg,"i.FUnK:S%1,9=[ju'3n;A^b'\.8aqQ.9[[22'k]!Fl6W-O2fPd'=9.5g"qE:^7L?#`$"5a+QtbP9M3Q_$G1*:QT*NI5Dh33(laZpW0::=r)4\%-IQ*U<+%rDAeNCe7b,0A#]lrEaMp2S-K4kM8N8Q$Tf3o)Z=%p7$I4j^(atiSAWkgUh#\V'Uk&C%dF?79<WXP^C!QiZL=$0Y@K;6Y%73INrdZ?=\73nNUR4o(>LsVgQph9R3!GOrUAuiee$*]M=#>i\S6An%VpcT#/-&g2`633:#=Tb0]Hl\;=O9&*F5un&-LSQDe)*n=V%.26;M,16Wk/EjE["u+\/PGEgqU*,mg'[3)cPr+kG)[HHui,-RYVB?UkP-enq`1_Zi!=SN-)@./f"D/!eB!M`]67]%W1.)gZ!0j3)%1O1\uquGK%rXmLJdS,mG0IjU)#V5uLdPapV^f,bc"k`qo9`gJSD)=hMKbLV(SgOLra-U,:KV8;I:e8e4.(X#rM&qH0TV^>s)#ITC%0KGGu1-+N-ZiO7]ZEU!_M[_M:Wrgj[.P.G$8C0AJAB=i&OjIGB-ja^_Zg.\?_=@]gJQ3n.pZG$n>G\*X$76C1_[NjPs%NP*!b:M!%W0emqg]7d$Zs]bEm_bUM&62%UEbM+(2?cs(#ULE:b=4!&66E/-^s$Jt5Ud6p3NL91/Pm.-7`2Eb8.Ta@+p44L*.^5Q^-$a`.DeE7%YPL;3Z%p]!cUC1H!l#%OoJojc-/d\]D3<EP$3a<>O>;ohJEil!"VVS@A2'3ujG(Xc^tadoc9rR@_[Eq>GM$;L<&/#O&1g'U$1p3>%^f"#gU0F[NmaOhOdEqf`aMm'YJ`EhgKtqg6"cB<:BIn[j!ZXIV7)6e[Tfj>gKgMZW?r='#'+*oa/1;3?^mg4t'OA%".>jUPKn5A:%!Q!M!e(f]s.XIT&3"l)?N'2$6bg>*V2!7*F:B6TU1@<3lBctC1ZaSLg!"730LP"GMKL763D\43u>;pgIiVt1sj^SZ*"ZQXE`F(d!%mTqpUBPXU2)kd37JkFNn/C:cb$0)[*%6N\[&71+dAW,F:q!M'%SS=T=SfUc\)ngMjSX>3gKGula-E&GSJiX"0%M4gY`FbL5Y]N?4%8S3f<"3cLY8nZ,Y5Z3qO=\XJp6,?0D0*,%/+qOOq1`_4<W*sL_8>Ifh.3!@/KO?8V'.Bs_/=edeC;Y8E5\e3(+APF`1h#YXSTl.(%R#WLD"s`7X&4ImeA<9AK#XNmf(CTOP7;Yf@kSHp1Wg):<.ClGCnHj%<H@ZnkBm92J/]qoI&2@@O-3+uU",l89Hm!r)_kE1oO9F-(%%=oW)PuJNN##Gug.$t!u[HKtD(IJI&om&4I>Th64NXr1H,PRl@KMpT5MtKeP"&mZcYoa"d7mq37W'C,J#g1O']((V39M(O9Jlr4/%0EgM^IPo!t7KCe;=a]@G!78R)TP%X^BS83QA7RXg<$f`id*Dbi&mTX\8-!0u_k`0k]V.tb>O30p$>\sIX?Qh!8&kT@.9RG=;?bgP%D_$R$r<:*$BmddJAJuXa0utL6?;uL>'/[aY$6ou.&!oS"5h1[c"Dc?mO]Cqm$F3I<*X"0f@=UQD0T5rF#s4q]L+'/o#ofJ9n2,l3%3D<I3m1D5_Z]GqKl4=KkEI\U!'#7#iK]pdUbS$$_9L%$8>]_N(TI>pB5^hVG%7(.P76(a_J`b.D+i"X,nCPI#f`H9If.cEZ!7WdJ%#`t)r$k7:rkos!`0hnGITYd3Q+:d1t$O/6I#G2]]()`iAJU%(\0=;sMb:4DB,UT`1I;=S13hhO](JZ5:km6>+S&lX/j?\$Yr"=6m%2J"%ag&d6-6PY"t(f3jkbD-r:"]N_t81mQ!a]H?Q@.MU)AJ-0g5X[91fjd7?\BS8/+MNLk8"lN*fm<lc*;iC95pB"pM`apU@MZd<%Gm.-p`TFh*e/8R[/e!JL_i._jBZ'rUIEZ/6NRf53US"F-[28gA>k.F:rr1*X+'\3GEA)7c,+p,1\8]UA4tpr.MG6b];SG[6_7Q)h%!7)&g9G@mIWhRZ\(k<AmT#Oq<7??^Z">j!U.\ptaY`3oM?.N,a!>O#@&iIJ:Z6<252&UJ6rht2]ZmdH^NfmH:Tt:Rf+Ni5$od*&M%RKi&NTH=d.NJQ<LcsZX\@Bbf-d$$_Z?r-k8gSMk7.n\E\\_0]7*,]5\#0!Ds`.FqT[&f!T&'-"=Zo6(6L!,95FFahi0PT`T,8>`4%#o@^uTTu=8m`2E-7N!b-_8$UoUZ69S'a=7>edrXh9ER)(#146\$Dk/gMl'(5GLt5#P>9)EVBom7#"_io1GC1JD42;%BJSUe%9"(1%o>H<9Bp(peFb;M;QBT,&To:5;Q8$+Z,nj,(.E`30&XbQs<1%435ROS;#QmrEaikCb18(>oe2tTE2V9+'JIY(0!7V'W>gC9IdMk?f%Q81nr2DCAq;lkqG50:go#u!7[&?.L4J78umJDa%-r(=#5RRP%,/K-(&:IGksTO]H!9ggDn84US@F?<0PXg?sgCMP9!,D)K*]FMbW%7A83F9UDjo8jgMgM6C"sWbsYGW^I=YO;R>U6/FaYM.([V3)":$BfQN2;j5W,+\^LEaY8Ec:d,Tl31Eg73g`3iaX2ZT&Ea]-_-G%s%B,qr5:S&!!R4VoL&n&.C)\=:A0G:MJ%$/jV5BpTD-.gLbP9c]Y*sC&YE<HV\^assGMLgop:tt#/nEmQFA<9_6A"&m<</[&_^uLV4%dOd.>9/`rWTcJp9Bq5)*fiR)d(po69%%&FX/g-+9GIXG(4A9\g+E'dXEnP9a6drt!1YN[DJgqC--.RfJRplJ(,Deh=$ERVj.07af%78K4)auZ5LnMs]t2LZ=-?U_%1%%L>;4shU`D!E*3@NtJbm>,!Un4O3n[ki$!A>;YOQ7/O4ii0G;Mq!aqX@CS]H3:Ume;aUq!];AY%gR=F&C.CR&*P4(HLQ$iU@"LM>`+*ad"pSJJ@qJHXQNFHHT=2d%!2Xe"Wad5OANC%>,'kdoGFFKL<m2t+oIsEN(;$?+JCu9tj&ub#%Rq,)[o-T[P<-;I@cl!\2'BMmkm^>B';lWtiIi9+._&S#%7S.;*I3!!V(sq9INhR&j,ASi?ULR2&2,u<?@\]6B%KSlT4rZqCdTo3b%AI'\4h&(e);QunZPg3)7FNYq%Q/d0+DYl[-8-.(h%7&:H`q9F=/B7&k#c*F][!69B:+S_)2%W-D"'l(!VN@[l`&t&A6pZNX;^+s@%8W[W5#)#W><X/YY.6n+mAu#h;%2Z@-V,@,X#+G].d&"6>#%&"e#kLO5[4i#G(,g+d"8uU-_M#fg!MNju9'DYp2?VrdU-F5HTG>L%%-tiZb%&lT20$C2YCsWlrKtCo<&/u:8$due_FYM-'4AmL-2C]*[f93s<5_U6f`M0Ff)GJIa6Ghrn8.T=`<,$aukbi^l2o)OdIUH&J%<G831qQu[H[<\uj;*p:G6VNK^Cp=&<>9Z-4`e.Db$`$h0-!KFK)C-7a/i8)&@ER=)2hqSJX:"e+;)M47OQjWIB;W?cEWF.;G/,MN%aFumPnT:<eJ;-[sP3<1?'H'8&5^87k*P;Epo#)=Q\"Q[^a>uk'*0@"$?EP+.@:\@%a`p;WjTa*\3\;29;[u/`I7`*\[ODfDZHLh?%<Pp)BOtco,^90qf4ThF.V\2hr*#ns1FQsWO*=2lMH&oTbSWp%4/r37_6AoXmY*=RF@ZftaiJJ'2obef"UHVLF;DGQdp)aQSR8!@M%089T4;TU7Y(*J^)SH'#QCWQ9Y/e-T]![,]>+U$E-d1*DkN29ZJW1aH+;#4E#WA#VfHOq,2"e/t@9u?f4NlSBGPlP)tU!\f<@j,Do%7sd\?Q.0XXF[5p@8S*``%6\$VW5(L$,`RC&no>mc!n(Ku=.u!Qbi8asK#\7b!J5$_N;u9!1Hd\T\&^g">S)OJE3C7&>@bro>@_6K%H]gK/"@KJ/]`DO[13C_orDdi+`Y_HN=j%!f6F*1M#1,/u_ko37Udf2S@%a/[5jS:!OX[OLO942F6(..`DrP^Nn@)A"pIZ?mKn7&/%0St2m>V)T970o6!&H[_`q`dV#+B6BN23fbr16AB%$q;0B(lUmd0d4U*gkal6/r5?R44p?dMkRT2O.nAs#6OuJ)L:KGQ,+_5FjM+_%Wd#h$Q+@i&&b?nJmO\R"DmELLa+X9d_g^Y6>eG\,kD'OmXN5aU.+8prLuK8kI(2GF1#cWM'!r7dYY1C8/D:LM1J0QF+Od^e$#ijJ%3XZ^Y6RFJC)@ioZ@^)P6Xha#CVPP[,87R:mXc&JrkoPp%Q'(5q1%>jD(A9LGb/BS,6*P6S1Kh\9eEu?Tf]EEL9nauEjq'M^iFb%_%&KJqeJB$T:#m%!0/4N(P@c2W3b+fQ')Lc^[GD0?@:SRXK((RC$./;/DQnJg3$csI)*tdXpW%o13+n=MM,%/mG2[,TuT."]$oiILZ%U.lg*fCW<4M-40r69A)\`0-T9@E`05p.2DhIs7j1h4)T+.q!oBg8M*W\<)@\[u!__#i,qUI<q%p!ETI!Xc*AjD91Y_at2*M6(oj+%<.(X+'E\\n<^:d\_Jk&q+hK!bJ^#`!AaQ<PeM1Ig7MO(Y6h?s$W*k6d%F^4e55^sngsEpOcU\aORC58A])W#qfdM%R2aGTOmSH\Y%;^i9_.D!?J;MZuoYCYFhAJ.QCG&<_<7hC!1!Y?J2m4HA,VZpjU+>%i(37#*!8s>D9%5aVlGmK?X&C@:kM%ZsW1%ti1#H4GoTLk'%%;TS'd0Lss90KBe.8oKl1AtP!?+eKparK>59-Db';0IG^79L'cJ2X%dS%1ZkN!0U5[49Ct]MMFT]E.(AgFHs]7)FOb5H8nTa7)6#A%D4cake(_28dKGk8%0P;!BLdsd#+#kU)0@rK[PZ7`_h[JXPPe2><aqlc5\pE6T9SaUb<kElW[uq[fhlEc$YL9?]&B3?;".Eo@KnG%%ZehuU><4mj0`>jnZP4)pW\anfGGqfaV`JE8NUX_C&-mq[&nKf(QPJXKf.i2bARai(neWU?Nt<<GE8;q)L-,Kc/Vo965f#1p/c1d0%ZdA"A)5X=AfTnpGUC>-R$<!(=Tot@0/s8pt%un#\_edu8BhuS$ZPm]R[4i2gAAeLoTF)&l<0aHfjY4YaC[?k=A.f=FS#NE3C<Nn3%IKM!9"uO#g.iN`p1l2P\.\ZW76^OG!7'E#!!<Lol"<t#d`L$1t`KG>A@q7^>@As+>!Ci=]nhH=1bY"!Q_.=M/gS#%Qa:DP6.q<E6%WQFdrJii_Zp3hD2KKOZWA%E(rBcS4$;K03V:]m'dd+KUYbXcqV7^W=TV`K.$>W:E7X>8Og/+IGB[ApQ\.010KWB&26iSHj%=uPCF%'iP2i3s/m^2'uiSQ(@">m--?_m-,-U@S9K(joJ.&8%A.'rJ:^\K;Ia=e"fo6P]Y;u64]I&aM_Obi>]$9nBN`][(V-LDL1O^+)K[K%+%ink=_IU9C`4b*TAZ\(nA.M[LS0@kXB<ofBK+G4%gmW[b!&coVPC`84dM;^UeoYDOLB"QK+s3#3:\ufn7LD907'1VR%e`D&8;:r%L4YY]Q"4g:S8EU"2FLa[7Q\dNA99t>'%k1-XAG*(TKlfq9UTX6*Ju^HXG=Y+VD!Q6H20^XOs36*`>I+nFJF@U>6OrB&Rd+J*dkHO%"YbETP8^gT]@KrINs>RfhaJ3O?<.Y_>osB<EM:R7JYJ2t+P!:D-b(:,;G('.*$_R@EEIc4@It1O*/Z4>p632""%lu6'W.@!R?FD6%DDEV)J0(FYM)ba7-p3//_J"]TbP)-99']&TW[iU7Qtc'<>$aG)Qdud>KM+s!>OrV"O!b8\[VdX()M7fBiD>YYfTOA-m/e+GU1-d.%,*XiRXNb/D6te:%n^(Z9a6uRobA#[,K#FRLBm]I.o]^&sd"!&d[Qc4X%Gn(`&2u"RaZIEM"<6>)L#q/8gn:mAG).):Q4FLGK9mgD%E!']XeQ?]cLUb/5TR;bW"q,F'`cC\`DU@%!I7+W0W$mIf5gVL=#MZ?/#*C)kZ';-#7)=ZE5ska\,XIn&/]:#/(2>e5s-lZBqB&N>%>)7rk-k(!(Y:b'9Lb!WQ9I\r24'H3[ECYg25^,RlbiUG4(9jHcG\GGj/Hf/=A<n;$O$gh`i?C893\30#$hWb[p#l&']?<PePp0m[%YQu..cHQoB=LQ`sg"'VCg\,2_MeMsoZ>IY'[N6[JHE:rK55.H&]c*s#j.Vtm]<S^MPPEF./Mi$kO8*M5G@dcm7$BOk`E+kup\<r#%+:Lj[9nZ-KXbgGONB8D!VjYLiF>=a.R6bqL#Q4qLNhtb/-etQ8@!$8d@@C9J1iYee+^bq!?J!,B?*)tm3ur5F6nj66'%AYZVg9IH%=[M<(<-I!tK^*[7';;FdLPlJ98R=tB\dTc;#TatO/7)DQF5[DDLl@TuBj1S/6o7RC2@67*"/Pl2IVmabEp:)/^kXK\FCPMseMQ)$%\#`1+KAkB#YHfG&_0+OQK6o7O#S=>.-!LdI$h=EV2+B;(W$KbnDM$k%#RYI'<u^@r0c3!q9e_3j,0/aJ]A!BRFdZh`]M)8_IB+4#%&kk&,Q,."%DT/=`Te'MSVWC$q@NL,P./#$M59/@GI,&?XZ)P`3Hu`OMh!SY8<"a8Xa>o]CB1c,-@bXloVI8i@X/t:%/:u$Q='*:n%9a8H;-A*2EikZ$eC^[TBLnJ@Sa%.Lr`LKJr!EXf"A2$sD0F7f-:j;t/Su4X_i(='N-l!9Y><4jPN>l"UWbR.fZu@$_!sPgb7P:Wt%:li;0UH,2e(lUAjiH]&D;njImMOI:!oa%4,CDLq.h>tS`PHb1r``6NIXk475]+"cF[;h>"*GZ<\&ng4,.81Oc,"e]^@s"AEcl<sk%IY<8&(r8ba\@>4@8pKP:'6b(+&A_reRI2GSBDHD75p(hOIn^TD!]L/a,r(7PWL+:8(+H)YilsVoY47l3*=Sg1DcHj'Qk9e:l,^@L%6G__E9:Xsa*mEQJHNkn.:G.1V_-rUPkaGsP$WD!oVC$;@R6c02!gn]i8hfF^-SGY%S]-5`X<^n9KOJDCbNfG^1m3>Wa)e]o4()ND%-_>bM/tIjA!q?^#MW]'M"t2Om*uf-N0#E,=3c<THo.h;cg9`_)p!3;N.'=cAP,=*%kSCeZKo$ZpKIPd*joC-Q_Dm(G\cAQO'6o]X%4R*m82t4n`8Q4UB,Ja)1kkkX?ib`CGS)Gtb@<AMEGLEa8MiP[I(S2'j2,'-:!=0W$Bih<2c9'XSj1;p#)>,;f@7\a6!98^*j)Z3?%g*YQ8[i9p&&lTI$JMKLu%!NEN[)^7<\Mn6)_1uHga:Yf?kX2UL#ufWf#Z^ACE<^^P5sGF0NsKrGq,!3<!n>7(n+!(iROXDODX0YJ%4!:@p)fN63n49ORa/Fe?0ga/@'c-H"K*4O;5`q'-0L-/0e'cJ`">ZWP)5O;91?'?Rg(,]3&WaJ,-=^^q>m$L]2:P8b2Zc[G@K7.B%-pW2#EM&Y1F%])hcu>&2.P`I?US\I-&L&HF$Hs.XQ#X.-7!EAPqY:*HIERWk8WqmGj?IV4^e@+k_OhFS<2ZPB"XHX6`@MCRWn%0<%h*O?%hj9sFr\tr28J\4f_R)4$jP^Pt]=GKJ0sc_Y5RPZl7YR<#6kT$iJm`"3-jkh$TT*iL!Nk9F[rI[U%/RMi5bV0D-nd8^HUDSa%;6iUu#)&HK/iB;BVOb/<pgn<DV]Jt4Vg^?E'14UmY.Au"pjj"u9'^+DBH6tpldl]N4>c>;kaWN8EF\"-;8Er\ejjMs'E]T#][;6U%hF]q?_%^r]-G!?m2t3%L6HjY^*s7:LVTc()TEclhZTVoR6)a"6&Eoglo?@kOD@;Q3%!f/;,'DOhj-./9imb(,D79KWKhnZK"Hl)[%;,u).c1!nN4B\KrX(@sN)KOo&!SfMJ]4-2>f2/@Z,=S/E`tP(..XLA"(_!'-$()VAWgr6*"5YS]@E"IGdN,[-a*9"NM-h>_!jtEm%7cC)!E0\!'`?>BEK2:jQhU"2VK`3_b+ri>#lgQ;jXt??\G^Jem&#kfPrQSP+)@SGK%=J/[K5?h@-8+H7Pne_k[2\FZf;jB:e>&hR%7kuo[6a<nc:hI6(]Z5Ujo)pf(6WnOIE[6P_BNmYREhE_o4QSiqGh(W_IU&bO)0M1%<$Fj/,/G<.MHti"9pLR.HK18!r1blB]C=TU%U(02qMb"<<30`Or0Eh-K-(G-$=nLmPi1])m@U45ds1ATuE@?eK.*JU>:T?F4l0*,W`j^5_k?b>Y0Kn=&bA$fTd*]T:LRlA9C"Msi%S`KZo^:.$JL680Jp^AY0a/MRfHK%BRG^^9I;3`IhqjH/R\.$DWMmDP=6\1\9R6ci5kB)0cDc7\BFU0=(3RL:_S1'usZ-P"t`]0Bt%g,Tkk?.I5oN:*E`"pB.nEVVdnolegu08d"0`h/OYa+Dl(9bj!k\\Ti[V)o);I-U$+C@OgaI1:q1`?V<a#5Pt?2@rFsLb.*l%)V;m%"FlOBLSK,D)&VgnR#>nhqQTkQ`[CumXVeoDU?TGpY%%JV0)D^KcGTFsgL6BG/NtLd[V9ZYXUGW6!Y!%I#SE)*orn+=SF'nnJ;,!$%3=[m_%DVm"6OtqcgN^bn+E]b58CfA_/0\(/XnD+<RsY:L*u7gpOqH=m)s/qn!snM.42s!9@&[R>.,9l94,E=umfA#i7s#b\%#5Q/%pSjaW`%m^jp+c=a&9`/(aG>Wi_;M,M#-b[r@CG.N0CsDX9<"DO?[Fb5=9,2o/Z^53Q<1S;T_TQa(r7]FBS27:>-)3.&022R$rR\m%TSSlN0jZHVB='1B0>)r]8mao$4+:GdG[upZ"1Zi3/B'.Y<JH1TX_'XS/To7R*b)B;Bq'1[RG%YH5(:Vg-6iol^XfEodVNq5fYCUp%,50H\L53glSK[K,_1R3$'/84D&hRQ1>Sug/6u@N!-)YF]JdQm'IA)D2J9<!U0H;^9\mQQUS7,Pno\9c2f,VH2o6a5ZX!>4Gm"PaL%J8ZGQOLg'q[2=:cDVhDjPq(>NG7go'9(&0lo$IK.fn6mcK3D="PnVGH/I9H.56<Y`ESW2:#,9N51h6=/A4+@FEmSMV+LY]N0WHIe%n,-eBYC$8AMd<'dhp,&W7luZK"nSrE0K`i9M&:&4p&K?dbgq0gkRN=UW@Jn:RQ!SAKmfhbe&Jo>rX4!TLfORh/YLfVYd6ORZsr(J%r&W,Fqak<4Q#+^c&j\sB=*`/m["1=BZHm0nklo,;Q3Yr@lr5CME.rVPD'k]YCQ'j@LoCo1B<ZAG[pb"27Dt:<.!H6%)eYGCIn$8W%YR"CMbQ+gKWsec4U>)P\<j@FR`g_]-E'b[V@YK[]!h)O0E%;,9(+hdDJ32Z[D)43K7ndUGDDPR&a6%;VW`b<HWT#uR%;,9:[5V;8%LfP7Cm,<E69ae?4d'.3=V9PtH"d6odH<rU<%24ePH]DOm'-*oT5MTfTU5gt,*gTsNRFn@(oZ8KmJr[*)1$@EkJ4i0!)'f[3.?5rg%).$R?&I]q;)+JD4*MF@+gdY!]3,5udFr1])K3pnUm\*#q0Lud9LKLY^B*nL6MJ!K!:ui,c/q%_I:-[Voe(/t2*b(!8E.jU:7X'T6%8A,!Z8i7Z+E!8ba;4$gkL$19R3.Jk=TfDUb(#ms)lhJi;/o=]pgh$tXk`QsTod7:,@Nu/2#@k&<NJ?@W6uZmg@(@>u6Fgg+2'+k[%L9JT_?.ZVE*dhrhdl+q>@$SUhMRjoR>a^TKbZc8G@mM1RAMi6'aE"^UnEuaEVa.%$^084!iXpgd_:,k"L/MiQ=JBY:kD_cRdn!^;%N"s,.di7)g86/0<2;3U3Ld!UI44jVEO2@uAGZnY:NJ.tiM"%uQ(T]uZn<f%M);okb4^1dT:lLm%F+RU#Y5?m)_fR;=8BiW*k\5o1%H?6p2bb^HQFr2o@R'&RU\YE!Zj)*El]"r#I*R5dVHhp,F_hnW1oC/;kFM12[;CHE"-EuAI?[tC?C+]s'f7k8hHWDO"cTBu0fQoYI%"IKs>%C"s`Tu"W-6B1l>R8%/-/"T$h[q<^!OX]\cc?N4.T"]c%lAn$kr("2?O.Hjld,&uNW\"FN1S8j'>91*4,8r5!Ve#S%10PEt%E)7%[d_A.B7>m1fg,M/X<nt'F&uR2p?g%KYW,!25Wl%'o+@A:Xn_2nb%mSXF6Xe0S_Gd[ZkS4:VOK)Pp5U*;"2"%:26H"gjjhTu@%UB`#;%ZJ,^pk:O]7>C5+N)ksSKY<8[UGDBC\[Kpe%Lu5b\14&>?)H!FK\aY#OnoqJCS4`LT#$uVSqj3WIisurZ13$_k+E8t5io#)%2:Jea2I#s$D;]_,k[RH%").Pc@<YE3MI[<%$QKdCo,/*c`:IgrXn=brLG0c]eR(Ft12)(V1sb-]lamW1_eVTs6jkiDiDGVX^V^V9%l4\R&;mpPdaSLqJl+38poDu)7Ju,JupK?3X![tkK?k*RY@f]0pgrX2-A1h<VYH@`1,j?E9qA\?85RlP<M[SFs%p=<\lKrgb5,>'r%D>di)fK&*E5`CToJ1dt<R>fUZ@<nCkf;9Pa`EpulFk:rRhE!..%f6$94>2j;V;KDmo@X,oa\EF$Vb#9-EjU9dMm)f'UW&6*cf9:%%chafPpoG?3Z+n\ZYIZVuE$7_=33@_#qS1Ee(roq+V\\0'c&\cHo]nS%r1XOn`<Dq_P$_F@;ua>H(sY"XT3'!#Z/UM2#.>pfGC%t7%U#QU,"\atA2>=!=D_sEBSjb5M);r]spNX86-LZuDo<AZB']O8^WCbik;u=$>7-^B;97*jGGLP6KqY?['Ioc?L*\uq?Z(0C_[JFgD%#DSM;<CPNWonNKk]!hjug'fUb"Y>KN;0p)n79lnned-WtS>UUHnF]Q6/-=GXs2dkuls`c+&D-5LalE<c6[Z$9lRi+9CHHsus&I@:%6E1?KU`-0NSQ+Y(>GdQu@$+54;@Tl=WFiW;_M(sALWaogeI68UCA-bEK2[Es`Y58ik6n0l:Ss_R)F$2=n9QQ7VhQg\jc37qJ(Ze=%LQtsYaa\>G&=B0JV0:hI!$nBf.]%m\;5Mb^Ji-.0K/h*t$DReL&LfaT9=KiuR#U?"2@:Gi955O#[%"7GLB_*TELLPsGVW#_m!mbb%p/!k*\=J#a.N^UqV[0eFL0Qpu/[jh\"L7t\78Y*3d((`1:mh'G0MpQGE+rjuNI`htI(`DJoa,nSnB-cHN8/I(*-gAM$U0_EP`=@2%@#0Re5\CS.$F#"E@Q)EsC`XZTRrGfd<Plh@4;@ri140'U/t]U#Ual=JkOR$s_<7P=<poZR@8)D1S9NHPosO;@+5m79N&h-qh'hM-%Dd*6[aq557#"[RI,g.1iN:[qEB'gE\#L]^k'66aN4m[K*5B5Or+Yf1ILDqtH#^/+XJc=?`S[T"q"U@^L-Ko\t+r#dF\54=9/?rMS%@._YiCjIG$H=XL,9bqRMr4f6nIj(*-,N'B.46t3&S&*EYC=K$BY`HV<+9Q1FL*n['&c&+qX#E?gBegDr\Gu-c]&Z5Zg@$Vt*U5oq%Tl7H3S_g'ffr9h@5bsYfka/u<E%"Bd5nLpcF(fd;U"kV_))G3Wi<#,n0+\2BCmG/,1"7``'V9MW*iU!oeM-_3M"l<q0f!2TE!!*>%\G+KdmKhm'_MF)EC.#bAD9G-?QW<TMG7IppP!*,=pY38'N-CoH(/"krp@X9E$9OluiSt=5iq9a5fC('Js7M4=>0DYBi-KN&*>c7j%3+a2-*m"ZL*EOc?>i=<(q*<`&7PFJN!7:hs=mRHH0Mr&6@158("9@)eOnQS%kmJA)`S8f:\hQk>[P^Yi\[I=ma0m6S\O-Kh#Z\#S%DqSr/9uM[05RaDY)$kh.!-tuT=fel\o6_CC(12^?6es:YpHkB"G]1EUm#?+PTM-OYA7GUbSC?0To$A[71EksYqo8#h4'r5'Wf2/T%MRDY?,[E.u+mTX#Kj@R"At]8-:(m0%R_q;NT`-D.#J\7tlsWHeiJe$,+JQ8`9*E1?W#>lELp1A.0^-;oQ,-:Y^Wm:I-io/UJRhOn%!J(Q_-"!1kIpFI>0fqk0jb.Ps4eTJJ3/0F@e$sQX+E6<*'8ONto`jEmiSjD$[Y4*VbTHMI&%+2BPDeM3X]U[L_>3ApEl29)2K%/X%OWifS@$(o4RGC<J2k.H:QTHj;1>"'7(i5E%7LsX.(8`&a#E]ZIQp5K@F-ruIZQ"9SXAn6?:$*KLMk.C;3IW$@#0-2&>X8-rpn4EK%kj+cr38'!>fJe!4?m/RYU9bC9?P-JOn.cnK0t>&9li]jId;/s,_3FS'1*n<G'(73fW>sD\HHJXR*)5YWSYO:M,P/],YinB=h&Jn?%V6XPki"Oq9-OQWF=i)`Z-HKLkefVo2Zi2:7&87sH2AY7VHe27iK>,^!(c@^7LdH2u+N`>i&CnRM@hh(DC17INfD/hgNFDCq-AiZs%hU^b3iPGE8s6eO^s6_;XSG]\grT'ZsH7%3I[.;jqlW5.^kblehqJ],/>shZlpDcf!l&BU/m;LK.+;r6,auE.8FALPD@i0lc.)S"n%N&$:-FW@"]-ZW02R#Ic415a5]m!TT5Afh>QGg9_31?]]I+cVMCKpt-gR$\;XTSP,Uq;2k)$#/2Gaao-njdH/)Z"J,mD*,;'Ns51i%PnFe%>]W-pR[eI&Fu2s?]X3.HZnLH'd<]7\:Agd1K?AAsgNI8hgNN)V,c(D7Z1nN^3f_B5=F:3m"Ub[7U:DsO*sCa[Hs>e&ppNq`%nFV6uT+=GK=\CkqW5ZqH`_jB"H5EJ(`u'ZDiFNj]A<9ZY%OCXMnP^<*P`%q5r)=Fl0[\94nV;,`b-uNmNc-Gc./l3tqrtRGlU_m!%^\[o-4;GW'hTtFm1koK]6Sant^lkrBISKE<nX^Y!9MCMEM8hO=[Xo]!\TrHp0.e!CFPDhXFPDh=)EYUMk4d>oCt:DIhP/O>/T$\h%443E+2r!hJ_u8rG[iH:p;@)"%HW!?U$[PKG8l2lnHO$Kc@5tS2"#sU*^G(IdkQMF01QWt_fnZV\SI]oSG$]oP18X1.P>OL/fe/1k%ARrt6<hB$3IO=T3-qP3alds.nrbcZMj&7o1s*add_n6[7hB5`VUqljSBOoejCj#M]2Lu$l`sHnt']eZ+`aTF41Q6O,hPMYoo,R0;%(#r46m%G)FIA7:/4o%kf@?*^MSP9e[ZI%tSbKB4_,oK7n/O2SN_kPM#OPH!YZI!e4`GTXA[]jrrp;d])NYWY=<ORFk?(a8R(nk&1%3K3DP0M"ZlGRaqGV$4,CYDp73>:RMsU0Lt%R;HNP%ne1>Z_`2D7GrcA=N]f0R=MtZj:;_;e*!H:!`0^O.6q85"Z.1UZ9[?*l+A;q%5+!R6JrSLIMc1><mmugX>"V%\"Ja:6>mg:K6)[O\LKEH^@h=W7"j9Hf.7\FsF]O86YbsL').'*FcMM=1OI(Zfn"hc?AU"C0iDk,G%H#&87F`;MC]ugp__j_5X-F4XP^'S*]o^nIo'#M%pD>>Nbh(@R4X8l4s#4.^Jgd2u0N2p]P8EH03Af=/6#X"q?0<%9Ro)tc#1ED+M%dgeTCGb;2UU+lKIpLAb;BQ:_":id6X":Fj?TQeGaduP7#Bhmb1G&&Era/9%MV%.j@Z_<SIk%l0l;o7%!&^5g]VLIFHQG7s]g:-CB%HE8e5UQDd.+:1[&4"?jJ`bOtc3j#HrDh978*>V^p_`j"2kLQ)emFQ2GK%b@r5#uoO).AAGM^4`jQo(e)<a!j>N!q?`S0tf5CC,Fs%Y#1O;1;!ZAZ<H26it>:s0?VqG:en'mmNPnj(CB%ZqK$<^AKD8dZ>r)r)O:#Dj?-H[D[).O"87+[EJa?:lt9X2O2??4AiU4g\@U>r%bp).,G%XegRg5X]r@i^LlJT(885-'/)nC7`T[hNo;'e9u]IFtOC)@<<ALdSS]c]SIMr03:-W,d+p<PG]=+qGSEQ_/JjH=BW_)RM6%Xp_b'?UrDS^j*@?LZqTler(^-]qhg)K&(-V?[o9ha;%[A0-n@L8aUD'3taK^b[J:K:!`D8+tYcJ!V'TcBc;h%*Gh1%*I'$?kV7\K%,(`=Aa,5JSf=4q73[7J,rd[B@mTgO6lp@TKK%B8\Z%:]I/G5FQIc1oA-\:7#pgQ3:1_hnq"Ql:($"ES1K%6uq;c,]D=p/X.@?CYW%[_mX_'2IG/;!F+:]e4R$`riq`[L)D2)`&4CQUp+-5-J8/X&b+Ra3F&`n,`)`O'o:iJnjUq)N)E/kaZ9SkF)qr%eZD'!/_QSO7R$$%pu&,3-P],5!dSf=h2j[kZ7U(W9_+0=M%KIgQ&X:[@(?D9=2eSCQkEsFD#]O;26sR42(qG4X#ghh_]dNK;N^6d=>Xq#^Vj`SR+pP+%#o4OF<u;u+Yu.?t<_DV5k8=!@(g't]2lINIG64$A&17<O(mtMPCL>JK+hI/:Mhh7=\VQs`7B_lL2MHmCJWW0fOXj(S8RE)@Alc:k%V\'%Uj'Q#294WE;GbD;2Z(1WL3efEK]4uV?3_GaAoYo7R/KeBfiqk,*XTe=A5nnGLftX78*VXNU7-dl'm9/GiI)@QeL7k(!33o8B%=Nj3&Ol.n^H8k,oUeYJ#N#$R&H"h[sf07$)`ECJT.:GM4>ohHR6&R#YBk$Sc/g\KE:J><_2o#%m5$q;!o%L"IdEs7RT*DarBqS+k%i3MQ*(RKtb_7h63'I7.Z]F,&f%n#5uO:*hj)Mlm5HQWb>9:%<&FC&\i>*aH%$QAZT3YPiHi6'\3i+M*Sko1$WQJ:4$mHh(D$b*&:%aX]:Ha?]PXBXn9\4V2GYLosG@AV*6WZ>qLjrW5TOCm[^)&#Z[;@$!fLb]`K-VdrsFM7n^%(]okfq:%6a"4IjD$"u-*<4h,Jq$p"G%@UhDk`s47h;OS1+AhTPpin7s`2&$bH38p0L"R6,g=sUU3-XKgF5$`;sDj/Uu9RL@gaKi9XIZp0=i+\?76!<@;!m_0>5*kNI8]b?&%Aq"!.*2bDOZB4ghADbtW)=A<=_U(=Ff8JO0Zb8J[n"+R+XX*+H?kMp@C>nRGTt*IqrT@aYOg^S2Bp\3s5CI[Arft._Rot&aInhA=%5Gnj<I6CdGkRX+dc<=[V"F,j@O7DFtfjJdeOch(7je2G*33^H=0EUI^#@"t['9(5BfT)RbYg,i0Rq2pbWorOH-SVZk#duMSpMg'"%9D&C?RPgS7^Qktq6LXc3&.lo[>us0@#3<R2,MmdE$FY=X*I]OnqUR;UZ]'61MYLbR$bW'U7_;u8=*G,/(q#-!+sI]r3Z9#D-=d$S%7sG`ZJ?8jMg$jfF]W\ZX2tl8g)]_&cLAY(ueI0&0J]hjp7G]V,YKfUm+"%mcPPf^]ha'aEVqHSH,36p`<!a;u,/!Q0Oe)Gb2EJ@n%`qZNnn0iAZ>6@X,!WEG-6s=7e((83K9Doknc%c.>p1b:f2Zf?!85)d+R>h]KAg?;40OD3(47Ff^j0FXAFl`Gp6$^R?6eOcZ8=j<i%cJV&T&?tB:rfGHE62@%8:kU%5aiDII9[36BL[2c%e3G6&*B(f-[K&%)JL-"t1Y03$$+RCtqWe4"/"Wmf&`,@$rcM3A&".P_5!W/-%r^%4MdYa^$5S5fk.G?HO;<q)\2<a-n;1C;7!0)-GAMY$NWC$1]1<K!pS6lNgh5ER<n<qk'<5LkKqY1$g07Whb5Q(N05Q'qns5E)$%YAaI.O+6s3^\u2Ks)'k*f9IX_,e3Em\FT>=(8l_t4uLeg;RDpti4D]F9N`L,@8(>%i#'>OYW%jAcr%UEMN4.:YtNelmE\93R$adn%XI:RgXCKe>?;]J.N+5GkT\(6dM<_m4.I.c"iDOdIAVRS)[cu5<NuG3_FL]c$ea.Esb?bu`lNAll](eHM$M^"6.ns;?jP4fclb^8=%AC:k![WhA;-mDW4CRLip?2CI5+PbVlK%S5odEL/DI4V<1K>T6+d:ns5W:]>1h0pa(0b"^R]l+,Y0(-+VYet`+m-ZP4QlX3h'8cpg%U4gJqNjA;EhN*j80+7L%brCZ'da;,(f2Tun3kpH24Ci?K%Ktu$.oqbTe_Gf^$G.LlKN@5'_9']WS+RbH(kG/7#50fg84cY'$J9Wo%ebOW*jHa0u%41)ah8k"U(KVWglEFk"ouBJ0]3uk!c,07!7VRj0?.!)i1`P8%/4%1f3G`d>>6];EO(E:dYXYYKZ(nKu;V+1#2@WmS%[8.l%BNfRqf#r3K@^C0Zit[;CFS6jdgZe'Aa4A3HL@&!g85!SXNE8X%n`o>ddU?e%p?A?ll\?q!@^#2=kY9I0rMOWo^P=E\o31Q`%:6+c]Mu/\?M,('ITm[NX:!A2J6',1hKeDVEc>jkZp>3s96KqT;.V3aXq/lHbQognm>t:T?p"Js36kO,Dnb&^!K)CQhD6'H*JPe)g%%@t8(r>>cFqu't"a`jR0e#0P-Cr(&U.iEr.Kp(1Z+;f)F0]>$p0[(#<I"i.%&juE+Yl6O*q.32-%?i.!b'%QD.F"6>-X2>"o$"_(%]X40]n<aC!-uGbe'tu6r0=4P3.C<ae*Gna\0fMTc\&aSqh]b%s_.sb%QdN98Yq/\+'*U*,_&r#Y($t1<.>[dTN/JGK]*gtW'T6ud%*](;!R/%S[RC63MDjfS\Q7;4s\#7Ns@0bQ-n'9G9^sM\.T_?sAnZ@?kOLPiK-A*p!*E6IR%#K`[FY17ui9C&L`F']l(>!'/PU-.j%nk]C(5J<8N<e6o_>sl>G0$Km+AMD.&iKc>\YST*uD"QJL^VkGte*QJpE!(spB!q+WrN`Yr%0N]/H:@ZC$c`<ec#,2XLgT?-UR'7N%cuGOu-5A=aE1?4u+djn5]n("/Y@eoc:'5e+,]fSSTaad?O,R>k7Ui$8X(k=@73+44(--+qA:_Zn4.F^(kG@8\I2H/OYqj(Lf2p[r%ds;^D/Rk+MmB(l>B^;Npdg+noP0[b:6W?_RK%(/\_S>sHlHrG(JkoXd,@Dm*9UXFiH1Mk+X[?bIdcN,(m9QAfk2g(``Wq9CehOGd%Rcc%ekBt1re*T01#PRUfZsEsb_&^\::tT7`o!k*aA@B-\cVN9:Nmb#n^<dI@IU30Z2R(af+mI8TV;ZL2Do(+rmuLGp*ggsT0Yee]%8q@L6<CCSa+_UR7Dd:97h>Et(l$]a5])Ll:oflAE$["(a,A1ql_QrLs9"s=YEHa7,4L^?b%f5"an3W]S,gW#Ij4V*s4?F?Nat):V%^;Gd1^ALRg)XY6()KUtoBR\_k-gheQ,4itH=8:jAiPd;lHjc6,?q4=Df!,gehc<d$]I.KMHa:)s_@@*/X=ZPT5Bu5j3[&8H6Tk`Y%>Mq3fm)"*nG@YQ7:Y'^KRNUto;2"N4_r0beR"VOmE"TCa3!O3:><r)ng`9PPh357;OL<'>@2:#8&@4-3V'n[](,uV'>N"1Gn_8"A%A8QNdes>8phiV&nGaXN%'U7QV=GBo5>"4S'/&pD-[G<uK>D?4-F(Q$D`A9"X7j&[UKp.V+"V/Fi8\C)]*F%:UZaIKN[DhlS(,;AU%AmH'C_U]KH.Ud*gF<=7]e!k,7DWodVI."l.,grB.m0T+`pTXmnr9s_?SFb#NO-_K#2"W'M@hXiS`\)Z5E9BA"m_-Ym9Yr(2LZ(?B%m/12A![_n./(^W)')WmqRu`)E'DOZP0n8XSk%0O1:W"_M]H:`srjqo+#7;1h$HM+X+l4.:c?[Xk3feQKd,Hc88l4E.;3ukaU%bT1%>hr=jO4>&dh`6bnHfm+$?M2C-7>UEXXA%E!<'gto&mF5@Ab@qOGKs^thK_f7=$<-E&aC;M]5Npc8Y!h]lTr7r=$[X:*a7RH(%7[5%ic#t92j#XQTlm"$_Z0SjqZ'\$3:7$B)B@3*G`+57(cOVc8l5o_$=EWkar&f_Y:/':7Y_.?9UTGPk_U?4!;p=m_=@tm7Q]ng2\-hc%-YZD4T!dr+HrtpQh(k2dO55@K1UHG,3X"cN6&?9B/Uo>8ki8aVNlB7FIZ(o)55=uYOr.DU0Y"`S`B(I;HlZ.49Mf@KO-u,uD56g1%bb8sMp:?o7XGg<,2HJ1@:WHe-VK_ZT9Q&5GATgO+K(TnmXL$Ybs14kuT2JH,NpBfip$[OcRPGR:F'OMaGeR\[d",*8X6M]*/k9bn%-nE=*2<VT&g/.-A7r0T:DOB!2le,I[Y%;Vl2E+qXPcei5`<Dmk3tNj""uPTWXLF":V$G^Ys&d\*:T7ucLU=!icaVqKfA41s$c9)r%`n9Rna?1d--0:5DU.(KOR\R4VSrj!2eJ.*i;[+?g1KQQ1o(f%@@ms&_J.RtSfU3>)DRY:Ck3TmR6:bVjs-d#ihE1=IgZoP.(akMW%m)cK!XA$8YRFBec=)tOc::pTR\r?m5cEt[i4-TZfhm+FoDY/]+L%`UWV.6Xu*AgQ0@r%sT66hpJ6\;Zt74T&6Xh8fu`!\OOoKe(m%d>iRc.q:E<aJpSb/]tjn/7r]JjtMQms.NGG1c5)IBSuFe6?61_"D9VKa*3$LC,lPM`0r"[reABj<0Xp.+;]6`b+R2B1e9gN(+tlg%J4[NIN0LfY*guLKK)duJbdtl3_5RrDN03::7**lqL<7p5.YC$DM\!R_)nCGQf711WhHL-,$LT%aALeDX?b#I\<l9<62T'u&/18RL%/d9jabh4$eA_A3:b209Y=CQhC_1$0Za'pUT$!&MoO%$[#JQ_BsI!Lf]D7%b=3A^J<mnmSL@*d1c8c"IL[8SR0)"!sL-7jG$VD1GK%_og%fKPWqeM&R3bbO[K[O;k"&b-VQ-(<F\JK!rYj\tWGQPchD48*N($-Q;(E>fc0bppTAu`:LJ<@sJIXfJG2h2Ofc%40</_fT*:o%6VKZH0GP1Di,'p]AX=K`_DVIqLq%bR$]LI^LcD3EN]o$m#*1:[Y9K#&7)N0GPr-uj&TL>m`K47Qip`P)_BRtZ%I7F7EUXar/.I;h%\10`tST,BaFah(.k8"X7XBqP8&VmPAPc'Bu,fSKd8]3WBDhVr@LcG5gf^9bq#VgDkYq7.pYpnZHSK^hV^=HF_Ldh%@>86XJ&ol@r%\^@LRgI]>'8@!*_0&ej4N9iI33="7+X,,e`d.F(WN\_Kg.cN/"EF2-SQ3+A^XWhX8)\m?t@c]0#\/:8q_I:]D0$Ti<_s2DNl4"&T%SNn!2Q#PA20s2.L4"IEGmU2cs3LI&VL[P%>,i!sh,KEs(0kg-d9IDB-jQ*@t'21faTH`@u*?l!d`3>+YZmb?T&U0KupEGX^@!3>^%Elg=p-U4Y<%(=t[C_oe?jgMA((U133P@0"69Ls.Q27o-1TSNCgQlN6.X6p.XP?O#S"d9$UBKPNdL]AI48bW:2m&TR9n5:.W+fW,%%WJB>%pHhWH(s]^Z6ZhCnl<_88&Hrn),`k^.l<Z0hmb:n=K%VKkZgJ"3T09?g=4Oa)j&lMK?m:s@'u;0Z&59#MXh#<QPg?q-[U'(M%3kCr+0,p(a$761PD7UmWQsJpOH>u">Zg,Md93k_h>d=[5Vo"Ng[Lu>E8J[;A,qcES)aVCTQXU@QQFLD?,S76![2mSN(\^3Z.:1d`%Gu_MeZ2CVHfbQ+dZ)$,SL>=$5pK@$<@B_34F#'<Tb4V9H_5:=4FG_A5]3&N*[c#3[7"b3>icQJ]hNLQ*:NY0Ri5f**WFr2`9Q5"!%QLMfGZpe2NPLR%3[3ZWOZf%o:U&)A"<hU4SecZRW&^HNt/<gdaG+Z/gVR4DlD$aTYlphX[<Oo4Zga\O"$1,0898F^Q0A9=Si^5nD%96ab5-Z'13+h*ZDKW"Y%o70f6`)lkp[Zp"[R$WY"N1Fq9Q37kp,cCtp6-&gi4a\*0Fc7(VB5L4E0=uiWjY3Z1@\AmJ[Y1@/Q^rsV%2I0sQUr82rB9@j]4'#>fdsI<Z<T6&1B2qOSN63EKYHt6>.reFO\6t@t<T;HPqcP8^'B2!N8cZ?+W_0_%<`Otq0ZQ2:-BhuHb,E?A%PP\K_Ed3p4<`R6b/:E>T9G1$0P+X"_"<B6(oorHV@Z)(hIh>:S;0*=AhtJPis5;!bNP>L&ArR(<@m44k!:odh@+qA/G3e5rTS(E$%^pMtT)0rFJi:RDL\,:7#T<C?Is,`SFgg?WO5BqJEOh$i"&%kk1%c`auAFdu'nK"_K6MoJVkn-n:03CBF*I-1pbc^/q/CLet&0F!W%*;):QjV\)J[]![a'+QbR16XZhTkK&$NKN`n64[u?XE?j.'q%`J/ncZS@L&dNJg,CI6e`%!K;G)q)=*D5'CWk1f4-WWS@Es`7;P[D%lH=Vm'P5.n08-X**_A5uFS`+,KYBcmdnu0Z5'\s18gIYrA'Ms?cID*;N'C0-_oHOV/#oTOc//j`mXLgqpIIP[Bj9lX3(n^`TejUA%K1p!i,p5L<pW+Vk:c@5cb'YV*WWj)],inpoE0eS2.)I/'XL"EMaK0EHh9rnU+Nf#Vr+U^:iX:.^pB<YBYSQTk"a,+gdXq%"!?mBo%#t'7/rq4*4=U/F$ocMW7#>Uh"noS?dU4"Db;(ptiNR?gJA19j4^SDQ:!E[TApsg=,=IqX"AnT:oEm-pN!IlTmb@>1tI&'SrHV]H,%abc*_OUcq*9hK+JDCc7OqCdurd4i`T:pFkbm5];_nWe:CCZ;%B0]CrFe/PEhP(>@@%&3JP7f*%ZK.9J%iKq@(5b>I=)J1P9AM3JC%Wif="Q-a*(=iU\6\O+r9*SU$r\FF1l%eA,iR7sMG[;+J/1;3&;&'^ol6sW@6K9mJe.t(1'V$1iE?WX9tLoNkPZ/CaU'f,r@:K:P$%@ZUZuA3D!nE_iGsW)aAu:nTCJTFN#UM&VYX53mZ(0MM/bkL]r4jr6fA6U0Weo16Q/=CPZ^KU"%Z,]RcW/N,P0IJ0Tee+hK\YjZqh%TH)rI-#/jh1K^B">etrB5""H94<"m5K=MqE+Ft-0.OOr&N')HL%7dERbM9aA9*Rm;o55W..[94)+BEuX%,5%orTb.KnR4lFQYVt$%6==1_3s3\]LGuHSS4H&cDWlZLOP,*IA*MZC?pu:%]_r=3.H94!G*X6X.&,62f(.<)KOllO4*(4$]cSTu34?bk5\[SJG0j%t*KAMW%ZS]Z3Qi>iW8:5#c!TVDYLa-2@DV2\bNjWe@8&i$KrN=*P+dR;K,DCp+Z$2.CI:1#lbRoj,1;d8)Q2\soXc6/V>]*ZL%%he#biA"c%R#m5O[V]h2``+-QW3q2::X#/G(`$QWBjZ3j+.7H@BN=r")H<p1Hc*@!JK;8Mp5cc?lUb8--FU1]2rS-]'4i%nB,'4*9C*`^DAm&O%EU_[<N%-kBT-i^,@H#j/]3QAtKFCrU6VH*eggUl#-VmhNZdT@PZ7>32Y,DEA6,a>p_rd%(IjFV`+`CLt?Y?[dg@:VKE$5T,\tbn7%Na+nD<SAQ$ZhcanPfX4q_7^nn/hfJUa"u>`%-K]p[G!I5X+4kR0MgaFK7-rYbkba7F+X$l>6#pAUl1M48/)sn70d-(6O<.UjY5HJ%K#6?TC+]*P_W0\]C%1q+1eidQ,[#4&TNm7(*LF;HU:Apek"7g$Kf^NOaJFWBNOEeF#HI0G<sY?[hEeP."-pHZ6&c7u1^Qr+TtkIr%r;i:upIfuUrtsP^0j`ImV2gCHIfu%&_bb'9iB+!^YG1n#89H#,&%\KY-Y&?4gPT*^<UIY$/'C8%`mgNWXD+#=o[aBZ<Hga0LbQ-1%G>+FmgH2noc_>#A;:ML9*^rqulMH0"1$f+0J_!K1DD+_g8\m7(b6(>V8;?+HF$3DbDtIW]fX'F*#.iSr(3JD_mSO@abF+P5PbRcP%ePX#D_1[M\((;,LQ;;]c*0`1Ce"&*7^)8a^W@&nKE`M\<73,V$F<+ZaeF/uigO&4p@eb?V[qHrOaeI"h8RY3*WMCQu,(G4NjmlDJ%^Ak%hQ8fWNSa]5fR8O]=0Lm`^(_Yd4.MA)iU/"TL(R*c1MeLu$L43E)W#l1E!/,[STu9oh8XW^UBmT6`W/*Cej@!@+6A#>>H[ait%6I^;alRdF.&epSWP=18Yc$GSkj`^eaS#/h`:j:\<D?^S]5kcM`NqJS@K,@<2^DU-TI$rpYPFQ/(lj"S$.uki`@\JYIQR>6!\3@nU%<Sg/k$*O^tlP_/3Cso.E(dg<FUmpc8MJG0<Ll5I!4<J4d'@Uho<'&OSY4+%nh%V]k'9NNt2#a@:jGeUrAmAX74Bh![VgGS?X6R(Z%l]T!ao=JA4&Xhp14ka=u*1]3XhUJP^:_Yr#`e!E[R`5@h0dg"uJVm9nVP[R:I(uCqfWU%#$f6a'UO$=o90]a(b*UsD:Wdj:;dJ&7%^J,T+1u):hCL:AU!JXj4?cK_G-^%smkB4gOQBSkSY<Ws:He7_+6gMMZ8AcHK%"VIsW)CtF+)Hl+[%R*$b\oB)5mC;p8W'@N@kY`s%R0BE]dre=Hpn%:<8Ku(=+*c5E)nG^<#dj@\q)\X59q;;[U=:IF<jZQ]Y:D[,PG)?"6]Wth+:5K8m6Dc:fH-c0N"Q?kW]JToQSqR/%kL-7=)D`s+d?ktN_j-\LI3#IQ:%Y1gH'n/8B03OS`@Qnu7$AJEB*fSaLFWgT^9j,:s7ki]:EMDu5O@0lQ\N5$hUYa7e_l3hIuETp%]IEURE(o.H'R((Oh\S7CD3M]e-JtEEMWrZKR:pVoTf"!&b(<pcU7iHHEQ3,o.u_.:A<KrOH;QWXatM#\>C[/-mk>",SRRt=LZ-nG%%_(Ep1]+Ih6I/2#/p?Fg5ufdpotL?C(q*;3)7H"@r32'j$%*Z7rB?2%_l2uZNTsZkmfR(2p<jo^jHoQC!XpM-&/J0JQ>p1P97VU(%OdI8>PXqRUK<Lo7r]:<gZ<<n)I)(WY@.IGsZ&8dQ(@!S,=Lti3Ko#B_[.;a-gb"R9hB\-Rl#-#SJ$@3F?-W_+_G)W%[t1:"Gg8LC%rg"=F3`UV=1i`E3,*1Zq"[QIeRru7qdjfU<HX$d\:GY36M?026Rp/#T4p>[Xm*P@QF]S>)B@ANKe0hZ78g\^e:Mj=J^kY-n:+b'Y%m,[l9#2^cA]tlJQ9HJX9%&Cb!is4AXCL`M2&t&iK2_i'*O6dC&o!e@Bn<Ep\I'[uTjg4uJM#=QG0u!MN?SBcK=;g"d&e!"DDodFq%&X4Rjr)d@ek>M,A1@A!giYV3Npd'],SuZnO?l6R#kY#2KhAl[3!fT\*/>.dqgR]u43iU:6V$lLHT(VZM0[dNT[[WO30G:rWjrNnj%_,,.4K6?iF%I?NQ5L<K-TLO1>]R4'^('Nn19196@)MM':4M($.JpV]S?"7!>@qs#Ks0rhqa$L.8\%kOO<_>PW#d8S/iNtq+]nWC4%20S=tRDt8io/OJ93?&\^fGh4njQOJH#sP?nCC=\&`@t+^!'a]<Z"5*a\kM2_IMp"/dG;=\)Pd<t^C'+Z?=5almA,ZCYX_`E\.!W4%+aB-tef(n*G6?IEmN:acNCjtj2<ZmL^%pu%,E'FTX3%HCrjU$3T67@C[LDjpQbf9NbCIfom`+l]fH)S:]EPHjm1EV7QBKi5N5-TE%AOn&W#h8![C`2Yl0&o+0f?kKO/RWAD3oHb@VZDS9E@YMJ"Tg(RYA:1"[LROPf)ZuN014AB\f96;j&#G[&QQ>gPS\PIcJS(.Y=nM-%K%E071)Va7`[QWB*^t:sUB>!45+_Da"eKjA(9G8TYY0bCA\n3limPB8-b8!kI8Os<[8.g5Sa+:+G-acF[9!a;,Bo;rr_DVO.J#Nl%GC=e-3d\1p]l&MD$!qhR%Ja^b\cj'`YinDbfb^QS<EQ7]mgMF)`i%QDfu20fLC3P%>;2.!06U+&o=QJ&o?uT/X@4?FOP7TlR[9me%m&+i(]jt(h)U(pJT$N_i&%poXD7d9lIG=]C3O3.g7#MF1Ko)J[Q7+,3d.c&EH[G$rQP8(d&Je#HI^m=@J%J65FO+Xlrgl'oXn[2=%S&N\aPGl'[7BA!::"fBV!N<a0^@1R+,CS?as2SAlJ,Od[+rMld2X74c,i-IMdjN/:o*R\tG[qS;/;:_=9-IY<Re_Lm4ID_'KpF9G%R!hfW;]$Ko=u_Yf,r8rB6NHYHa]XDrgTDCHm79u^a/]%oJ/dpC1'R!oo6Z$+e.44%;CJ+Ye)ltm44`'<]rCV$g=9'a:&j+!9X,tA%!9S%%:ms.M$MWt>@(g4AQZ5:;Bm?2>`XIulO1arIQm(6Fr=ihe"Of)(\9C^V*<VuEO?q@8cJNAL8#\ElnF]*EeW2%@cjRI0mXQ+q%gO^IP%*4cJ`$]=4,Ji%<.hKg-i'"P"Lq\/)nAfPF/]ba:-RbeufGhU-":"1dhV"2mkD2\;FEF@eo=*0$;<W-&^+m&\`#.baJl.lc%OOdeD;eEnaW:2<Fj@.`s$a"<l>h\>W>M%h0+R%+?c-Qg0KD(*)p#^n4f$uP(Y3fu^bGc9e``$ZgnSO#L;+/)DK5J.PPqAZ:Mo@:s%47RWKH\[s!qU"#WmanB4\"r)5eGUHW$Y=8!.+mdP9!/NX%R4"(C)uG_,ph>ToCHSg7*t`S\%p>bi2m;;*9gX_@+#8Xr#N;4n-aCY%SFq*..Thr*W)Y:DA^7LJ;5oA.2Oa$Bf+a?;2_5\<85#2.hgqW$,I[4b;H(7Sm;sP7WW^d;jn!]S=Vo.70uRS$$i,lOe+e8qJk;[4%q)bh1<JNH=aL&X`#hj^ZFK?9P$^K&qJOa!l94$1!*+N:'l"$c;pp:._!WRrR]\q[uB-G$kX&U[8-*NR@/>[,*n%`_8F5]`^](Vsq%KsgDQ`]^oa-nAE#S@_%%S>[2T7D&`+<Q[YZ.V1PPSH<Tk;TLrh;Q6g4X]2`_<[t><Y(aLjYEd8YQ:c:L8>QZ/ku,SaYZCVgcH1=8%^@%L$T6<uCkS@en1+hQ-GSY>R3EiCu&Zo#?.:!=,#@8pOlW`Z(/L#<eXG+tUma8F3=l3EEg`p"_7($\WiZ39G;HC8-.9f4+'Ne"p%6Jd9[8p,8lV6WOs;LtZd/`[psX]/?1<2s.j.TKSDQU9P[[F2U,Ieu!,MnJ!Gn;%9`EkpYt2J8AX%:7oEkR5k0EGqM[/`as*PPECP%rTX&@s3mThqNog+s7Gs\5QCAjJ,])h+8u8_hTu5&rl_4ss68]2s5f;kqYAU4s5tL(&!6WZs7pS^o:Q$*It%7/".fRA~>%AI9_PrivateDataEnd